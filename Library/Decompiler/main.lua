
--[[
-- UnLuau (Atrexus) -- Unluau his project helped me in this project
-- Luau-UnLuau (Creator)

-- UnLuau to Luau and UnLuaus in lua

-- Created by Creator A.K.A. Hosvile (discord: hosvile)
--]]



local VSCode = false



if VSCode then
	_G.bit32 = bit32 or require("modules/bitwise").bit32
	_G.bit = bit or require("modules/bitwise").bit
end



local base64 = {}

local extract = _G.bit32 and _G.bit32.extract -- Lua 5.2/Lua 5.3 in compatibility mode
if not extract then
	if _G.bit then -- LuaJIT
		local shl, shr, band = _G.bit.lshift, _G.bit.rshift, _G.bit.band
		extract = function( v, from, width )
			return band( shr( v, from ), shl( 1, width ) - 1 )
		end
	elseif _G._VERSION == "Lua 5.1" then
		extract = function( v, from, width )
			local w = 0
			local flag = 2^from
			for i = 0, width-1 do
				local flag2 = flag + flag
				if v % flag2 >= flag then
					w = w + 2^i
				end
				flag = flag2
			end
			return w
		end
	else -- Lua 5.3+
		--extract = load[[return function( v, from, width )
			--return ( v >> from ) & ((1 << width) - 1)
		--end]]()
		
		extract = function( v, from, width )
			local w = 0
			local flag = 2^from
			for i = 0, width-1 do
				local flag2 = flag + flag
				if v % flag2 >= flag then
					w = w + 2^i
				end
				flag = flag2
			end
			return w
		end
	end
end


function base64.makeencoder( s62, s63, spad )
	local encoder = {}
	for b64code, char in pairs{[0]='A','B','C','D','E','F','G','H','I','J',
		'K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y',
		'Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n',
		'o','p','q','r','s','t','u','v','w','x','y','z','0','1','2',
		'3','4','5','6','7','8','9',s62 or '+',s63 or'/',spad or'='} do
		encoder[b64code] = char:byte()
	end
	return encoder
end

function base64.makedecoder( s62, s63, spad )
	local decoder = {}
	for b64code, charcode in pairs( base64.makeencoder( s62, s63, spad )) do
		decoder[charcode] = b64code
	end
	return decoder
end

local DEFAULT_ENCODER = base64.makeencoder()
local DEFAULT_DECODER = base64.makedecoder()

local char, concat = string.char, table.concat

function base64.encode( str, encoder, usecaching )
	encoder = encoder or DEFAULT_ENCODER
	local t, k, n = {}, 1, #str
	local lastn = n % 3
	local cache = {}
	for i = 1, n-lastn, 3 do
		local a, b, c = str:byte( i, i+2 )
		local v = a*0x10000 + b*0x100 + c
		local s
		if usecaching then
			s = cache[v]
			if not s then
				s = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[extract(v,6,6)], encoder[extract(v,0,6)])
				cache[v] = s
			end
		else
			s = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[extract(v,6,6)], encoder[extract(v,0,6)])
		end
		t[k] = s
		k = k + 1
	end
	if lastn == 2 then
		local a, b = str:byte( n-1, n )
		local v = a*0x10000 + b*0x100
		t[k] = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[extract(v,6,6)], encoder[64])
	elseif lastn == 1 then
		local v = str:byte( n )*0x10000
		t[k] = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[64], encoder[64])
	end
	return concat( t )
end

function base64.decode( b64, decoder, usecaching )
	decoder = decoder or DEFAULT_DECODER
	local pattern = '[^%w%+%/%=]'
	if decoder then
		local s62, s63
		for charcode, b64code in pairs( decoder ) do
			if b64code == 62 then s62 = charcode
			elseif b64code == 63 then s63 = charcode
			end
		end
		pattern = ('[^%%w%%%s%%%s%%=]'):format( char(s62), char(s63) )
	end
	b64 = b64:gsub( pattern, '' )
	local cache = usecaching and {}
	local t, k = {}, 1
	local n = #b64
	local padding = b64:sub(-2) == '==' and 2 or b64:sub(-1) == '=' and 1 or 0
	for i = 1, padding > 0 and n-4 or n, 4 do
		local a, b, c, d = b64:byte( i, i+3 )
		local s
		if usecaching then
			local v0 = a*0x1000000 + b*0x10000 + c*0x100 + d
			s = cache[v0]
			if not s then
				local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
				s = char( extract(v,16,8), extract(v,8,8), extract(v,0,8))
				cache[v0] = s
			end
		else
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			s = char( extract(v,16,8), extract(v,8,8), extract(v,0,8))
		end
		t[k] = s
		k = k + 1
	end
	if padding == 1 then
		local a, b, c = b64:byte( n-3, n-1 )
		local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
		t[k] = char( extract(v,16,8), extract(v,8,8))
	elseif padding == 2 then
		local a, b = b64:byte( n-3, n-2 )
		local v = decoder[a]*0x40000 + decoder[b]*0x1000
		t[k] = char( extract(v,16,8))
	end
	return concat( t )
end



local _Bytecode

_Bytecode = [[]]

-- Actions
-- _Bytecode = [[]]

-- _Bytecode = [[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]]

--

-- [[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]]

_Bytecode = [[]]

--_Bytecode = [[BgMNBXBhaXJzC0dldENoaWxkcmVuDEdldEF0dHJpYnV0ZQV0YWJsZQZpbnNlcnQaX2dldEFuaW1hdGlvbkluQ29sbGVjdGlvbnMORmluZEZpcnN0Q2hpbGQHRGVmYXVsdAR0eXBlBnN0cmluZw1HZXRBbmltYXRpb25zBnNjcmlwdApDb2xsZWN0aW9uAAMSAwAAAAAg/wMAAAAAAACkBAEAAAAAQFIFAQCfBAIEFwQWAA4IFQCpCQAAvAoIaAIAAACfCgIEZAoNAFIRAgC8Dw4SAwAAAJ8PAwIODwgAnjQDBQ4AAABSEAMAUhEOAKQPBgAAFECAnw8DAakJAQBuCvL/AgAAACsJAgBuBOn/AgAAAIIDAgAHAwEEAAAAQAMCAwMDBAMFBAAUQIAACwYBGAAAAQAAAAABBAEAAAABAAAAAAEAAAAAAAAB/QAH8wASDAAAAAAPBQEAAAA3/wUAAAMAAABSBgIADgYFAPsGAABSCAIAvAYGAwAAAACfBgMCUgcDAA4HBQD7BwAAUgkDALwHBwMAAAAAnwcDAlYIBAAOCAMA+wkAAE0ICToBAAAAxQUGBAEAAAC7KAEDUgcBAKQGAwAAACBAnwYCAvAGBwAEAACAUggFAFIJAQC8BgCNBQAAAJ8GBACCBgAAUgYBAMYHAADGCAAAZAYKAFINBQBSDgoAvAsAjQUAAACfCwQCHAwLAIwNAABgDQIADAAAAIILAgBuBvX/AgAAAP8GAAAAAAAAggYCAAYDBwMIAwkEAAAgQAMKAwYAIgsBGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAEAAAAAAAMAAAABAAAAAAEAAAAB/QAHAAAjAAAAAAMAAAECAA+jAAAApAEBAAAAAEBNAAEsAgAAAP8BAAAAAAAAwAIDADACAY0EAAAAwAIFABIAAAAwAgHQBgAAAIIBAgAHAwwEAAAAQAMNBgADBgYBAwsCAAEBAAEYAAEAAAAHAAIAABcAAAAQAQAAAAAC]]

--_Bytecode = [[BgMJBXByaW50BWhlbGxvB3dvcmxkIDEHd29ybGQgMgR0YXNrBHdhaXQGd2FpdGVkC2RpZG4ndCB3YWl0BXdlaXJkAAEDAAABAgAoowAAAKQAAQAAAABAbwECAJ8AAgGpAAAAVgAAAA4ABQCkAQEAAAAAQG8CAwCfAQIBZQAEAKQBAQAAAABAbwIEAJ8BAgGkAQcAABhQgJ8BAQIOAQUApAEBAAAAAEBvAggAnwECAYIAAQCkAQcAABhQgJ8BAQIrAQUApAEBAAAAAEBvAgkAnwECAYIAAQCkAQEAAAAAQG8CCgCfAQIBggABAAsDAQQAAABAAwIDAwMEAwUDBgQAGFCAAwcDCAMJAAEAARgAAQAAAAMCAgEAAAAAAgAAAAMAAAABAAAAAAEAAAABAAAAAAIAAAABAQAAAAAA]]

-- _Bytecode = [[BgMNC0xvY2FsRG9NYXRoDEdsb2JhbERvTWF0aAVMb2NhbAZHbG9iYWwFcHJpbnQFaGVsbG8Hd29ybGQgMQd3b3JsZCAyBHRhc2sEd2FpdAZ3YWl0ZWQLZGlkbid0IHdhaXQFd2VpcmQABQICAAAAAAGCAAMAAAAXAQEYABgAAAAAAwMAAAAAAYIABAAAABsCARgAHAAAAAABAAABAAADowAAAN0AAACCAAAAAAAfAwEYAAEAHwAAAAABAAABAAADowAAAN0AAACCAAAAAAAjBAEYAAEAIwAAAAADAAABAgAyowAAAKQAAQAAAABAbwECAJ8AAgGpAAAAVgAAAA4ABQCkAQEAAAAAQG8CAwCfAQIBZQAEAKQBAQAAAABAbwIEAJ8BAgGkAQcAABhQgJ8BAQIOAQUApAEBAAAAAEBvAggAnwECAWUADQCkAQcAABhQgJ8BAQIrAQUApAEBAAAAAEBvAgkAnwECAWUABACkAQEAAAAAQG8CCgCfAQIBwAELAMACDAAYAgA9DQAAAMACDgAYAgC7DwAAAMACEAAYAgDyEQAAAIIAAQASAwUEAAAAQAMGAwcDCAMJAwoEABhQgAMLAwwDDQYABgEDAgYCAwMGAwMEBAABAgMBAAEYAAEAAAADAgIBAAAAAAIAAAADAAAAAQAAAAABAAAAAQAAAAACAAAAAwQAAAQAAAQAAAIBAAAAAAQ=]]

-- _Bytecode = [[]]

-- _Bytecode = [[]]

-- Rivals: ItemLibrary
-- _Bytecode = [[]]

-- _Bytecode = [[]]

-- _Bytecode = [[BgMmBmlwYWlycwtHZXRDaGlsZHJlbghCYXNlUGFydANJc0EKQ2FuQ29sbGlkZQhDYW5Ub3VjaAhDYW5RdWVyeQhNYXNzbGVzcwVNb2RlbAlBY2Nlc3NvcnkRU2V0UGFydENvbGxpc2lvbnMGQXNzZXRzBk1vZGVscwVVbml0cxVEaXNhYmxlSHVtYW5vaWRTdGF0ZXMRU2V0VW5pdENvbGxpc2lvbnMFX0luaXQFVG9yc28ISHVtYW5vaWQVRmluZEZpcnN0Q2hpbGRPZkNsYXNzE0Rpc3BsYXlEaXN0YW5jZVR5cGURSGVhbHRoRGlzcGxheVR5cGUERW51bRFIdW1hbm9pZFN0YXRlVHlwZQROb25lD1NldFN0YXRlRW5hYmxlZAtQcmltYXJ5UGFydA5GaW5kRmlyc3RDaGlsZAhBbmNob3JlZARnYW1lEVJlcGxpY2F0ZWRTdG9yYWdlCkdldFNlcnZpY2UMR2V0RW51bUl0ZW1zG0h1bWFub2lkRGlzcGxheURpc3RhbmNlVHlwZRlIdW1hbm9pZEhlYWx0aERpc3BsYXlUeXBlCUFsd2F5c09mZghNYXRlcmlhbA1TbW9vdGhQbGFzdGljAAUJAQEAAAAopAEBAAAAAEC8AgBoAgAAAJ8CAgCfAQAEUQEeAG8IAwC8BgX+BAAAAJ8GAwIOBgwAqQYAAKkHAAAwBgXTBQAAADAHBfYGAAAAqQYBAKkHAQAwBgViBwAAADAHBaUIAAAAbwgJALwGBf4EAAAAnwYDAisGBQBvCAoAvAYF/gQAAACfBgMCDgYDAPsGAABSBwUAnwYCAW4B4f8CAACAggABAAsDAQQAAABAAwIDAwMEAwUDBgMHAwgDCQMKAAwLARgAAAAAAAAAAQAAAAABAAAAAAABAAAAAAADAAAAAAAAAAAAAQAA+QAKDQAAAAAJAAIAAAAd+wMAAE0CA4EAAAAATQEC+AEAAABNAAFXAgAAALwBAGgDAAAAnwECBGQBDwBvCAQAvAYF/gUAAACfBgMCDgYKAPsGAQBSCAUAvAYG3wYAAACfBgMB+wYBAFIIBQC8BgY/BwAAAJ8GAwFuAfD/AgAAAIIAAQAIAwwDDQMOAwIDCQMEAw8DEAAZEQEYAAAAAAAAAAIAAAABAAAAAAEAAAAAAQAAAAD9AAYaAAAAAA0CAwAAACNNAgGFAAAAAG8FAQC8AwG4AgAAAJ8DAwIrAwEAggABAPsEAAAwBAMmAwAAAPsEAQAwBAMHBAAAAKQEBgAAAFBA+wUCAJ8EAgRRBAkApAkKAAkgcMDxCAYACQAAAFILCACpDAAAvAkD6AsAAACfCQQBbgT2/wIAAIAOAgMAqQQAADAEAtMMAAAAggABAA0DEgMTAxQDFQMWAwEEAABQQAMXAxgDGQQJIHDAAxoDBQAkDwEYAAABAAAAAgEDAAABAAACAAAAAAEAAAABAAAAAP4ABgEAAAIlAAAAAAYCAQAAABQrAQEAggABAE0CAZsAAAAAbwUBALwDAQMCAAAAnwMDAg4CAwCpBAEAMAQCRQMAAAAOAwMAqQQAADAEA9MEAAAA+wQAAFIFAQCfBAIBggABAAUDGwMSAxwDHQMFADoQARgAAQMAAQAAAAIBAAADAQAAAwAAATsAAAAACAAAAQIAJqMAAACkAAEAAAAAQG8CAgC8AAAWAwAAAJ8AAwKkAQYAABRAgLwBARYHAAAAnwECAqQCCgAJIEDApAMNAAwsQMD/BAMAAAAAAKQFEAAPOEDAwAYRABIABgDABxIAEgAAABIABAAwBwRMEwAAAMAHFAASAAIAEgADABIAAQAwBwTfFQAAAMAHFgASAAYAMAcEPxcAAACCBAIAGAMeBAAAAEADHwMgAxcDGAQAFECAAyEDIgMZBAkgQMADIwMkBAwsQMADJQMmBA84QMAGAAYBAxEGAgMPBgMDEAQAAQIDAQABGAABAAAAAAACAAAAAAEAAQACAAIAAgANAAAAAAsAAAAAABYAAAATAQAAAAAE]]

_Bytecode = [[]]

-- _Bytecode = [[BgM0B0JhcnJpZXIMV2FpdEZvckNoaWxkCkNhbkNvbGxpZGUGc2NyaXB0DUNvbGxpc2lvblBhcnQFQ2xvbmUGQ0ZyYW1lBFNpemUGUGFyZW50DkNyZWF0ZUNvbGxpZGVyCWlzSW5Mb2JieQxHZXRBdHRyaWJ1dGUKX0lzVmlld2luZw9CYXNlQ2FuY2VsRnJhbWUmQ2Fubm90IGVudGVyIGxvYmJ5IHdoaWxlIGluIHZpZXcgbW9kZSEJU2hvd1BvcHVwDElzSW5UdXRvcmlhbC9QbGVhc2UgZmluaXNoIHJlYWRpbmcgdHV0b3JpYWwgYmVmb3JlIGVudGVyaW5nIQ9DbG9zZUFsbFdpbmRvd3MFRW50ZXIKRmlyZVNlcnZlcglDb2xsaXNpb24ORmluZEZpcnN0Q2hpbGQDbmV3EmxvY2FsUGxheWVyRW50ZXJlZAdDb25uZWN0C0hhbmRsZUxvYmJ5CUdldFRhZ2dlZBZHZXRJbnN0YW5jZUFkZGVkU2lnbmFsBV9Jbml0BGdhbWUHUGxheWVycwpHZXRTZXJ2aWNlEVJlcGxpY2F0ZWRTdG9yYWdlDVN0YXJ0ZXJQbGF5ZXIMVHdlZW5TZXJ2aWNlEUNvbGxlY3Rpb25TZXJ2aWNlB3JlcXVpcmUHTW9kdWxlcwhQYWNrYWdlcwRab25lCUludGVyZmFjZQZMb2FkZXINV2luZG93SGFuZGxlcgRNaXNjDFBvcHVwSGFuZGxlcghHYW1lcGxheQ9UdXRvcmlhbEhhbmRsZXIKTmV0d29ya2luZwpMb2JieUV2ZW50BVN0b3J5CUNoYWxsZW5nZQAGBgEAAAAAHm8DAAC8AQDTAQAAAJ8BAwIOARcAqQIBADACAdMCAAAApAMEAAAAMEBNAgPVBQAAALwCAjoGAAAAnwICAk0DAYUHAAAAMAMChQcAAABNBAEvCAAAAG8FCQBDAwQFMAMCLwgAAAAwAAIkCgAAAIICAgDGAgAAggICAAsDAQMCAwMDBAQAADBAAwUDBgMHAwgHAAAAAAAAAAAzM3NAAAAAAAMJABcKARgAAAAAAgEAAAIAAAAAAAABAAAAAQAAAAAAAQACAwAYAAAAAAUBBAAAACdvAwAAvAEAEgEAAACfAQMCDgEBAIIAAQD7AgAATQECQgIAAAAOAQcA+wEBAG8DAwBvBAQAvAEBPgUAAACfAQQAggEAAPsCAABNAQKCBgAAAA4BBwD7AQEAbwMDAG8EBwC8AQE+BQAAAJ8BBACCAQAA+wEAALwBAZ0IAAAAnwECAfsBAgBvAwkA+wQDALwBAWsKAAAAnwEEAYIAAQALAwsDDAMNAw4DDwMQAxEDEgMTAxQDFQAsAAEYAAAAAAABAwAAAAEAAAAAAAABAAAAAQAAAAAAAAMAAAACAAAAAAABLQAAAAAHAQQAAAAzbwMAALwBAAMBAAAAnwEDAisBHgBvBAIAvAIA0wMAAACfAgMCDgIYAKkDAQAwAwLTBAAAAKQEBgAAAFBATQME1QcAAAC8AwM6CAAAAJ8DAgJNBAKFCQAAADAEA4UJAAAATQUCLwoAAABvBgsAQwQFBjAEAy8KAAAAMAADJAwAAABSAQMAZQABAMYBAAD7AwAATQID7w0AAABSAwEAnwICAk0DAqUOAAAA2QUAABICAQASAgIAEgIDABIAAAC8AwPHDwAAAJ8DAwGCAAEAEAMWAxcDAQMCAwMDBAQAAFBAAwUDBgMHAwgHAAAAAAAAAAAzM3NAAAAAAAMJAxgDGQMaAQEoGwEYEQAAAADvAAAAAgEAAAIAAAAAAAABAAAAAQAAAAAAAQACAAMFAAAAAAIAAAAAAAAAAAAPGAAAAAADAQEAAAAE+wEAAFICAACfAQIBggABAAAAQwABGAAAAAFEAAAAAAwAAwAAABz7AAAAxgEAAMYCAABkABUA+wUBAFIHBAC8BQUFAAAAAJ8FAwRkBQMA+woCAFILCQCfCgIBbgX8/wIAAAD7BQEAUgcEALwFBV4BAAAAnwUDAsAHAgASAgIAvAUFxwMAAACfBQMBbgDq/wIAAACCAAEABAMcAx0GAwMaAQM9HgEYAAAAAAEAAAAAAAEAAP8ABAAAAAAAAAAAAPsACT4AAAAAEAAAAQIAYqMAAACkAAEAAAAAQG8CAgC8AAAWAwAAAJ8AAwKkAQEAAAAAQG8DBAC8AQEWAwAAAJ8BAwKkAgEAAAAAQG8EBQC8AgIWAwAAAJ8CAwKkAwEAAAAAQG8FBgC8AwMWAwAAAJ8DAwKkBAEAAAAAQG8GBwC8BAQWAwAAAJ8EAwKkBQkAAACAQE0IAegKAAAATQcI5gsAAABNBgcjDAAAAJ8FAgKkBgkAAACAQE0KAugKAAAATQkKDw0AAABNCAkLDgAAAE0HCJwPAAAAnwYCAqQHCQAAAIBATQwC6AoAAABNCwwPDQAAAE0KCwsOAAAATQkK4RAAAABNCAkNEQAAAJ8HAgKkCAkAAACAQE0LAugKAAAATQoL3RIAAABNCQrSEwAAAJ8IAgJNCQHjFAAAAE0KCZkVAAAA/wsBAAAAAAD/DAAAAgAAAG8NFgBvDhcAxQwNAwEAAADADRgAwA4ZABIABQASAAYAEgAHABIACgDADxoAEgAMABIABAASAA4AMA8LTBsAAACCCwIAHAMfBAAAAEADIAMhAyIDIwMkAyUDJgQAAIBAAycDKAMpAyoDKwMsAy0DLgMvAzADMQMyAzMDNAYABgIGBAMeAwACBAEAARgAAAAAAAAAAQAAAAAAAQAAAAAAAQAAAAAAAQAAAAAAAgAAAAAAAAAAAgAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAQAAAAAAAAAAAgABAAIAAgABAQAAAxEAAAAAFQAAAAAADAEAAAAABQ==]]

-- _Bytecode = [[]]

-- _Bytecode = [[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]]

_Bytecode = [[BgMUBkNGcmFtZQhpZGVudGl0eQZ0eXBlb2YISW5zdGFuY2UOR2V0RGVzY2VuZGFudHMIQmFzZVBhcnQDSXNBDXRvT2JqZWN0U3BhY2UEU2l6ZQFYAVkBWg1HZXRDb21wb25lbnRzBG1hdGgDYWJzB1ZlY3RvcjMDbmV3CFBvc2l0aW9uEVBvaW50VG9Xb3JsZFNwYWNlDkdldEJvdW5kaW5nQm94AAIpAgAAAAC2AVICAQArAgIApAICAAAEAIC7LAADUgUAAKQEBAAAADBAnwQCAvAEBQAFAACAvAMARwYAAACfAwICKwMBAFIDAABvBAcAbwUHAG8GBwBvBwgAbwgIAG8JCABSCgMAxgsAAMYMAABkCn4AbxEJALwPDv4KAAAAnw8DAg4PeQBNEQ6FAAAAALwPAmYLAAAAnw8DAk0QDi8MAAAATREQeQ0AAABNEhB4DgAAAE0TEHsPAAAAvBQPQxAAAACfFAINuwIXA1IlFwCkJBQAAEwggZ8kAgIJIyQRuwIYA1ImGACkJRQAAEwggZ8lAgIJJCUSQyIjJLsCGQNSJRkApCQUAABMIIGfJAICCSMkE0MhIiM+ICERuwIaA1ImGgCkJRQAAEwggZ8lAgIJJCURuwIbA1InGwCkJhQAAEwggZ8mAgIJJSYSQyMkJbsCHANSJhwApCUUAABMIIGfJQICCSQlE0MiIyQ+ISIRuwIdA1InHQCkJhQAAEwggZ8mAgIJJSYRuwIeA1IoHgCkJxQAAEwggZ8nAgIJJicSQyQlJrsCHwNSJx8ApCYUAABMIIGfJgICCSUmE0MjJCU+IiMRJiQUIGAkAwAEAAAAJiMUICsjAQBSIwQAUgQjACYkFSFgJAMABQAAACYjFSErIwEAUiMFAFIFIwAmJBYiYCQDAAYAAAAmIxYiKyMBAFIjBgBSBiMAQyQUIGAHAwAkAAAAQyMUICsjAQBSIwcAUgcjAEMkFSFgCAMAJAAAAEMjFSErIwEAUiMIAFIIIwBDJBYiYAkDACQAAABDIxYiKyMBAFIjCQBSCSMAbgqB/wIAAAA0NgQGBQYAAFINBABSDgUAUg8GAKQMFwAAWFCBnwwEAlIKDAA0NgcGCAkAAFIMBwBSDQgAUg4JAKQLFwAAWFCBnwsEAiYMCwpNDwI7GAAAACYOAg9DEgsKPhESEbwPAjgZAAAAnw8DAkMNDg+CDAMAGgMBAwIEAAQAgAMDBAAAMEADBAMFAgAAAAAAAPB/AgAAAAAAAPD/AwYDBwMIAwkDCgMLAwwDDQIAAAAAAAAAQAMOAw8EAEwggQMQAxEEAFhQgQMSAxMAARQBGAAAAAABAAAAAAAAAAAAAAACAAABAAACAAAAAQAAAAABAAAAAAEAAQAAAAAAAgAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAEAAAAAAAABAAAAAAAAAgAAAAAAAAEAAAAAAAABAAAAAAAA7gAWAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAgAAAAABAAABAgADowAAAMAAAACCAAIAAQYAAQABAAEYAAAhAQAAAAAB]]



local function len(Table, limit)
	local len = 0
	
	--[[
	for key, value in pairs(Table) do
		len = len + 1
		
		if limit == len then break end
	end
	--]]

	len = Table[0] ~= nil and #Table + 1 or 0

	return len
end



local function insert(Table, ...)
	local args = {...}
	local index = nil

	if args[2] and #args >= 2 then
		index = args[1]

		if not index then
			print("insert index not found", debug.traceback())
		end

		Table[index] = args[2]
	else
		index = (#Table == 0 and Table[0] == nil and -1 or #Table) + 1

		if not index then
			print("insert index not found", debug.traceback())
		end

		Table[index] = args[1]
	end
	
	if not getmetatable(Table) and false then
		setmetatable(Table, {
			__len = function(self)
				return rawlen(self) == 0 and len(self) > 0 and len(self) or rawlen(self) + 1
			end;
		})
	end
	
	return index, ...
end

local function find(Table, value)
	for i, v in pairs(Table) do
		if v == value then
			return i, v
		end
	end
end



local __recurse; __recurse = function(tbl, func, tbls)
    if type(tbl) == "table" then
        tbls = tbls or {}
        for key, value in pairs(tbl) do
            func(key, value)

            if not tbls[value] then
                tbls[value] = true

				__recurse(value, func)
            end
        end
    end
end



local LuaUOpcode = [[
enum LuauOpcode
{
    // NOP: noop
    LOP_NOP,

    // BREAK: debugger break
    LOP_BREAK,

    // LOADNIL: sets register to nil
    // A: target register
    LOP_LOADNIL,

    // LOADB: sets register to boolean and jumps to a given short offset (used to compile comparison results into a boolean)
    // A: target register
    // B: value (0/1)
    // C: jump offset
    LOP_LOADB,

    // LOADN: sets register to a number literal
    // A: target register
    // D: value (-32768..32767)
    LOP_LOADN,

    // LOADK: sets register to an entry from the constant table from the proto (number/vector/string)
    // A: target register
    // D: constant table index (0..32767)
    LOP_LOADK,

    // MOVE: move (copy) value from one register to another
    // A: target register
    // B: source register
    LOP_MOVE,

    // GETGLOBAL: load value from global table using constant string as a key
    // A: target register
    // C: predicted slot index (based on hash)
    // AUX: constant table index
    LOP_GETGLOBAL,

    // SETGLOBAL: set value in global table using constant string as a key
    // A: source register
    // C: predicted slot index (based on hash)
    // AUX: constant table index
    LOP_SETGLOBAL,

    // GETUPVAL: load upvalue from the upvalue table for the current function
    // A: target register
    // B: upvalue index
    LOP_GETUPVAL,

    // SETUPVAL: store value into the upvalue table for the current function
    // A: target register
    // B: upvalue index
    LOP_SETUPVAL,

    // CLOSEUPVALS: close (migrate to heap) all upvalues that were captured for registers >= target
    // A: target register
    LOP_CLOSEUPVALS,

    // GETIMPORT: load imported global table global from the constant table
    // A: target register
    // D: constant table index (0..32767); we assume that imports are loaded into the constant table
    // AUX: 3 10-bit indices of constant strings that, combined, constitute an import path; length of the path is set by the top 2 bits (1,2,3)
    LOP_GETIMPORT,

    // GETTABLE: load value from table into target register using key from register
    // A: target register
    // B: table register
    // C: index register
    LOP_GETTABLE,

    // SETTABLE: store source register into table using key from register
    // A: source register
    // B: table register
    // C: index register
    LOP_SETTABLE,

    // GETTABLEKS: load value from table into target register using constant string as a key
    // A: target register
    // B: table register
    // C: predicted slot index (based on hash)
    // AUX: constant table index
    LOP_GETTABLEKS,

    // SETTABLEKS: store source register into table using constant string as a key
    // A: source register
    // B: table register
    // C: predicted slot index (based on hash)
    // AUX: constant table index
    LOP_SETTABLEKS,

    // GETTABLEN: load value from table into target register using small integer index as a key
    // A: target register
    // B: table register
    // C: index-1 (index is 1..256)
    LOP_GETTABLEN,

    // SETTABLEN: store source register into table using small integer index as a key
    // A: source register
    // B: table register
    // C: index-1 (index is 1..256)
    LOP_SETTABLEN,

    // NEWCLOSURE: create closure from a child proto; followed by a CAPTURE instruction for each upvalue
    // A: target register
    // D: child proto index (0..32767)
    LOP_NEWCLOSURE,

    // NAMECALL: prepare to call specified method by name by loading function from source register using constant index into target register and copying source register into target register + 1
    // A: target register
    // B: source register
    // C: predicted slot index (based on hash)
    // AUX: constant table index
    // Note that this instruction must be followed directly by CALL; it prepares the arguments
    // This instruction is roughly equivalent to GETTABLEKS + MOVE pair, but we need a special instruction to support custom __namecall metamethod
    LOP_NAMECALL,

    // CALL: call specified function
    // A: register where the function object lives, followed by arguments; results are placed starting from the same register
    // B: argument count + 1, or 0 to preserve all arguments up to top (MULTRET)
    // C: result count + 1, or 0 to preserve all values and adjust top (MULTRET)
    LOP_CALL,

    // RETURN: returns specified values from the function
    // A: register where the returned values start
    // B: number of returned values + 1, or 0 to return all values up to top (MULTRET)
    LOP_RETURN,

    // JUMP: jumps to target offset
    // D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
    LOP_JUMP,

    // JUMPBACK: jumps to target offset; this is equivalent to JUMP but is used as a safepoint to be able to interrupt while/repeat loops
    // D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
    LOP_JUMPBACK,

    // JUMPIF: jumps to target offset if register is not nil/false
    // A: source register
    // D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
    LOP_JUMPIF,

    // JUMPIFNOT: jumps to target offset if register is nil/false
    // A: source register
    // D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
    LOP_JUMPIFNOT,

    // JUMPIFEQ, JUMPIFLE, JUMPIFLT, JUMPIFNOTEQ, JUMPIFNOTLE, JUMPIFNOTLT: jumps to target offset if the comparison is true (or false, for NOT variants)
    // A: source register 1
    // D: jump offset (-32768..32767; 1 means "next instruction" aka "don't jump")
    // AUX: source register 2
    LOP_JUMPIFEQ,
    LOP_JUMPIFLE,
    LOP_JUMPIFLT,
    LOP_JUMPIFNOTEQ,
    LOP_JUMPIFNOTLE,
    LOP_JUMPIFNOTLT,

    // ADD, SUB, MUL, DIV, MOD, POW: compute arithmetic operation between two source registers and put the result into target register
    // A: target register
    // B: source register 1
    // C: source register 2
    LOP_ADD,
    LOP_SUB,
    LOP_MUL,
    LOP_DIV,
    LOP_MOD,
    LOP_POW,

    // ADDK, SUBK, MULK, DIVK, MODK, POWK: compute arithmetic operation between the source register and a constant and put the result into target register
    // A: target register
    // B: source register
    // C: constant table index (0..255); must refer to a number
    LOP_ADDK,
    LOP_SUBK,
    LOP_MULK,
    LOP_DIVK,
    LOP_MODK,
    LOP_POWK,

    // AND, OR: perform `and` or `or` operation (selecting first or second register based on whether the first one is truthy) and put the result into target register
    // A: target register
    // B: source register 1
    // C: source register 2
    LOP_AND,
    LOP_OR,

    // ANDK, ORK: perform `and` or `or` operation (selecting source register or constant based on whether the source register is truthy) and put the result into target register
    // A: target register
    // B: source register
    // C: constant table index (0..255)
    LOP_ANDK,
    LOP_ORK,

    // CONCAT: concatenate all strings between B and C (inclusive) and put the result into A
    // A: target register
    // B: source register start
    // C: source register end
    LOP_CONCAT,

    // NOT, MINUS, LENGTH: compute unary operation for source register and put the result into target register
    // A: target register
    // B: source register
    LOP_NOT,
    LOP_MINUS,
    LOP_LENGTH,

    // NEWTABLE: create table in target register
    // A: target register
    // B: table size, stored as 0 for v=0 and ceil(log2(v))+1 for v!=0
    // AUX: array size
    LOP_NEWTABLE,

    // DUPTABLE: duplicate table using the constant table template to target register
    // A: target register
    // D: constant table index (0..32767)
    LOP_DUPTABLE,

    // SETLIST: set a list of values to table in target register
    // A: target register
    // B: source register start
    // C: value count + 1, or 0 to use all values up to top (MULTRET)
    // AUX: table index to start from
    LOP_SETLIST,

    // FORNPREP: prepare a numeric for loop, jump over the loop if first iteration doesn't need to run
    // A: target register; numeric for loops assume a register layout [limit, step, index, variable]
    // D: jump offset (-32768..32767)
    // limit/step are immutable, index isn't visible to user code since it's copied into variable
    LOP_FORNPREP,

    // FORNLOOP: adjust loop variables for one iteration, jump back to the loop header if loop needs to continue
    // A: target register; see FORNPREP for register layout
    // D: jump offset (-32768..32767)
    LOP_FORNLOOP,

    // FORGLOOP: adjust loop variables for one iteration of a generic for loop, jump back to the loop header if loop needs to continue
    // A: target register; generic for loops assume a register layout [generator, state, index, variables...]
    // D: jump offset (-32768..32767)
    // AUX: variable count (1..255) in the low 8 bits, high bit indicates whether to use ipairs-style traversal in the fast path
    // loop variables are adjusted by calling generator(state, index) and expecting it to return a tuple that's copied to the user variables
    // the first variable is then copied into index; generator/state are immutable, index isn't visible to user code
    LOP_FORGLOOP,

    // FORGPREP_INEXT: prepare FORGLOOP with 2 output variables (no AUX encoding), assuming generator is luaB_inext, and jump to FORGLOOP
    // A: target register (see FORGLOOP for register layout)
    LOP_FORGPREP_INEXT,

    // FASTCALL3: perform a fast call of a built-in function using 3 register arguments
    // A: builtin function id (see LuauBuiltinFunction)
    // B: source argument register
    // C: jump offset to get to following CALL
    // AUX: source register 2 in least-significant byte
    // AUX: source register 3 in second least-significant byte
    LOP_FASTCALL3,

    // FORGPREP_NEXT: prepare FORGLOOP with 2 output variables (no AUX encoding), assuming generator is luaB_next, and jump to FORGLOOP
    // A: target register (see FORGLOOP for register layout)
    LOP_FORGPREP_NEXT,

    // NATIVECALL: start executing new function in native code
    // this is a pseudo-instruction that is never emitted by bytecode compiler, but can be constructed at runtime to accelerate native code dispatch
    LOP_NATIVECALL,

    // GETVARARGS: copy variables into the target register from vararg storage for current function
    // A: target register
    // B: variable count + 1, or 0 to copy all variables and adjust top (MULTRET)
    LOP_GETVARARGS,

    // DUPCLOSURE: create closure from a pre-created function object (reusing it unless environments diverge)
    // A: target register
    // D: constant table index (0..32767)
    LOP_DUPCLOSURE,

    // PREPVARARGS: prepare stack for variadic functions so that GETVARARGS works correctly
    // A: number of fixed arguments
    LOP_PREPVARARGS,

    // LOADKX: sets register to an entry from the constant table from the proto (number/string)
    // A: target register
    // AUX: constant table index
    LOP_LOADKX,

    // JUMPX: jumps to the target offset; like JUMPBACK, supports interruption
    // E: jump offset (-2^23..2^23; 0 means "next instruction" aka "don't jump")
    LOP_JUMPX,

    // FASTCALL: perform a fast call of a built-in function
    // A: builtin function id (see LuauBuiltinFunction)
    // C: jump offset to get to following CALL
    // FASTCALL is followed by one of (GETIMPORT, MOVE, GETUPVAL) instructions and by CALL instruction
    // This is necessary so that if FASTCALL can't perform the call inline, it can continue normal execution
    // If FASTCALL *can* perform the call, it jumps over the instructions *and* over the next CALL
    // Note that FASTCALL will read the actual call arguments, such as argument/result registers and counts, from the CALL instruction
    LOP_FASTCALL,

    // COVERAGE: update coverage information stored in the instruction
    // E: hit count for the instruction (0..2^23-1)
    // The hit count is incremented by VM every time the instruction is executed, and saturates at 2^23-1
    LOP_COVERAGE,

    // CAPTURE: capture a local or an upvalue as an upvalue into a newly created closure; only valid after NEWCLOSURE
    // A: capture type, see LuauCaptureType
    // B: source register (for VAL/REF) or upvalue index (for UPVAL/UPREF)
    LOP_CAPTURE,

    // SUBRK, DIVRK: compute arithmetic operation between the constant and a source register and put the result into target register
    // A: target register
    // B: constant table index (0..255); must refer to a number
    // C: source register
    LOP_SUBRK,
    LOP_DIVRK,

    // FASTCALL1: perform a fast call of a built-in function using 1 register argument
    // A: builtin function id (see LuauBuiltinFunction)
    // B: source argument register
    // C: jump offset to get to following CALL
    LOP_FASTCALL1,

    // FASTCALL2: perform a fast call of a built-in function using 2 register arguments
    // A: builtin function id (see LuauBuiltinFunction)
    // B: source argument register
    // C: jump offset to get to following CALL
    // AUX: source register 2 in least-significant byte
    LOP_FASTCALL2,

    // FASTCALL2K: perform a fast call of a built-in function using 1 register argument and 1 constant argument
    // A: builtin function id (see LuauBuiltinFunction)
    // B: source argument register
    // C: jump offset to get to following CALL
    // AUX: constant index
    LOP_FASTCALL2K,

    // FORGPREP: prepare loop variables for a generic for loop, jump to the loop backedge unconditionally
    // A: target register; generic for loops assume a register layout [generator, state, index, variables...]
    // D: jump offset (-32768..32767)
    LOP_FORGPREP,

    // JUMPXEQKNIL, JUMPXEQKB: jumps to target offset if the comparison with constant is true (or false, see AUX)
    // A: source register 1
    // D: jump offset (-32768..32767; 1 means "next instruction" aka "don't jump")
    // AUX: constant value (for boolean) in low bit, NOT flag (that flips comparison result) in high bit
    LOP_JUMPXEQKNIL,
    LOP_JUMPXEQKB,

    // JUMPXEQKN, JUMPXEQKS: jumps to target offset if the comparison with constant is true (or false, see AUX)
    // A: source register 1
    // D: jump offset (-32768..32767; 1 means "next instruction" aka "don't jump")
    // AUX: constant table index in low 24 bits, NOT flag (that flips comparison result) in high bit
    LOP_JUMPXEQKN,
    LOP_JUMPXEQKS,

    // IDIV: compute floor division between two source registers and put the result into target register
    // A: target register
    // B: source register 1
    // C: source register 2
    LOP_IDIV,

    // IDIVK compute floor division between the source register and a constant and put the result into target register
    // A: target register
    // B: source register
    // C: constant table index (0..255)
    LOP_IDIVK,

    // Enum entry for number of opcodes, not a valid opcode by itself!
    LOP__COUNT
};
]]

--[[
K = Constant
S = String
N = Number
B = Boolean
R = Reverse
I = Self?
X = <void>
--]]

local codes = {
	A = {};
	B = {};
	C = {};
	D = {};
	E = {};
	F = {};
	Bx = {};
	sBx = {};
	sAx = {};
	AUX = {};
}

local function searchCode(query)
	local regex = query
	
	if query == "Bx" then
		regex = "D" .. ":%s"
	elseif query == "sBx" then
		regex = "D" .. ":%sjump"
	elseif query == "sAx" then
		regex = "E" .. ":%s"
	else
		regex = query .. ":%s"
	end
	
	for code in string.gmatch(LuaUOpcode, "//%s" .. regex .. ".-(LOP_.-)[,%s]//") do
		for opcode in string.gmatch(code, "LOP[_]+(.-)[,%s]") do
			codes[query][opcode] = true
		end
	end
end

searchCode("A"); searchCode("B"); searchCode("C"); searchCode("D" or "Bx"); searchCode("E" or "sBx"); searchCode("F" or "sAx"); searchCode("AUX")

local enum = {
	KeywordType = {
        Nil = 0;
        False = 1;
        While = 2;
        Function = 3;
        Table = 5;
        True = 7;
		And = 8;
		Break = 9;
		Else = 10;
		ElseIf = 11;
		End = 12;
		If = 13;
		In = 14;
		Local = 15;
		Not = 16;
		Or = 13;
		Repeat = 14;
		Return = 15;
		Then = 16;
		Until = 17;
		Do = 18;

		Upvalue = 19;
		Reference = 20;
		Value = 21;

		Variable = 22;
		Number = 23;
		Boolean = 24;
		Vararg = 25;
    };
	ConstantType = {
        Nil = 0;
        Bool = 1;
        Number = 2;
        String = 3;
        Import = 4;
        Table = 5;
        Closure = 6;
        Vector = 7;
    };
	BytecodeTypes = {
		Nil = 0;
		Boolean = 1;
		Number = 2;
		String = 3;
		Table = 4;
		Function = 5;
		Thread = 6;
		UserData = 7;
		Vector = 8;
	};
	OpCodeEncoding = {
		None = 0;
		Client = 1;
		Studio = 2;
	};
	OpMode = {
		iABC = 0;
		iAD = 1;
		iE = 2;
		AUX = 3;
		None = 4;
	};
	OpCode = {

	};
	CaptureType = {
		Value = 0;
		Reference = 1;
		Upvalue = 2;
	};
	DeclarationType = {
		Local = 0,
		Closure = 1,
		Upvalue = 2,
	};
	BinaryOperation = {
		Add = 0;
		Subtract = 1;
		Mulitply = 2;
		Divide = 3;
		Modulus = 4;
		Power = 5;
		Concat = 6;
		And = 7;
		Or = 8;
		CompareNe = 9;
		CompareEq = 10;
		CompareGe = 11;
		CompareGt = 12;
		CompareLe = 13;
		CompareLt = 14;
		FloorDivide = 15;
	};
	Condition = {
		Not = 0;
		If = 1;
		Len = 2;
		Min = 3;
	};
	BuiltinFunction = {
		NONE = 0;
	
		-- assert()
		ASSERT = 1;
	
		-- math.
		MATH_ABS = 2;
		MATH_ACOS = 3;
		MATH_ASIN = 4;
		MATH_ATAN2 = 5;
		MATH_ATAN = 6;
		MATH_CEIL = 7;
		MATH_COSH = 8;
		MATH_COS = 9;
		MATH_DEG = 10;
		MATH_EXP = 11;
		MATH_FLOOR = 12;
		MATH_FMOD = 13;
		MATH_FREXP = 14;
		MATH_LDEXP = 15;
		MATH_LOG10 = 16;
		MATH_LOG = 17;
		MATH_MAX = 18;
		MATH_MIN = 19;
		MATH_MODF = 20;
		MATH_POW = 21;
		MATH_RAD = 22;
		MATH_SINH = 23;
		MATH_SIN = 24;
		MATH_SQRT = 25;
		MATH_TANH = 26;
		MATH_TAN = 27;
	
		-- bit32.
		BIT32_ARSHIFT = 28;
		BIT32_BAND = 29;
		BIT32_BNOT = 30;
		BIT32_BOR = 31;
		BIT32_BXOR = 32;
		BIT32_BTEST = 33;
		BIT32_EXTRACT = 34;
		BIT32_LROTATE = 35;
		BIT32_LSHIFT = 36;
		BIT32_REPLACE = 37;
		BIT32_RROTATE = 38;
		BIT32_RSHIFT = 39;
	
		-- type()
		TYPE = 40;
	
		-- string.
		STRING_BYTE = 41;
		STRING_CHAR = 42;
		STRING_LEN = 43;
	
		-- typeof()
		TYPEOF = 44;
	
		-- string.
		STRING_SUB = 45;
	
		-- math.
		MATH_CLAMP = 46;
		MATH_SIGN = 47;
		MATH_ROUND = 48;
	
		-- raw*
		RAWSET = 49;
		RAWGET = 50;
		RAWEQUAL = 51;
	
		-- table.
		TABLE_INSERT = 52;
		TABLE_UNPACK = 53;
	
		-- vector ctor
		VECTOR = 54;
	
		-- bit32.count
		BIT32_COUNTLZ = 55;
		BIT32_COUNTRZ = 56;
	
		-- select(_; ...)
		SELECT_VARARG = 57;
	
		-- rawlen
		RAWLEN = 58;
	
		-- bit32.extract(_; k; k)
		BIT32_EXTRACTK = 59;
	
		-- get/setmetatable
		GETMETATABLE = 60;
		SETMETATABLE = 61;
	
		-- tonumber/tostring
		TONUMBER = 62;
		TOSTRING = 63;
	
		-- bit32.byteswap(n)
		BIT32_BYTESWAP = 64;
	
		-- buffer.
		BUFFER_READI8 = 65;
		BUFFER_READU8 = 66;
		BUFFER_WRITEU8 = 67;
		BUFFER_READI16 = 68;
		BUFFER_READU16 = 69;
		BUFFER_WRITEU16 = 70;
		BUFFER_READI32 = 71;
		BUFFER_READU32 = 72;
		BUFFER_WRITEU32 = 73;
		BUFFER_READF32 = 74;
		BUFFER_WRITEF32 = 75;
		BUFFER_READF64 = 76;
		BUFFER_WRITEF64 = 77;
	};
}

local enumreverse = {}

for i, v in pairs(enum) do
	enumreverse[i] = {}

	for i2, v2 in pairs(v) do
		enumreverse[i][v2] = i2
	end
end

local opcodes = {}
local iteration = 0
for opcode in string.gmatch(LuaUOpcode, "LOP[_]+(.-)[,%s]") do
	local tbl = {
		["name"] = opcode;
		["case"] = iteration;
		["number"] = (256+-29*iteration) % 256;
		["aux"] = false;
	}

	local buildCode
	local Mode
	for index, value in pairs(codes) do
		if (value[opcode]) then
			if (index == "AUX") then
				tbl.aux = true
			else
				if not Mode then Mode = "i" end
				Mode = Mode .. index
			end
		end
	end

	Mode = Mode and Mode .. " " or Mode

	if Mode then
		Mode = Mode:gsub("BA", "AB")
		Mode = Mode:gsub("CA", "AC")
		Mode = Mode:gsub("CB", "BC")
		Mode = Mode:gsub("DA", "AD")
		Mode = Mode:gsub("CAB", "ABC")
		Mode = Mode:gsub("BAC", "ABC")

		Mode = Mode:gsub("AB ", "ABC")
		Mode = Mode:gsub("AC ", "ABC")
		Mode = Mode:gsub("iD ", "iAD")
		Mode = Mode:gsub("iA ", "iABC")

		Mode = Mode:gsub(" ", "")
	end

	tbl.type = Mode and Mode or "none"
	tbl.mode = Mode and enum.OpMode[Mode] or "none"

	enum.OpCode[opcode] = tbl.number

	enum.OpCode["EndStatement"] = -1

	insert(opcodes, tbl)
	iteration = iteration + 1
end



local LuaU = {};
LuaU.SIZE_A = 8
LuaU.SIZE_C = 8
LuaU.SIZE_B = 8
LuaU.SIZE_Bx = (LuaU.SIZE_C + LuaU.SIZE_B)
LuaU.SIZE_OP = 8

LuaU.INSN_A_SHIFT = 8
LuaU.INSN_B_SHIFT = 16
LuaU.INSN_C_SHIFT = 24
LuaU.INSN_Bx_SHIFT = 16
LuaU.INSN_sBx_SHIFT = 8

LuaU.POS_OP = 0
LuaU.POS_A = (LuaU.POS_OP + LuaU.SIZE_OP)
LuaU.POS_B = (LuaU.POS_A + LuaU.SIZE_A)
LuaU.POS_C = (LuaU.POS_B + LuaU.SIZE_B)
LuaU.POS_Bx = LuaU.POS_B

LuaU.MAXARG_A = (bit32.lshift(1, LuaU.SIZE_A) - 1)
LuaU.MAXARG_B = (bit32.lshift(1, LuaU.SIZE_B) - 1)
LuaU.MAXARG_C = (bit32.lshift(1, LuaU.SIZE_C) - 1)
LuaU.MAXARG_Bx = (bit32.lshift(1, LuaU.SIZE_Bx) - 1)
LuaU.MAXARG_sBx = bit32.rshift(LuaU.MAXARG_Bx, 1)

LuaU.BITRK = bit32.lshift(1, (LuaU.SIZE_B - 1))
LuaU.MAXINDEXRK = (LuaU.BITRK - 1)
LuaU.ISK = function(x) return bit32.band(x, LuaU.BITRK) end
LuaU.INDEXK = function(x) return bit32.band(x, bit32.bnot(LuaU.BITRK)) end
LuaU.RKASK = function(x) return bit32.bor(x, LuaU.BITRK) end
LuaU.MASK1 = function(n,p) return bit32.lshift(bit32.bnot(bit32.lshift(bit32.bnot(0), n)), p) end
LuaU.MASK0 = function(n,p) return bit32.bnot(LuaU.MASK1(n, p)) end

LuaU.GETARG_A = function(i) return bit32.band(bit32.rshift(i, LuaU.POS_A), LuaU.MASK1(LuaU.SIZE_A, 0)) end
LuaU.GETARG_B = function(i) return bit32.band(bit32.rshift(i, LuaU.POS_B), LuaU.MASK1(LuaU.SIZE_B, 0)) end
LuaU.GETARG_C = function(i) return bit32.band(bit32.rshift(i, LuaU.POS_C), LuaU.MASK1(LuaU.SIZE_C, 0)) end
LuaU.GETARG_Bx = function(i) return bit32.band(bit32.rshift(i, LuaU.POS_Bx), LuaU.MASK1(LuaU.SIZE_Bx, 0)) end
LuaU.GETARG_sBx = function(i) local Bx = LuaU.GETARG_Bx(i) local sBx = Bx + 1; if Bx > 0x7FFF and Bx <= 0xFFFF then sBx = -(0xFFFF - Bx); sBx = sBx - 1; end return sBx end
LuaU.GETARG_sAx = function(i) return bit32.rshift(i, 8) end

LuaU.INSN_A = function(i) return bit32.band(bit32.rshift(i, LuaU.INSN_A_SHIFT), 0xFF) end
LuaU.INSN_B = function(i) return bit32.band(bit32.rshift(i, LuaU.INSN_B_SHIFT), 0xFF) end
LuaU.INSN_C = function(i) return bit32.band(bit32.rshift(i, LuaU.INSN_C_SHIFT), 0xFF) end
LuaU.INSN_Bx = function(i) return bit32.arshift(i, LuaU.INSN_Bx_SHIFT) end
LuaU.INSN_sBx = function(i) return bit32.arshift(i, LuaU.INSN_sBx_SHIFT) end

LuaU.GET_OPCODE = function(i) return bit32.band(bit32.rshift(i, LuaU.POS_OP), LuaU.MASK1(LuaU.SIZE_OP, 0)) end

local function getOpCode(op)
	for _,v in pairs(opcodes) do 
		if type(op) == "string" and v.name == op then 
			return tonumber(v.number);
		elseif type(op) == "number" and v.number == op then
			return tostring(v.name)
		end
	end
end

local Constant = {}
do
    
end

local OpProperties = {}
do
	OpProperties.__index = OpProperties

	function OpProperties:new(name, code, mode, type, hasAux)
		self = setmetatable({}, self)
		self.Code = code
		self.Mode = mode
		self.Type = type
		self.Name = name
		self.HasAux = hasAux or false
		
		return self
	end

	function OpProperties:Mapper()
		local OpCodes = {}
	
		for key, value in pairs(opcodes) do
			local Op = OpProperties:new(value.name, value.number, value.mode, value.type, value.aux)
			
			OpCodes[value.number] = Op
			
			--[[
			{
				Code = value.number;
				Mode = value.mode;
				Type = value.type;
				HasAux = value.aux;
			}
			--]]
		end
	
		return OpCodes
	end
	
	OpProperties.Map = OpProperties:Mapper()
end

local Instruction = {}
do
	Instruction.__index = Instruction

	function Instruction:new(value, encoding)
		self = setmetatable({}, self)
		self._value = value
		self._encoding = encoding or enum.OpCodeEncoding.None
		self._stated = false

		return self
	end

	function Instruction:GetProperties()
		local properties = OpProperties.Map[self:Code()]

		if properties then
			--self._properties = properties
			
			return properties
		else
			-- print("unhandled operation code (" .. self:Code() .. ")", debug.traceback())
			
			return OpProperties.Map[0]
		end
	end

	function Instruction:Value()
		return self._value
	end

	function Instruction:A()
		return bit32.band(bit32.rshift(self._value, 8), 0xFF)
	end

	function Instruction:B()
		return bit32.band(bit32.rshift(self._value, 16), 0xFF)
	end

	function Instruction:C()
		return bit32.band(bit32.rshift(self._value, 24), 0xFF)
	end

	function Instruction:D()
		return bit32.arshift(self._value, 16)
	end

	function Instruction:E()
		return bit32.arshift(self._value, 8)
	end
	
	function Instruction:Aux()
		return self:Value() or bit32.band(bit32.rshift(self._value, 8), 0xFF) - 1
	end
	
	function Instruction:Code()
		local rawCode = bit32.band(self:Value(), 0xFF)

		if self._encoding == enum.OpCodeEncoding.Client then
			rawCode = rawCode * 203
		end
		
		--rawCode = LuaU.GET_OPCODE(self:Value())
		
		return rawCode
	end
end

local Constant = {}
do
	Constant.__index = Constant

	function Constant:new(value, type, enum)
		self = setmetatable({}, self)
		self._value = value
		self._type = type
		self._enum = enum

		return self
	end
	
	function Constant:Value()
		return self._value
	end
	
	function Constant:Type()
		return self._type
	end

	function Constant:Enum()
		return self._enum
	end
end

local LineInfo = {}
do
	LineInfo.__index = LineInfo

	function LineInfo:new()
		self = setmetatable({}, self)
		self.LineGapLog = 0
		self.LineInfoList = {}
		self.AbsLineInfoList = {}

		return self
	end
end

local DebugInfo = {}
do
	DebugInfo.__index = DebugInfo

	function DebugInfo:new()
		local self = setmetatable({}, self)
		self.Locals = {}
		self.Upvalues = {}

		return self
	end

	function DebugInfo:ToString()
		return "DebugInfo enabled."
	end
end

local LocalVariable = {}
do
	LocalVariable.__index = LocalVariable

	function LocalVariable:new(name, startPc, endPc, slot)
		local self = setmetatable({}, self)
		self.Name = name
		self.StartPc = startPc
		self.EndPc = endPc
		self.Slot = slot

		return self
	end
end

local BinaryExpression = {}
do
	BinaryExpression.__index = BinaryExpression

	function BinaryExpression:new(operation)
		self = setmetatable({}, self)
		self.Operation = operation

		return self
	end
	
	function BinaryExpression:Value()
		return "%s%i " .. self.operation .. " %s%i"
	end

	function BinaryExpression:GetBinaryOperationPrecedence(operation)
		if operation == enum.BinaryOperation.And or
		   operation == enum.BinaryOperation.Or then
			return 1
		elseif operation == enum.BinaryOperation.CompareNe or
			   operation == enum.BinaryOperation.CompareEq or
			   operation == enum.BinaryOperation.CompareGe or
			   operation == enum.BinaryOperation.CompareGt or
			   operation == enum.BinaryOperation.CompareLe or
			   operation == enum.BinaryOperation.CompareLt then
			return 2
		elseif operation == enum.BinaryOperation.Add or
			   operation == enum.BinaryOperation.Subtract then
			return 3
		elseif operation == enum.BinaryOperation.Multiply or
			   operation == enum.BinaryOperation.Divide or
			   operation == enum.BinaryOperation.Modulus then
			return 4
		elseif operation == enum.BinaryOperation.Concat then
			return 5
		elseif operation == enum.BinaryOperation.Power then
			return 6
		else
			return 0
		end
	end
	
	function BinaryExpression:BinaryOperationChar(operation)
		if operation == enum.BinaryOperation.Add then
			return "+"
		elseif operation == enum.BinaryOperation.Subtract then
			return "-"
		elseif operation == enum.BinaryOperation.Multiply then
			return "*"
		elseif operation == enum.BinaryOperation.Divide then
			return "/"
		elseif operation == enum.BinaryOperation.FloorDivide then
			return "//"
		elseif operation == enum.BinaryOperation.Modulus then
			return "%"
		elseif operation == enum.BinaryOperation.Power then
			return "^"
		elseif operation == enum.BinaryOperation.Concat then
			return "..."
		elseif operation == enum.BinaryOperation.CompareNe then
			return "~="
		elseif operation == enum.BinaryOperation.CompareEq then
			return "=="
		elseif operation == enum.BinaryOperation.CompareGe then
			return ">="
		elseif operation == enum.BinaryOperation.CompareGt then
			return ">"
		elseif operation == enum.BinaryOperation.CompareLe then
			return "<="
		elseif operation == enum.BinaryOperation.CompareLt then
			return "<"
		elseif operation == enum.BinaryOperation.And then
			return "and"
		elseif operation == enum.BinaryOperation.Or then
			return "or"
		end
		
		--error("Unexpected binary operation")
	end
	
	function BinaryExpression:GetBinaryOperation(code)
		if code == enum.OpCode.ADDK or code == enum.OpCode.ADD then
			return (enum.BinaryOperation.Add)
		elseif code == enum.OpCode.SUBRK or code == enum.OpCode.SUBK or code == enum.OpCode.SUB then
			return (enum.BinaryOperation.Subtract)
		elseif code == enum.OpCode.MULK or code == enum.OpCode.MUL then
			return (enum.BinaryOperation.Multiply)
		elseif code == enum.OpCode.DIVRK or code == enum.OpCode.DIVK or code == enum.OpCode.DIV then
			return (enum.BinaryOperation.Divide)
		elseif code == enum.OpCode.IDIVK or code == enum.OpCode.IDIV then
			return (enum.BinaryOperation.FloorDivide)
		elseif code == enum.OpCode.MODK or code == enum.OpCode.MOD then
			return (enum.BinaryOperation.Modulus)
		elseif code == enum.OpCode.POWK or code == enum.OpCode.POW then
			return (enum.BinaryOperation.Power)
		elseif code == enum.OpCode.CONCAT then
			return (enum.BinaryOperation.Concat)
		elseif code == enum.OpCode.JUMPIFEQ then
			return (enum.BinaryOperation.CompareNe)
		elseif code == enum.OpCode.JUMPIFNOTEQ then
			return (enum.BinaryOperation.CompareEq)
		elseif code == enum.OpCode.JUMPXEQKNIL
		or code == enum.OpCode.JUMPXEQKB
		or code == enum.OpCode.JUMPXEQKN
		or code == enum.OpCode.JUMPXEQKS then
			return (enum.BinaryOperation.CompareEq)
		elseif code == enum.OpCode.JUMPIFLE then
			return (enum.BinaryOperation.CompareGe)
		elseif code == enum.OpCode.JUMPIFLT then
			return (enum.BinaryOperation.CompareGt)
		elseif code == enum.OpCode.JUMPIFNOTLE then
			return (enum.BinaryOperation.CompareLe)
		elseif code == enum.OpCode.JUMPIFNOTLT then
			return (enum.BinaryOperation.CompareLt)
		elseif code == enum.OpCode.ORK or code == enum.OpCode.OR then
			return (enum.BinaryOperation.Or)
		elseif code == enum.OpCode.ANDK or code == enum.OpCode.AND then
			return (enum.BinaryOperation.And)
		end
	
		--error("Unexpected operation code")
	end
end

local function deserialize(bytecode)
	local limit = 16384

	local slices = {}

	local totalLength = 0

	for i = 0, #bytecode, limit do
		local id = #slices + 1
		slices[id] = string.sub(bytecode, i + 1, i + limit)
		
		totalLength = totalLength + #slices[id]

		--print("slice", i + 1, #slices[id], i + limit, totalLength)
	end

	local reader, func = {}, {}

	local TypeVersion = 2

	local version = nil
	local typesVersion = 0

	local pos = 0

	do
		function reader:Clone(src)
			local dest = {}

			for i, v in pairs(src) do
				if type(v) == "table" then
					dest[i] = reader:Clone(v)
				else
					dest[i] = v
				end
			end

			return dest
		end
		function reader:pos() return pos end
		function reader:ReadByte()
			local v = slices[math.floor(pos / limit) + 1]:byte((pos % limit) + 1, (pos % limit) + 1)
			pos = pos + 1
			return v
		end
		function reader:ReadChar()
			return string.char(reader:ReadByte())
		end
		function reader:ReadInt32()
			local b = { reader:ReadByte(), reader:ReadByte(), reader:ReadByte(), reader:ReadByte() }
			local uint32_t = (b[4] * 256^3) + (b[3] * 256^2) + (b[2] * 256) + b[1]
			--b[1] + b[2] * 256 + b[3] * 65536 + b[4] *16777216
			return uint32_t
		end
		function reader:ReadUInt32() -- alias
			return reader:ReadInt32()
		end
		function reader:ReadVarInt()
			local result, shift = 0, 0
			
			local b
			
			repeat
				b = reader:ReadByte()
				result = bit32.bor(
					result, 
					bit32.lshift(
						bit32.band(
							b,
							0x7F),
						shift)
				)
				shift = shift + 7
			until bit32.band(b, 128) == 0
			
			return result
		end
		--[[
		function reader:ReadString(strings) 
			local id = reader:ReadVarInt();

			if id == 0 or id > #strings then
				return ""
			else
				return strings[id - 1]
			end
		end
		--]]
		function reader:ReadString(strings, inChunk)
			if not inChunk then
				local result = ""
				
				local len = reader:ReadVarInt()
				
				--local oldPos = pos

				for i = 1, len do
					result = result .. reader:ReadChar()
				end

				--pos = oldPos + len

				return result
			elseif inChunk then
				local id = reader:ReadVarInt();
				
				if id == 0 or id > #strings + 1 then
					return ""
				else
					return strings[id - 1]
				end
			end
		end
		function reader:ReadSingle()
			local b = {};
			for i = 1, 4 do
				table.insert(b, reader:ReadByte());
			end
			local str = '';
			for i = 1, 4 do
				str = str .. string.char(b[i]);
			end
			local result = string.unpack("<f", str)
			return result
		end
		function reader:ReadFloat() -- alias
			return reader:ReadSingle()
		end
		function reader:ReadDouble()
			local b = {};
			for i = 1, 8 do
				table.insert(b, reader:ReadByte());
			end
			local str = '';
			for i = 1, 8 do
				str = str .. string.char(b[i]);
			end
			local result = string.unpack("<d", str)
			return result
		end
		function reader:ReadBytes(count)
			local result = string.sub(slices[math.floor(pos / limit) + 1], 0, count)
			
			if (#result ~= count) then
				error("Remaining size of stream is smaller than requested number of bytes.")
			end
			
			pos = pos + count
			return result;
		end
		function reader:ReadASCII(length)
			return reader:ReadBytes(length)
		end



		--[[
		function reader:ReadStrings()
			local strings = {}
			
			local size = reader:ReadVarInt()
			while (#strings < size) do
				local stringSize = reader:ReadVarInt()
				
				local String = reader:ReadASCII(stringSize)
				
				print(String)
				
				insert(strings, String)
			end

			return strings;
		end
		--]]
		function reader:ReadStrings(size)
			local strings = {}
			
			for i = 0, size - 1 do
				local string = reader:ReadString(strings, false)
				strings[i] = string
			end
			
			return strings
		end
		function reader:ReadFunction(chunk, functions, strings, size)
			local Function = func:new()

			Function.Id = len(functions)
			
			Function.MaxStackSize = reader:ReadByte()
			Function.Parameters = reader:ReadByte()

			Function.MaxUpvalues = reader:ReadByte()
			--Function.Upvalues = Function.MaxUpvalues
			Function.IsVararg = reader:ReadBoolean()
			
			if (version >= 4) then
				Function.Flags = reader:ReadByte()
				--Function.Info = reader:ReadString()
				
				if (true) then
					if (typesVersion == 1) then
						local typeSize = reader:ReadVarInt()
						
						if typeSize ~= 0 then
							print("TYPE", pos + 1, (pos % limit) + 1, math.floor(pos / limit) + 1, #slices[math.floor(pos / limit) + 1])

							Function.Types = string.byte(slices[math.floor(pos / limit) + 1], (pos % limit) + 1, #slices[math.floor(pos / limit) + 1]) 
							--Function.Types = reader:ReadBytes(typeSize)

							assert(typeSize == (2 + Function.Parameters))
							--assert(Function.Types[0] == enum.BytecodeTypes.Function)
							--assert(Function.Types[1] == Function.Parameters)

							local headersize = bit32.btest(typeSize, 0x80) and 4 or 3

							Function.SizeTypeInfo = headersize + typeSize

							if headersize == 4 then
								Function.TypeInfo[1] = bit32.bor(bit32.band(typeSize, 127), bit32.lshift(1, 7))
								Function.TypeInfo[2] = bit32.rshift(typeSize, 7)
								Function.TypeInfo[3] = 0
								Function.TypeInfo[4] = 0
							else
								Function.TypeInfo[1] = typeSize
								Function.TypeInfo[2] = 0
								Function.TypeInfo[3] = 0
							end
							
							--reader:Clone()
							
							pos = pos + typeSize;
						end
					elseif (typesVersion == 2 or typesVersion == 3) then
						local typeSize = reader:ReadVarInt()

						if typeSize ~= 0 then
							Function.TypeInfo = {}

							for i = 1, typeSize do
								Function.TypeInfo[i] = 0
							end

							Function.SizeTypeInfo = typeSize

							pos = pos + typeSize
						end
					end
				else
					local typeSize = reader:ReadVarInt()
					
					if (typeSize ~= 0 and typesVersion == 1) then
						assert(typeSize == (2 + Function.Parameters))
						--assert(Function.Types[0] == enum.BytecodeTypes.Function)
						--assert(Function.Types[1] == Function.Parameters)
					end

					pos = pos + typeSize
				end
			end

			Function.sizeCode = reader:ReadVarInt()
			Function.Instructions = reader:ReadInstructions(Function.sizeCode)
			
			Function.sizeConstants = reader:ReadVarInt()
			Function.Constants = reader:ReadConstants(strings, Function.sizeConstants)
			
			Function.sizeProtos = reader:ReadVarInt()
			Function.Functions = reader:ReadFunctions(nil, functions, nil, Function.sizeProtos)
			Function.GlobalFunctions = functions

			Function.LineDefined = reader:ReadVarInt()
			Function.DebugName = reader:ReadString(strings, true)

			Function.LineInfo = reader:ReadLineInfo(Function.sizeCode)
			Function.DebugInfo = reader:ReadDebugInfo(strings)
			
			--print(Function.LineDefined, Function.DebugName, Function.LineInfo, Function.DebugInfo)
			
			return Function
		end
		function reader:ReadFunctions(chunk, funcs, strings, size)
			local functions = {}

			for i = 0, size - 1 do
				if strings and not funcs then
					functions[i] = reader:ReadFunction(chunk, functions, strings, size)
				elseif funcs and not strings then
					local fId = reader:ReadVarInt()
					functions[i] = fId
				end
			end
			
			return functions
		end
		--[[
		function reader:ReadFunctions(strings)
			local functions = {}
			
			local sizeProtos = reader:ReadVarInt();
			for i = 1, sizeProtos do
				insert(functions, reader:ReadVarInt())
			end
			
			return functions
		end
		--]]
		function reader:ReadInstructions(size)
			--local size = reader:ReadVarInt()
	   
			local instructions = {}
			
			local ins = 0
			while (ins < size) do
				local readUInt32 = reader:ReadUInt32()
				local instruction = Instruction:new(readUInt32)
				local properties = instruction:GetProperties()
	   
				if (properties.Code == enum.OpCode.NOP) then
					print("Unexpected NOP instruction.")
				end

				insert(instructions, instruction)

				ins = ins + 1
				
				-- print("Inserted", ins, properties.Name, ("A:%d, B:%d, C:%d, D:%d, E:%d, Aux:%d"):format(instruction:A(), instruction:B(), instruction:C(), instruction:D(), instruction:E(), instruction:Aux()))

				if (properties.HasAux) then
					readUInt32 = reader:ReadUInt32()
					instruction = Instruction:new(readUInt32)
					--properties = instruction:GetProperties()

					insert(instructions, instruction)

					ins = ins + 1

					properties.Aux = instruction:Aux()

					-- print("Inserted AUX", ins, properties.Name, ("A:%d, B:%d, C:%d, D:%d, E:%d, Aux:%d"):format(instruction:A(), instruction:B(), instruction:C(), instruction:D(), instruction:E(), instruction:Aux()))
				end
			end
			
			return instructions
		end
		function reader:ReadConstant(strings, constants)
			local constant = reader:ReadByte() 

			local constantEnum = true or find(enum.ConstantType, constant)
			
			if (not constantEnum) then
				error(("Constant is not defined (%d)"):format(constant))
			end
			
			local r_Constant
			
			if (constant == enum.ConstantType.Nil) then
				r_Constant = Constant:new(nil, constant, constantEnum)
			elseif (constant == enum.ConstantType.Bool) then
				r_Constant = Constant:new(reader:ReadBoolean(), constant, constantEnum)
			elseif (constant == enum.ConstantType.Number) then
				r_Constant = Constant:new(reader:ReadDouble(), constant, constantEnum)
			elseif (constant == enum.ConstantType.String) then
				local string = reader:ReadString(strings, true)

				r_Constant = Constant:new(string, constant, constantEnum)
			elseif (constant == enum.ConstantType.Import) then
				local id = reader:ReadUInt32()
				local count = bit32.band(bit32.rshift(id, 30), 1023)

				local names = {}
				
				if (count > 0) then
					local idx = bit32.band(bit32.rshift(id, 20), 1023)
					table.insert(names, {constant = constants[idx], index = idx})
				end
				
				if (count > 1) then
					local idx = bit32.band(bit32.rshift(id, 10), 1023)
					table.insert(names, {constant = constants[idx], index = idx})
				end

				if (count > 2) then
					local idx = bit32.band(bit32.rshift(id, 0), 1023)
					table.insert(names, {constant = constants[idx], index = idx})
				end
				
				r_Constant = Constant:new(names, constant, constantEnum)
			elseif (constant == enum.ConstantType.Table) then 
				local size = reader:ReadVarInt();

				local keys = {}

				for i = 0, size - 1 do
					keys[i] = constants[reader:ReadVarInt()]
				end

				r_Constant = Constant:new(keys, constant, constantEnum)
			elseif (constant == enum.ConstantType.Closure) then
				r_Constant = Constant:new(reader:ReadVarInt(), constant, constantEnum)
			elseif (constant == enum.ConstantType.Vector) then
				local vectors = {}

				table.insert(vectors, reader:ReadFloat())
				table.insert(vectors, reader:ReadFloat())
				table.insert(vectors, reader:ReadFloat())
				table.insert(vectors, reader:ReadFloat())

				r_Constant = Constant:new(vectors, constant, constantEnum)
			end
			
			if r_Constant then
				return r_Constant
			end
			
			error(("No constant returned for type (%d)"):format(constant))
		end
		function reader:ReadConstants(strings, size)
			local constants = {}

			for i = 0, size - 1 do
				constants[i] = reader:ReadConstant(strings, constants)
			end

			return constants;
		end
		function reader:ReadLineInfo(size)
			local lineInfo = nil

			if (reader:ReadBoolean()) then
				lineInfo = LineInfo:new()

				lineInfo.LineGapLog = reader:ReadByte()

				local intervals = bit32.rshift((size - 1), lineInfo.LineGapLog) + 1
				local absoffset = bit32.band(size + 3, bit32.bnot(3))
				
				lineInfo.LineInfoList = {}

				local lastOffset = 0
				for i = 0, size - 1 do
					lastOffset = lastOffset + reader:ReadByte()
					lineInfo.LineInfoList[i] = lastOffset
				end

				lineInfo.AbsLineInfoList = {}

				local lastLine = 0
				for i = 0, intervals - 1 do
					lastLine = lastLine + reader:ReadInt32()
					lineInfo.AbsLineInfoList[i] = lastLine
				end
			else
				--print("Line information is disabled, skipping.")
			end

			return lineInfo;
		end
		function reader:ReadDebugInfo(strings)
			local debugInfo = nil

			if (reader:ReadBoolean()) then
				debugInfo = DebugInfo:new()

				local sizeVars = reader:ReadVarInt()

				local localVariables = {}

				for i = 0, sizeVars - 1 do
					local variable = LocalVariable:new()

					variable.Name = reader:ReadString(strings, true)
					variable.StartPc = reader:ReadVarInt()
					variable.EndPc = reader:ReadVarInt()
					variable.Slot = reader:ReadByte()

					localVariables[i] = variable
				end

				local sizeUpvals = reader:ReadVarInt()

				local upvalues = {}

				for i = 0, sizeUpvals - 1 do
					upvalues[i] = reader:ReadString(strings, true)
				end

				debugInfo.Locals = localVariables
				debugInfo.Upvalues = upvalues
			else
				--print("Debug information is disabled, skipping.")
			end

			return debugInfo;
		end
		
		function reader:ReadBoolean()
			return reader:ReadByte() == 1
		end
	end
	do
		function func:new()
			local Table = {}

			Table.Id = nil
			Table.MaxStackSize = nil
			Table.Parameters = 0
			Table.MaxUpvalues = nil
			Table.Upvalues = {}
			Table.IsVararg = false
			Table.Flags = nil
			Table.Types = nil
			Table.LineDefined = nil
			Table.DebugName = nil
			Table.Constants = {}
			Table.Instructions = {}
			Table.Functions = {}
			Table.LineInfo = nil
			Table.DebugInfo = nil
			Table.TypeInfo = {}
			Table.SizeTypeInfo = 0

			Table.GlobalFunctions = {}
			Table.SizeCode = nil

			function Table:GetFunction(fId)
				return Table.GlobalFunctions[Table.Functions[fId]]
			end

			function Table:GetConstant(pc)
				--333.0
				--21905775.0

				return Table.Constants[Table.Instructions[pc]:Value()]
			end

			return Table
		end
	end

	local min_version, target_version, max_version = 3, 5, 6
	local type_min_version, type_target_version, type_max_version = 1, 3, 3

	local chunk = {}

	version = reader:ReadByte()
	if (version == 0) then
		error(reader:ReadString())
	end

	if (version < min_version or version > max_version) then
		error(("Bytecode version mismatch, expected version %d...%d, got %d"):format(min_version, max_version, version));
	end

	if version >= 4 then
		typesVersion = reader:ReadByte()

		if (typesVersion < type_min_version or typesVersion > type_max_version) then
			error(("Bytecode version mismatch, expected version %d...%d, got %d"):format(type_min_version, type_max_version, typesVersion));
		end
	end

	chunk.sizeStrings = reader:ReadVarInt()
	chunk.Strings = reader:ReadStrings(chunk.sizeStrings, false)

	local userdataTypeLimit = (64 + 32) - (64)

	if (typesVersion == 3) then
		local index = reader:ReadByte()

		while (index ~= 0) do
			local name = reader:ReadString(chunk.sizeStrings, false);

			if (index - 1) < userdataTypeLimit then
				print("userdataTypeLimit")
			end

			index = reader:ReadByte()
		end
	end

	chunk.sizeProtos = reader:ReadVarInt()

	chunk.GlobalFunctions = {}
	chunk.Functions = reader:ReadFunctions(chunk, nil, chunk.Strings, chunk.sizeProtos)
	
	chunk.MainIndex = reader:ReadVarInt()

	return chunk, chunk.Functions[chunk.MainIndex] --or chunk.Functions[chunk.MainIndex + 1]
end



--setclipboard(crypt.base64.encode(dumpstring()))



-- #fff255
local function disassemble(scr, newSettings)
	local settings = {
		argument = "arg";
		variable = "var";
		upvalue = "upval";
		reference = "ref";
		
		OpCodes = true;

		KeepRedundance = true;
		ShowRedundance = true;

		Base64 = false;
	}

	if newSettings then
		for i, v in pairs(newSettings) do
			settings[i] = v
		end
	end

	local Bytecode = scr

	if typeof then
		if (string.lower(typeof(scr)) == "instance") then
			if not (getscriptbytecode or dumpstring) then error("Executor does not support getscriptbytecode or dumpstring") end
			Bytecode = getscriptbytecode(scr) or dumpstring(scr);
		end
		
		if type(Bytecode) == "table" then
			-- I just prefer bytecode strings
			local t = Bytecode;
			for i = 1, #t do
				Bytecode = Bytecode .. string.char(t[i]);
			end
		end

		writefile("Base64ByteFile.txt", base64.encode(Bytecode))
	else
		if settings.Base64 then
			Bytecode = base64.decode(scr)
		end
	end
	
	local Chunk, Main = deserialize(Bytecode)
	--local Main = Chunk.Functions[Chunk.MainIndex] --or Chunk.Functions[Chunk.MainIndex + 1]
	
	if not Main then return error("Main proto doesn't exist.") end
	
	local LocalAssignment = {}
	do
		LocalAssignment.__index = LocalAssignment

		function LocalAssignment:new(var, val)
			self = setmetatable({}, self)
			self._var = var
			self._val = val
			
			return self
		end
	end
	
	local Object = {}; 
	local Aux = {}; 
	local Register = {}; 
	local Assignment = {};  
	local Declaration = {}; 
	local TableAssign = {}; 
	local TableIndex = {}; 
	local TableNew = {}; 
	local Expression = {};
	local Operation = {};
	local Call = {}; 
	local FastCall = {};
	local Plain = {};
	local Repeat = {}; 
	local While = {}; 
	local If = {}; 
	local IfElse = {};
	local ForNumeric = {};
	local ForGeneric = {};
	local End = {};
	local NameCall = {};
	local Closure = {}; 
	local Block = {};

	do
		Object._innerBlocks = {}

		function Object:IsA(name)
			return name and string.lower(name) == string.lower(self._object) or not name and self._object
		end

		function Object:Assign(tbl, name)
			local mt = getmetatable(tbl)

			setmetatable(tbl, nil)

			tbl._registers = {}
			tbl._values = {}
			tbl._references = 1
			tbl._local = false
			tbl._redundant = false
			tbl._address = tostring(tbl)
			tbl._object = name or tostring(tbl)

			setmetatable(tbl, mt)
		end

		function Object:Values(statement, ...)
			return {Statement = statement}
		end

		function Object:RedundanceSet(var, state, block)
			if settings.KeepRedundance then
				local register = Register:Get(var, block)
				
				if register then
					register._redundant = state
				end

				return register and register._output or nil
			else
				local declaration = Declaration:Get(var, block)
				local object = declaration and declaration._val or nil
				
				if declaration then
					declaration._redundant = state
				end

				return object
			end
		end

		function Object:RedundanceGet(var, block, registers, decrement, index)
			if settings.KeepRedundance then
				local register = Register:Get(var, block)

				if register then
					if decrement then self:Decrement(register) end

					if registers then
						table.insert(registers, register)
					end
				end

				local result = index == "" and register or register and register._output or nil

				return result
			else
				local SearchBlock
				do
					SearchBlock = function(block)
						local declaration = Declaration:Get(var, block)

						local result = index == "" and declaration or index and declaration and (type(declaration[index]) == "table" and select(1, table.unpack(declaration[index])) or declaration[index]) or declaration and declaration._val or nil

						return result, declaration and declaration._isVars
					end
				end

				local recursed = false

				local result, isVars = SearchBlock(block)

				if not result then
					recursed = true

					-- print("RedundanceGet NO RESULT FOR", var, "RECURSING", debug.traceback())

					for i = #self._innerBlocks, 1, -1 do
						local block = self._innerBlocks[i]

						if block then
							result, isVars = SearchBlock(block)

							if result then
								-- print("GOT RESULT", result)

								break
							end
						end
					end
				end

				if not result then
					-- print("RedundanceGet NO RESULT FOR", var, debug.traceback())

					--recurse(self._innerBlocks, print)
				end

				return result, isVars, recursed
			end
		end

		function Object:AddInnerBlock(block)
			table.insert(self._innerBlocks, block)

			return #self._innerBlocks
		end

		function Object:RemoveInnerBlock(index)
			table.remove(self._innerBlocks, index)
		end

		function Object:Decrement(object)
			for key, value in pairs(object._registers) do
				value._references = value._references - 1
			end

			object._references = object._references - 1
		end
	end

	do
		Aux.__index = Aux
		Aux.__tostring = function() return "Aux" end
		Aux._auxs = {}
		Aux._pcMap = {}
		
		function Aux:new(instruction, block)
			self = setmetatable({}, self)
			self._instruction = instruction
			self._block = block
			
			Object:Assign(self, tostring(self))
			
			self._index = insert(Aux._auxs, self)
			
			insert(Aux._pcMap, instruction, self)
			
			self._output = self:Write()
			
			return self
		end
		
		function Aux:Get(index, block)
			local register = self._pcMap[index]

			if register then
				register._references = register._references + 1
			end

			return register
		end
		
		function Aux:Write()
			return ("Aux")
		end

		Aux.IsA = Object.IsA
	end

	do
		Register.__index = Register
		Register.__tostring = function() return "Register" end
		Register._registers = {}
		Register._pcMap = {}
		Register._stack = {}
		Register._top = {}
		Register._topLine = {}
		
		function Register:new(name, var, block)
			self = setmetatable({}, self)
			self._name = name
			self._var = var
			self._block = block

			if not Register._stack[block] then
				Register._stack[block] = {}
			end

			Register._stack[block][var] = var

			table.insert(Register._topLine, var)

			local LastRegister = Register._topLine[#Register._topLine - 1]

			Register._top[block] = LastRegister

			if #Register._topLine > 2 then
				table.remove(Register._topLine, #Register._topLine - 2)
			end
			
			Object:Assign(self, tostring(self))
			
			self._index = insert(Register._registers, self)
			
			insert(Register._pcMap, var, self)
			
			self._output = self:Write()
			
			return self
		end
		
		function Register:Get(index, block)
			local register = self._pcMap[index]

			if not register then
				if block._parent then
					register = self:Get(index, block._parent)
				end
			end

			if register then
				register._references = register._references + 1
			end

			return register
		end
		
		function Register:Rewrite(identifier)
			return (identifier)
		end

		function Register:Write()
			if type(self._var) == "number" then
				return ("%s%i"):format(self._name, self._var)
			else
				return ("%s%s"):format(self._name, tostring(self._var))
			end
 		end

		Register.IsA = Object.IsA
	end
	
	do
		Assignment.__index = Assignment
		Assignment.__tostring = function() return "Assignment" end
		Assignment._assignments = {}
		Assignment._pcMap = {}
		
		function Assignment:new(target, var, block)
			self = setmetatable({}, self)
			self._target = target
			self._var = var
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not Assignment._assignments[block] and not Assignment._pcMap[block] then
				Assignment._assignments[block] = {}
				Assignment._pcMap[block] = {}
			end
			
			self._index = insert(Assignment._assignments[block], self)
			
			self._output = self:Write()

			return self
		end
		
		function Assignment:Get(index, block)
			local assignment = self._pcMap[block]
			assignment = assignment and assignment[index]
			
			if assignment then
				for key, value in pairs(assignment._registers) do
					value._references = value._references + 1
				end

				assignment._references = assignment._references + 1
			end

			return assignment
		end
		
		function Assignment:Write()
			return ("%s = %s"):format(tostring(self._target), self._var._registers[1]._output)
		end

		Assignment.IsA = Object.IsA
	end
	
	do
		Declaration.__index = Declaration
		Declaration.__tostring = function() return "Declaration" end
		Declaration._declarations = {}
		Declaration._pcMap = {}
		
		function Declaration:new(var, val, block, isArg)
			self = setmetatable({}, self)
			self._var = var
			self._val = val
			self._block = block
			self._isVars = type(var) == "table"
			self._call = false
			self._redundance = not (val == "{}")
			self._var_indexes = {}

			self._isArg = isArg

			Object:Assign(self, tostring(self))

			if not Declaration._declarations[block] and not Declaration._pcMap[block] then
				Declaration._declarations[block] = {}
				Declaration._pcMap[block] = {}
			end
			
			self._index = insert(Declaration._declarations[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					table.insert(self._var_indexes, value)
					
					insert(Declaration._pcMap[block], value, self)
				end
			else
				table.insert(self._var_indexes, var)

				insert(Declaration._pcMap[block], var, self)
			end

			self._output = self:Write()

			return self
		end
		
		function Declaration:Get(index, block)
			local declaration = self._pcMap[block]
			declaration = declaration and declaration[index]

			if not declaration then
				if block and block._parent then
					declaration = self:Get(index, block._parent)
				end
			end

			if declaration then
				for key, value in pairs(declaration._registers) do
					value._references = value._references + 1
				end

				declaration._references = declaration._references + 1
			end

			return declaration
		end

		function Declaration:Renew(var, val)
			self._var = var
			self._val = val

			self._output = self:Write()
		end
		
		function Declaration:Decrement()
			for key, value in pairs(self._registers) do
				value._references = value._references - 1
			end

			self._references = self._references - 1
		end

		function Declaration:GetVar()
			return type(self._var) == "table" and table.unpack(self._var) or self._var
		end

		function Declaration:Write()
			local register
			local output = ""

			if type(self._var) == "table" then
				self._isVars = true

				for i = 1, #self._var do
					register = Register:new(self._isArg and settings.argument or settings.variable, self._var[i], self._block)
					table.insert(self._registers, register)

					output = output .. register._output

					if i < #self._var then
						output = output .. ", "
					end
				end
			else
				register = Register:new(self._isArg and settings.argument or settings.variable, self._var, self._block)
				table.insert(self._registers, register)

				output = register._output
			end

			if not self._call then
				return ("%s = %s"):format(output, tostring(type(self._val) == "table" and self._val._output or self._val));
			else
				return ("%s"):format(tostring(type(self._val) == "table" and self._val._output or self._val));
			end
		end

		Declaration.IsA = Object.IsA
	end
	
	do
		TableAssign.__index = TableAssign
		TableAssign.__tostring = function() return "TableAssign" end
		TableAssign._assignments = {}
		TableAssign._pcMap = {}
		
		function TableAssign:new(var, key, val, block)
			self = setmetatable({}, self)
			self._var = var
			self._key = key
			self._val = val
			self._block = block

			Object:Assign(self, tostring(self))

			if not TableAssign._assignments[block] and not TableAssign._pcMap[block] then
				TableAssign._assignments[block] = {}
				TableAssign._pcMap[block] = {}
			end
			
			self._index = insert(TableAssign._assignments[block], self)
			
			self._output = self:Write()

			return self
		end
		
		function TableAssign:Get(index, block)
			local tableAssign = self._pcMap[block]
			tableAssign = tableAssign and tableAssign[index]
			
			if tableAssign then
				for key, value in pairs(tableAssign._registers) do
					value._references = value._references + 1
				end

				tableAssign._references = tableAssign._references + 1
			end

			return tableAssign
		end
		
		function TableAssign:Write()
			if self._val then
				return ("%s[%s] = %s"):format((self._var:IsA("Declaration") and self._var._registers[1]._output) or (self._var:IsA("Register") and self._var._output), tostring(self._key._output), tostring(self._val._output))
			else
				return ("%s[%s]"):format((self._var:IsA("Declaration") and self._var._registers[1]._output) or (self._var:IsA("Register") and self._var._output), tostring(self._key._output))
			end
		end

		TableAssign.IsA = Object.IsA
	end
	
	do
		TableIndex.__index = TableIndex
		TableIndex.__tostring = function() return "TableIndex" end
		TableIndex._indexes = {}
		TableIndex._pcMap = {}
		
		function TableIndex:new(var, index, block)
			self = setmetatable({}, self)
			self._var = var
			self._key = index
			self._block = block
			
			Object:Assign(self, tostring(self))

			if not TableIndex._indexes[block] and not TableIndex._pcMap[block] then
				TableIndex._indexes[block] = {}
				TableIndex._pcMap[block] = {}
			end
			
			self._index = insert(TableIndex._indexes[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(TableIndex._pcMap[block], value, self)
				end
			else
				insert(TableIndex._pcMap[block], var, self)
			end
			
			self._output = self:Write()

			return self
		end
		
		function TableIndex:Get(index, block)
			local tableIndex = self._pcMap[block]
			tableIndex = tableIndex and tableIndex[index]
			
			if tableIndex then
				for key, value in pairs(tableIndex._registers) do
					value._references = value._references + 1
				end

				tableIndex._references = tableIndex._references + 1
			end

			return tableIndex
		end
		
		function TableIndex:Write()
			local indexes = ""

			if type(self._key) == "table" then
				for i = 1, #self._key do
					indexes = indexes .. ("[%s]"):format(self._key[i])
				end
			else
				indexes = ("[%s]"):format(self._key)
			end
			
			return ("%s%s"):format(self._var, indexes)
		end

		TableIndex.IsA = Object.IsA
	end

	do
		TableNew.__index = TableNew
		TableNew.__tostring = function() return "TableNew" end
		TableNew._tables = {}
		TableNew._pcMap = {}
		
		function TableNew:new(var, val, block)
			self = setmetatable({}, self)
			self._var = var
			self._val = nil
			self._block = block
			self._argWritten = ""
			self._argsWritten = 0

			self._duptable = (val ~= nil)
			self._initval = val
			self._initvalreverse = {}

			if self._duptable then
				for i, v in pairs(self._initval) do
					self._initvalreverse[v] = i
				end
			end

			self._variable = self._var

			Object:Assign(self, tostring(self))

			if not TableNew._tables[block] and not TableNew._pcMap[block] then
				TableNew._tables[block] = {}
				TableNew._pcMap[block] = {}
			end

			self._index = insert(TableNew._tables[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(TableNew._pcMap[block], value, self)
				end
			else
				insert(TableNew._pcMap[block], var, self)
			end
			
			self._output = self:Write()

			return self
		end
		
		function TableNew:Insert(val)
			if not self._val then self._val = {} end

			table.insert(self._val, val)

			if self._output then
				if not (self._argWritten == "") then
					self._argWritten = self._argWritten .. "\n"
				end
				
				local regex = "{\n%s\n}"
				
				if val._val == "..." then
					self._argWritten = self._argWritten .. ("%s%s"):format("\t", val._output)
				else
					local value = nil

					if val._val:IsA("TableNew") then
						local HandleTable; HandleTable = (function(tbl)
							local regex = "{\n\t%s\n\t}"
							
							local indented = string.gsub(tbl._argWritten, "\n", "\n\t")
							
							return regex:format(indented)
						end)

						value = HandleTable(val._val)
					else
						value = val._val._output
					end

					self._argWritten = self._argWritten .. ("%s[%s] = %s;"):format("\t", val._key._output, value)

					if self._duptable then
						local key = self._initvalreverse[val._key]

						if key then
							self._initvalreverse[val._key] = nil
							self._initval[key] = nil
						end
					end
				end

				self._output = regex:format(self._argWritten)
			else
				self._output = self:Write()
			end
		end

		function TableNew:Get(index, block)
			local tableNew = self._pcMap[block]
			tableNew = tableNew and tableNew[index]
			
			if tableNew then
				for key, value in pairs(tableNew._registers) do
					value._references = value._references + 1
				end

				tableNew._references = tableNew._references + 1
			end

			return tableNew
		end
		
		function TableNew:Write()
			local register
			local output = ""

			if type(self._var) == "table" and false then
				for i = 1, #self._var do
					if i == 1 then self._variable = self._var end

					register = Register:new(settings.variable, self._var[i], self._block)
				end
			else
				register = Register:new(settings.variable, self._var, self._block)

				self._register = register

				table.insert(self._registers, register)
			end

			local result = "{}"

			if type(self._val) == "table" then
				local regex = "{%s}"
				
				for i = 1, #self._val do
					local value = self._val[i]
					
					if type(value) == "table" then
						if value._val._output == "..." then
							self._argWritten = self._argWritten .. ("%s"):format(value._val._output)
						end
					else
						self._argWritten = self._argWritten .. value._val._output
					end

					if i < #self._val then
						self._argWritten = self._argWritten .. ", "
					end
				end

				regex = regex:format(self._argWritten)

				result = regex
			end

			return result
		end

		TableNew.IsA = Object.IsA
	end

	do
		Expression.__index = Expression
		Expression.__tostring = function() return "Expression" end
		Expression._expressions = {}
		Expression._pcMap = {}
		
		function Expression:new(expression, var, block)
			self = setmetatable({}, self)
			self._expression = expression
			self._var = var
			self._block = block

			Object:Assign(self, tostring(self))

			if not Expression._expressions[block] and not Expression._pcMap[block] then
				Expression._expressions[block] = {}
				Expression._pcMap[block] = {}
			end

			self._index = insert(Expression._expressions[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(Expression._pcMap[block], value, self)
				end
			else
				insert(Expression._pcMap[block], var, self)
			end

			self._output = self:Write()

			return self
		end

		function Expression:Get(index, block)
			local expression = self._pcMap[block]
			expression = expression and expression[index]
			
			if expression then
				for key, value in pairs(expression._registers) do
					value._references = value._references + 1
				end

				expression._references = expression._references + 1
			end

			return expression
		end
		
		function Expression:Write()
			return ("%s%s"):format(self._expression, self._var)
		end

		Expression.IsA = Object.IsA
	end

	do
		Operation.__index = Operation
		Operation.__tostring = function() return "Operation" end
		Operation._operations = {}
		Operation._pcMap = {}
		
		function Operation:new(var, operation, var2, block)
			self = setmetatable({}, self)
			self._var_l = var
			self._operation = operation
			self._var_r = var2
			self._var = {var, var2}
			self._block = block

			Object:Assign(self, tostring(self))

			if not Operation._operations[block] and not Operation._pcMap[block] then
				Operation._operations[block] = {}
				Operation._pcMap[block] = {}
			end

			self._index = insert(Operation._operations[block], self)

			self._output = self:Write()

			return self
		end

		function Operation:Get(index, block)
			local operation = self._pcMap[block]
			operation = operation and operation[index]
			
			if operation then
				for key, value in pairs(operation._registers) do
					value._references = value._references + 1
				end

				operation._references = operation._references + 1
			end

			return operation
		end
		
		function Operation:Write()
			return ("%s %s %s"):format(self._var_l, self._operation, self._var_r)
		end

		Operation.IsA = Object.IsA
	end

	do
		Call.__index = Call
		Call.__tostring = function() return "Call" end
		Call._calls = {}
		Call._pcMap = {}
		
		function Call:new(var, args, block)
			self = setmetatable({}, self)
			self._var = var
			self._args = args
			self._block = block
			self._argWritten = ""
			self._argsWritten = 0

			Object:Assign(self, tostring(self))

			if not Call._calls[block] and not Call._pcMap[block] then
				Call._calls[block] = {}
				Call._pcMap[block] = {}
			end

			self._index = insert(Call._calls[block], self)
			
			self._output = self:Write()

			return self
		end
		
		function Call:Insert(arg)
			if not self._args then self._args = {} end

			table.insert(self._args, arg)

			if self._output then
				if not (self._argWritten == "") then
					self._argWritten = self._argWritten .. ", "
				end

				local regex = "%s(%s)"
				
				for i = 1, #self._args do
					local arg = self._args[i]

					self._argsWritten = self._argsWritten + 1

					if false and (not arg._isArg and arg._val:IsA("Plain")) then
						arg._output = nil

						arg = arg._val._output
					else
						arg = arg._registers[1]._output
					end

					self._argWritten = self._argWritten .. ("%s"):format(arg)

					if i < #self._args then
						self._argWritten = self._argWritten .. ", "
					end
				end

				self._output = regex:format(self._var, self._argWritten)
			else
				self._output = self:Write()
			end
		end

		function Call:Get(index, block)
			local call = self._pcMap[block]
			call = call and call[index]
			
			if call then
				for key, value in pairs(call._registers) do
					value._references = value._references + 1
				end

				call._references = call._references + 1
			end

			return call
		end
		
		function Call:Write()
			if type(self._args) == "table" then
				local regex = "%s(%s)"
				
				for i = 1, #self._args do
					local arg = self._args[i]

					self._argsWritten = self._argsWritten + 1

					if false and (not arg._isArg and arg._val:IsA("Plain")) then
						arg._output = nil

						arg = arg._val._output
					else
						arg = arg._registers[1]._output
					end

					self._argWritten = self._argWritten .. ("%s"):format(arg)

					if i < #self._args then
						self._argWritten = self._argWritten .. ", "
					end
				end

				return regex:format(self._var._registers[1]._output, self._argWritten)
			else
				return ("%s(%s)"):format(self._var._registers[1]._output, self._argWritten)
			end
		end

		Call.IsA = Object.IsA
	end

	do
		FastCall.__index = FastCall
		FastCall.__tostring = function() return "FastCall" end
		FastCall._calls = {}
		FastCall._pcMap = {}
		
		function FastCall:new(var, block)
			self = setmetatable({}, self)
			self._var = var
			
			Object:Assign(self, tostring(self))

			if not FastCall._calls[block] and not FastCall._pcMap[block] then
				FastCall._calls[block] = {}
				FastCall._pcMap[block] = {}
			end

			self._index = insert(FastCall._calls[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(FastCall._pcMap[block], value, self)
				end
			else
				insert(FastCall._pcMap[block], var, self)
			end

			return self
		end
		
		function FastCall:Get(index, block)
			local fastcall = self._pcMap[block]
			fastcall = fastcall and fastcall[index]
			
			if fastcall then
				for key, value in pairs(fastcall._registers) do
					value._references = value._references + 1
				end

				fastcall._references = fastcall._references + 1
			end

			return fastcall
		end
		
		FastCall.IsA = Object.IsA
	end

	do
		Plain.__index = Plain
		Plain.__tostring = function() return "Plain" end
		Plain._plains = {}
		Plain._pcMap = {}
		
		function Plain:new(plain, keyword)
			self = setmetatable({}, self)
			self._plain = plain
			self._keyword = keyword

			Object:Assign(self, tostring(self))
			
			self._index = insert(Plain._plains, self)
			
			self._output = plain
			
			return self
		end
		
		Plain.IsA = Object.IsA
	end

	do
		Repeat.__index = Repeat
		Repeat.__tostring = function() return "Repeat" end
		Repeat._repeats = {}
		Repeat._pcMap = {}
		
		function Repeat:new(ifStatement, block)
			self = setmetatable({}, self)
			self._ifStatement = ifStatement
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not Repeat._repeats[block] and not Repeat._pcMap[block] then
				Repeat._repeats[block] = {}
				Repeat._pcMap[block] = {}
			end

			self._index = insert(Repeat._repeats[block], self)
			
			if ifStatement then
				insert(Repeat._pcMap[block], ifStatement, self)
			end

			self._output = self:Write()
			
			return self
		end
		
		function Repeat:Get(index, block)
			local _repeat = self._pcMap[block]
			_repeat = _repeat and _repeat[index]
			
			if _repeat then
				for key, value in pairs(_repeat._registers) do
					value._references = value._references + 1
				end

				_repeat._references = _repeat._references + 1
			end

			return _repeat
		end
		
		function Repeat:Write()
			if self._ifStatement then
				return ("until %s"):format(self._ifStatement._condition)
			end

			return ("repeat")
		end

		Repeat.IsA = Object.IsA
	end

	do
		While.__index = While
		While.__tostring = function() return "While" end
		While._whiles = {}
		While._pcMap = {}
		
		function While:new(ifStatement, block)
			self = setmetatable({}, self)
			self._ifStatement = ifStatement
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not While._whiles[block] and not While._pcMap[block] then
				While._whiles[block] = {}
				While._pcMap[block] = {}
			end

			self._index = insert(While._whiles[block], self)
			
			insert(While._pcMap[block], ifStatement, self)
			
			self._output = self:Write()
			
			return self
		end
		
		function While:Get(index, block)
			local _while = self._pcMap[block]
			_while = _while and _while[index]
			
			if _while then
				for key, value in pairs(_while._registers) do
					value._references = value._references + 1
				end

				_while._references = _while._references + 1
			end

			return _while
		end
		
		function While:Write()
			if self._ifStatement then
				return ("while %s do"):format(self._ifStatement._condition)
			end
		end

		While.IsA = Object.IsA
	end

	do
		If.__index = If
		If.__tostring = function() return "If" end
		If._ifs = {}
		If._pcMap = {}
		
		function If:new(var, opcode, block)
			self = setmetatable({}, self)
			self._var = var
			self._opcode = opcode
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not If._ifs[block] and not If._pcMap[block] then
				If._ifs[block] = {}
				If._pcMap[block] = {}
			end

			self._index = insert(If._ifs[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(If._pcMap[block], value, self)
				end
			else
				insert(If._pcMap[block], var, self)
			end
			
			self._output = self:Write()
			
			return self
		end
		
		function If:Get(index, block)
			local _if = self._pcMap[block]
			_if = _if and _if[index]
			
			if _if then
				for key, value in pairs(_if._registers) do
					value._references = value._references + 1
				end

				_if._references = _if._references + 1
			end

			return _if
		end
		
		function If:Write()
			if self._var then
				self._register = self._register or Declaration:Get(self._var, self._block)
				
				if self._opcode == enum.OpCode.JUMPIFNOT then
					self._condition = ("%s%s"):format(("not "), self._register._val._output)
				end
				
				return ("if %s then"):format(self._condition)
			end
		end

		function If:Rewrite()
			if self._var then
				self._condition = ("%s%s"):format((self._opcode == enum.OpCode.JUMPIFNOT and "not " or ""), self._register or Declaration:Get(self._var, self._block)._val._output)
				return ("if %s then"):format(self._condition)
			end
		end

		If.IsA = Object.IsA
	end

	do
		IfElse.__index = IfElse
		IfElse.__tostring = function() return "IfElse" end
		IfElse._ifs = {}
		IfElse._pcMap = {}
		
		function IfElse:new(var, condition, opcode, body, block)
			self = setmetatable({}, self)
			self._var = var
			self._condition = condition
			self._opcode = opcode
			self._body = body
			self._elseBody = nil

			Object:Assign(self, tostring(self))
			
			if not IfElse._ifs[block] and not IfElse._pcMap[block] then
				IfElse._ifs[block] = {}
				IfElse._pcMap[block] = {}
			end

			self._index = insert(IfElse._ifs[block], self)
			
			self._output = self:Write()
			
			return self
		end
		
		function IfElse:Get(index, block)
			local ifElse = self._pcMap[block]
			ifElse = ifElse and ifElse[index]
			
			if ifElse then
				for key, value in pairs(ifElse._registers) do
					value._references = value._references + 1
				end

				ifElse._references = ifElse._references + 1
			end

			return ifElse
		end
		
		function IfElse:Write()
			if self._var then
				self._conditioned = ("%s%s"):format(self._opcode == enum.OpCode.JUMPIFNOT and "not " or "", self._condition)

				return ("if %s then"):format(self._conditioned)
			end
		end
		
		IfElse.IsA = Object.IsA
	end

	do
		ForNumeric.__index = ForNumeric
		ForNumeric.__tostring = function() return "ForNumeric" end
		ForNumeric._fors = {}
		ForNumeric._pcMap = {}
		
		function ForNumeric:new(assignment, limit, step, body, block)
			self = setmetatable({}, self)
			self._assignment = assignment
			self._limit = limit
			self._step = step
			self._body = body
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not ForNumeric._fors[block] and not ForNumeric._pcMap[block] then
				ForNumeric._fors[block] = {}
				ForNumeric._pcMap[block] = {}
			end

			self._index = insert(ForNumeric._fors[block], self)
			
			insert(ForNumeric._pcMap[block], assignment, self)
			
			self._output = self:Write()
			
			return self
		end
		
		function ForNumeric:Get(index, block)
			local forNumeric = self._pcMap[block]
			forNumeric = forNumeric and forNumeric[index]
			
			if forNumeric then
				for key, value in pairs(forNumeric._registers) do
					value._references = value._references + 1
				end

				forNumeric._references = forNumeric._references + 1
			end

			return forNumeric
		end
		
		function ForNumeric:Write()
			local var = self._assignment._output
			local limit = self._limit._output
			local step = self._step._output

			self._assignment._output = nil
			self._limit._output = nil
			self._step._output = nil

			return ("for %s, %s, %s do"):format(var, self._limit._val._output, self._step._val._output)
		end
		
		ForNumeric.IsA = Object.IsA
	end

	do
		ForGeneric.__index = ForGeneric
		ForGeneric.__tostring = function() return "ForGeneric" end
		ForGeneric._fors = {}
		ForGeneric._pcMap = {}
		
		function ForGeneric:new(variables, values, body, block)
			self = setmetatable({}, self)
			self._variables = variables
			self._vals = values
			self._body = body
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not ForGeneric._fors[block] and not ForGeneric._pcMap[block] then
				ForGeneric._fors[block] = {}
				ForGeneric._pcMap[block] = {}
			end

			self._index = insert(ForGeneric._fors[block], self)
			
			self._output = self:Write()
			
			return self
		end
		
		function ForGeneric:Get(index, block)
			local forGeneric = self._pcMap[block]
			forGeneric = forGeneric and forGeneric[index]
			
			if forGeneric then
				for key, value in pairs(forGeneric._registers) do
					value._references = value._references + 1
				end

				forGeneric._references = forGeneric._references + 1
			end

			return forGeneric
		end
		
		function ForGeneric:Write()
			local first = true
			
			local output = "for "

			for i, declaration in pairs(self._variables) do
				if not first then
					output = output .. ", "
				end

				output = output .. declaration._registers[1]._output

				first = false
			end

			output = output .. " in "

			first = true

			for i, declaration in pairs(self._vals) do
				if not first then
					output = output .. ", "
				end
				
				local val

				if #declaration._registers == 3 then
					val = declaration._registers[i]._output
				else
					val =declaration._registers[1]._output
				end

				output = output .. val

				first = false
			end

			output = output .. " do"
			
			return output
		end
		
		ForGeneric.IsA = Object.IsA
	end

	do
		End.__index = End
		End.__tostring = function() return "End" end
		End._ifs = {}
		End._pcMap = {}
		
		function End:new()
			self = setmetatable({}, self)
			
			Object:Assign(self, tostring(self))
			
			self._index = insert(End._ifs, self)
			
			--insert(End._pcMap, var, self)
			
			self._output = self:Write()
			
			return self
		end
		
		function End:Get(index)
			local fastcall = self._pcMap[block]
			fastcall = fastcall and fastcall[index]
			
			if fastcall then
				for key, value in pairs(fastcall._registers) do
					value._references = value._references + 1
				end

				fastcall._references = fastcall._references + 1
			end

			return fastcall
		end
		
		function End:Write()
			return ("end")
		end
	
		End.IsA = Object.IsA
	end

	do
		NameCall.__index = NameCall
		NameCall.__tostring = function() return "NameCall" end
		NameCall._calls = {}
		NameCall._pcMap = {}
		
		function NameCall:new(var, name, func, args, returns, block)
			self = setmetatable({}, self)
			self._var = var
			self._name = name
			self._func = func
			self._args = args
			self._returns = returns
			self._block = block
			self._argsWritten = 0
			self._argWritten = ""

			Object:Assign(self, tostring(self))

			if not NameCall._calls[block] and not NameCall._pcMap[block] then
				NameCall._calls[block] = {}
				NameCall._pcMap[block] = {}
			end

			self._index = insert(NameCall._calls[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(NameCall._pcMap[block], value, self)
				end
			else
				insert(NameCall._pcMap[block], var, self)
			end

			self._output = self:Write()

			return self
		end
		
		function NameCall:Insert(arg)
			if not self._args then self._args = {} end
			
			table.insert(self._args, arg)
			
			if self._output then
				if not (self._argWritten == "") then
					self._argWritten = self._argWritten .. ", "
				end

				if false and (not arg._isArg and arg._val:IsA("Plain")) then
					arg._output = nil

					arg = arg._val._output
				else
					arg = arg._registers[1]._output
				end

				local regex = "%s:%s(%s)"

				self._argWritten = self._argWritten .. ("%s"):format(arg)
				
				self._output = regex:format((self._name:IsA("Declaration") and self._name._registers[1]._output) or (self._name:IsA("Register") and self._name._output), self._func, self._argWritten)
			else
				self._output = self:Write()
			end	
		end

		function NameCall:Get(index, block)
			local namecall = self._pcMap[block]
			namecall = namecall and namecall[index]
			
			if namecall then
				for key, value in pairs(namecall._registers) do
					value._references = value._references + 1
				end

				namecall._references = namecall._references + 1
			end

			return namecall
		end
		
		function NameCall:Write()
			if type(self._args) == "table" then
				local regex = "%s:%s(%s"
				
				for i = 1, #self._args do
					local arg = self._args[i]

					self._argsWritten = self._argsWritten + 1

					if false and (not arg._isArg and arg._val:IsA("Plain")) then
						arg._output = nil

						arg = arg._val._output
					else
						arg = arg._registers[1]._output
					end
					
					self._argWritten = self._argWritten .. ("%s"):format(arg)

					if i < #self._args then
						self._argWritten = self._argWritten .. ", "
					end
				end
				
				regex = regex .. ")"
				
				return regex:format((self._name:IsA("Declaration") and self._name._registers[1]._output) or (self._name:IsA("Register") and self._name._output), self._func, self._argWritten)
			else
				return ("%s:%s(%s)"):format((self._name:IsA("Declaration") and self._name._registers[1]._output) or (self._name:IsA("Register") and self._name._output), self._func, self._argWritten)
			end
		end

		NameCall.IsA = Object.IsA
	end

	do
		Closure.__index = Closure
		Closure.__tostring = function() return "Closure" end
		Closure._closures = {}
		Closure._pcMap = {}
		
		function Closure:new(var, func, args, hasVararg, functionId, body, block)
			self = setmetatable({}, self)
			self._var = var
			self._func = func
			self._args = args
			self._hasVararg = hasVararg
			self._functionId = functionId
			self._body = body
			self._block = block

			Object:Assign(self, tostring(self))

			if not Closure._closures[block] and not Closure._pcMap[block] then
				Closure._closures[block] = {}
				Closure._pcMap[block] = {}
			end

			self._index = insert(Closure._closures[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(Closure._pcMap[block], value, self)
				end
			else
				insert(Closure._pcMap[block], var, self)
			end
			
			self._output = self:Write()

			return self
		end

		function Closure:Get(index, block)
			local closure = self._pcMap[block]
			closure = closure and closure[index]
			
			if closure then
				for key, value in pairs(closure._registers) do
					value._references = value._references + 1
				end

				closure._references = closure._references + 1
			end

			return closure
		end
		
		function Closure:Renew(var, isLocal)
			self._renewed = true

			self._var = var
			
			self._output = (isLocal and "local " or "") .. self:Write()
		end

		function Closure:WriteTable(tbl, key)
			return ("function %s.%s(%s)"):format(tbl, key, self._arguments)
		end

		function Closure:Write()
			self._arguments = ""

			if self._args then
				local first = true
				for key, value in pairs(self._args) do
					if first then
						first = false

						self._arguments = self._arguments .. value._output
					else
						self._arguments = self._arguments .. ", " .. value._output
					end
				end

				if self._hasVararg then
					if first then
						self._arguments = self._arguments .. "..."
					else
						self._arguments = self._arguments .. ", ..."
					end
				end
			end

			if not self._renewed then
				self._declaration = Declaration:new(self._var, Plain:new(("function(%s) -- line: %s"):format(self._arguments, self._func and tostring(self._func.LineDefined) or "Unknown"), enum.KeywordType.Function), self._block)
				
				return self._declaration._output
			else
				return ("%s = function(%s) -- line: %s"):format(self._func and self._func.DebugName ~= "" and self._func.DebugName or tostring(self._var), self._arguments, self._func and tostring(self._func.LineDefined) or "Unknown")
			end
		end

		Closure.IsA = Object.IsA
	end

	do
		Block.__index = Block
		Block.__tostring = function() return "Block" end
		Block._blocks = {}
		Block._pcMap = {}

		function Block:new(parent, debugMode)
			self = setmetatable({}, self)
			self._statements = {}
			self._variables = {}
			self._localVariables = {}
			self._functions = {}
			self._line = {}
			self._calls = {}
			self._debugMode = debugMode

			self._parent = parent
			
			Object:Assign(self)

			self._index = insert(Block._blocks, self)

			return self
		end

		function Block:Variable(var)
			if #self._localVariables >= 1 then
				for key, value in pairs(self._localVariables) do
					if value == var then
						return true
					end
				end
				
				return false
			end
		end

		function Block:AddStatement(code, opcode, statement, pc)
			if self._debugMode then
				print("Block.AddStatement", self._address, code, opcode, statement._output, pc)
			end

			local Block = self

			local statementObj = {}
			--statementObj.__index = statementObj
			statementObj.__tostring = function() return "Statement" end

			statementObj._pc = pc

			setmetatable(statementObj, statementObj)

			Object:Assign(statementObj, tostring(statementObj))

			function statementObj:Code()
				if Block._statements[self._index] then
					return code
				end
			end
			
			function statementObj:OpCode()
				if Block._statements[self._index] then
					return opcode
				end
			end

			function statementObj:Value()
				if Block._statements[self._index] then
					return statement
				end
			end

			function statementObj:Remove()
				Block._statements[self._index] = nil
			end

			function statementObj:Add()
				self._index = insert(Block._statements, statementObj)
			end

			statementObj:Add()
			
			statementObj.IsA = Object.IsA

			insert(Block._pcMap, pc, statementObj)
		end

		function Block:Write()
			local str = ""

			for key, Block in pairs(self._statements) do
				local Statement = Block:Value()
				if Statement then
					str = str .. Statement

					str = str .. "\n"
				end
			end

			return str
		end

		function Block:AddVariable(var)
			table.insert(self._variables, var)
		end

		function Block:AddLocalVariable(var)
			table.insert(self._localVariables, var)
		end
		
		function Block:AddCall(index)
			table.insert(self._calls, index)
		end
		
		function Block:Exit()
			Block._blocks[self._index] = nil
		end

		Block.IsA = Object.IsA
	end

	do
		local reader, Decompile, lua = {}, {}, {}
		do
			function reader:ReadFunction(chunk, func, decompile, block, args, pcStart, pcEnd, increment, recurse, debugMode)
				return reader:ReadFunctions(chunk, func, decompile, block, args, pcStart, pcEnd, increment, recurse, debugMode)
			end
			function reader:ReadFunctions(chunk, func, decompile, block, args, pcStart, pcEnd, increment, recurse, debugMode)
				pcEnd = not pcEnd and func.sizeCode or pcEnd
			
				local BlockObj = Block
				
				local Block = block or BlockObj:new(block, debugMode)

				decompile:AddBlock(Block)

				local InnerBlockIndex = Object:AddInnerBlock(Block)

				-- print("ReadFunction", pcStart, pcEnd, Block._address, Block._parent and Block._parent._address)

				if recurse then
					recurse = recurse + 1
				end
				
				pcStart = pcStart or 0
				pcEnd = pcEnd or 0

				increment = increment or 0

				local remainder = 0

				local traversed = 0

				local index = pcStart

				while (index < pcEnd) do
					local Instruction = reader:ReadInstruction(func, index)
					local properties = Instruction:GetProperties()
					local OpCode = properties.Code
					
					local GetAux = function()
						return reader:ReadInstruction(func, index + 1)
					end
			
					local Lua = lua:new(index, Block)
					
					decompile:AddLua(Lua)
					
					if recurse then
						-- print(recurse, "reading", properties.Name, "recurse:", index, pcEnd)
					end

					-- print("[]" .. properties.Name)

					if OpCode == enum.OpCode.BREAK then
						local statement = Plain:new("break", enum.KeywordType.Break)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.LOADNIL then
						local target = Declaration:Get(Instruction:A(), Block)

						local statement = Declaration:new(Instruction:A(), Plain:new("nil", enum.KeywordType.Nil), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.LOADB then
						local target = Declaration:Get(Instruction:A(), Block)

						local statement = Declaration:new(Instruction:A(), Plain:new(tostring(Instruction:B() == 1), enum.KeywordType.Boolean), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.LOADN then
						local target = Declaration:Get(Instruction:A(), Block)

						local D = Instruction:D()

						if D > 2^31 and D < 2^33 then
							D = -(2^32 - D)
						end

						local statement = Declaration:new(Instruction:A(), Plain:new(tostring(D), enum.KeywordType.Number), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.LOADK
					or OpCode == enum.OpCode.LOADKX then
						local target = Declaration:Get(Instruction:A(), Block)

						local expression = decompile:ConstantToExpression(func.Constants[Instruction:D()] or func:GetConstant(index + 1))

						local statement = Declaration:new(Instruction:A(), Plain:new(tostring(expression), enum.KeywordType.Value), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.GETGLOBAL then
						local statement = Declaration:new(Instruction:A(), Plain:new(func:GetConstant(index + 1):Value(), enum.KeywordType.Value), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETGLOBAL then
						local constant = func:GetConstant(index + 1)

						local statement = Assignment:new(constant and constant:Value() or ("NOT FOUND; %d"):format(index + 1), Declaration:Get(Instruction:A(), Block), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.GETIMPORT then
						local target = func.Constants[Instruction:D()]
						local targetValue = target:Value()
						
						local tbl = nil
						local indexes = {}
						
						for i = 1, #targetValue do
							local value = targetValue[i]
							
							if i <= 1 then
								tbl = value.constant:Value()
							elseif value then
								table.insert(indexes, decompile:ConstantToExpression(value.constant))
							end
						end
						
						local statement = Declaration:new(Instruction:A(), TableIndex:new(tbl, indexes, Block), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETLIST then
						local tbldeclaration = Declaration:Get(Instruction:A(), Block)

						local tbl = tbldeclaration._val

						local indexes = {}
						
						local C = Instruction:C()
						
						for i = 1, C - 1 do
							local declaration = Declaration:Get(Instruction:B() + i - 1, Block)

							if declaration then
								local value = declaration._val

								declaration._redundant = true

								declaration._output = nil

								tbl:Insert(TableAssign:new(Declaration:Get(Instruction:B() + i - 1, Block), Plain:new(tostring(i), enum.KeywordType.Number), declaration._val, Block))

								tbldeclaration:Renew(tbl._variable, tbl)
							end
						end
					elseif OpCode == enum.OpCode.GETTABLE then
						local statement = Declaration:new(Instruction:A(), TableAssign:new(Declaration:Get(Instruction:B(), Block), Register:Get(Instruction:C(), Block), nil, Block), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETTABLE then
						local registerC = Register:Get(Instruction:C(), Block)

						local AddOriginalStatement = function()
							local register = Register:Get(Instruction:A(), Block)
										
							if register then
								register._redundant = true
		
								local statement = TableAssign:new(Declaration:Get(Instruction:B(), Block), registerC, register, Block)
		
								Block:AddStatement(properties.Name, OpCode, statement, index)
							end
						end

						local tbldeclaration = Declaration:Get(Instruction:B(), Block)

						local tbl = tbldeclaration and tbldeclaration._val

						if false and tbl and tbl:IsA("TableNew") then
							local closure = Closure:Get(Instruction:A(), Block)
							
							if closure and closure:IsA("Closure") then
								closure._output = closure:WriteTable(tbl._register._output, func:GetConstant(index + 1):Value())
							else
								local declaration = Declaration:Get(Instruction:A(), Block)

								if declaration then
									declaration._redundant = true

									if (
										declaration._val:IsA("Plain")
										or declaration._val:IsA("TableNew")
									) then
										declaration._output = nil

										tbl:Insert(TableAssign:new(Declaration:Get(Instruction:B(), Block), registerC, declaration._val, Block))

										tbldeclaration:Renew(tbl._variable, tbl)
									else
										AddOriginalStatement()
									end
								end
							end
						else
							AddOriginalStatement()
						end
					elseif OpCode == enum.OpCode.GETTABLEN then
						local statement = Declaration:new(Instruction:A(), TableAssign:new(Declaration:Get(Instruction:B(), Block), Plain:new(tostring(Instruction:C() + 1), enum.KeywordType.Number), nil, Block), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETTABLEN then
						local AddOriginalStatement = function()
							local register = Register:Get(Instruction:A(), Block)
										
							if register then
								register._redundant = true
		
								local statement = TableAssign:new(Declaration:Get(Instruction:B(), Block), Plain:new(tostring(Instruction:C() + 1), enum.KeywordType.Number), register, Block)
		
								Block:AddStatement(properties.Name, OpCode, statement, index)
							end
						end

						local tbldeclaration = Declaration:Get(Instruction:B(), Block)

						local tbl = tbldeclaration and tbldeclaration._val

						if tbl and tbl:IsA("TableNew") then
							local closure = Closure:Get(Instruction:A(), Block)
							
							if closure and closure:IsA("Closure") then
								closure._output = closure:WriteTable(tbl._register._output, func:GetConstant(index + 1):Value())
							else
								local declaration = Declaration:Get(Instruction:A(), Block)

								if declaration then
									declaration._redundant = true

									if (
										declaration._val:IsA("Plain")
										or declaration._val:IsA("TableNew")
									) then
										declaration._output = nil

										tbl:Insert(TableAssign:new(Declaration:Get(Instruction:B(), Block), Plain:new(tostring(Instruction:C() + 1), enum.KeywordType.Number), declaration._val, Block))

										tbldeclaration:Renew(tbl._variable, tbl)
									else
										AddOriginalStatement()
									end
								end
							end
						else
							AddOriginalStatement()
						end
					elseif OpCode == enum.OpCode.GETTABLEKS then
						local constant = func:GetConstant(index + 1) or func:GetConstant(index)

						local expression = decompile:ConstantToExpression(constant)

						local declaration = Declaration:Get(Instruction:B(), Block)

						local statement = Declaration:new(Instruction:A(), TableAssign:new(declaration or Register:Get(Instruction:B(), Block), Plain:new(tostring(expression), enum.KeywordType.Value), nil, Block), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETTABLEKS then
						local expression = decompile:ConstantToExpression(func:GetConstant(index + 1))

						local AddOriginalStatement = function()
							local register = Register:Get(Instruction:A(), Block)
										
							if register then
								register._redundant = true
								
								local declaration = Declaration:Get(Instruction:B(), Block)

								if not declaration then
									declaration = Declaration:new(Instruction:B(), Plain:new(("NOT FOUND; %d"):format(Instruction:B()), enum.KeywordType.Value), Block)
								end

								local statement = TableAssign:new(declaration, Plain:new(tostring(expression), enum.KeywordType.Value), register, Block)
		
								Block:AddStatement(properties.Name, OpCode, statement, index)
							end
						end

						local tbldeclaration = Declaration:Get(Instruction:B(), Block)

						local tbl = tbldeclaration and tbldeclaration._val

						if tbl and tbl:IsA("TableNew") then
							local closure = Closure:Get(Instruction:A(), Block)
							
							if closure and closure:IsA("Closure") then
								closure._output = closure:WriteTable(tbl._register._output, func:GetConstant(index + 1):Value())
							else
								local declaration = Declaration:Get(Instruction:A(), Block)

								if declaration then
									declaration._redundant = true

									if (
										declaration._val:IsA("Plain")
										or declaration._val:IsA("TableNew")
									) then
										declaration._output = nil

										tbl:Insert(TableAssign:new(Declaration:Get(Instruction:A(), Block), Plain:new(tostring(expression), enum.KeywordType.Value), declaration._val, Block))

										tbldeclaration:Renew(tbl._variable, tbl)
									else
										AddOriginalStatement()
									end
								end
							end
						else
							AddOriginalStatement()
						end
					elseif OpCode == enum.OpCode.NEWTABLE then
						local statement = Declaration:new(Instruction:A(), TableNew:new(Instruction:A(), nil, Block), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.DUPTABLE then
						local regex = "{"
						local args = {}
						
						local target = func.Constants[Instruction:D()]
						local targetValue = target:Value()
						
						for i = 0, #targetValue do
							local value = targetValue[i]
							
							if value then
								regex = regex .. "%s"
								
								if i < #targetValue then
									regex = regex .. ", "
								end

								table.insert(args, tostring(decompile:ConstantToExpression(value)))
							end
						end
						
						regex = regex .. "}"

						--regex:format(table.unpack(args))

						local statement = Declaration:new(Instruction:A(), TableNew:new(Instruction:A(), args, Block), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.MOVE then
						local GetTarget; GetTarget = (function(register, block)
							if block then
								local target = Declaration:Get(register, block)

								if not target then
									return GetTarget(register, block._parent)
								end

								return target, block
							end
						end)
						
						local target, block -- = GetTarget(Instruction:A(), Block)

						local declaration = Declaration:Get(Instruction:B(), Block)

						if target then
							--[[
							local newDeclaration = Declaration:new(Instruction:A(), Plain:new((not declaration and "not found" or declaration._registers[1]._output), enum.KeywordType.Reference), target._block)

							--newDeclaration._output = nil

							Block:AddStatement(properties.Name, OpCode, newDeclaration, index)
							--]]

							target._val = declaration._val
							target._moved = true

							-- target._output = nil
						end

						if not declaration then
							declaration = Declaration:new(Instruction:B(), Plain:new(("NOT FOUND; %d"):format(Instruction:B()), enum.KeywordType.Value), Block)
						end
						
						local statement = Declaration:new(Instruction:A(), Plain:new(not declaration and Register:Get(Instruction:B(), Block) or declaration._registers[1]._output, enum.KeywordType.Reference), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.GETVARARGS then
						local registers = {}
			
						local count = Instruction:B()
						
						if count <= 0 then
							table.insert(registers, Instruction:A())
						else
							for i = 0, count - 1 do
								if i >= 0 then
									local register = Instruction:A() + i
									
									table.insert(registers, Instruction:A() + i)
								end
							end
						end
						
						local statement = Declaration:new(registers, Plain:new("...", enum.KeywordType.Vararg), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.PREPVARARGS then
						-- Codeless
					elseif OpCode == enum.OpCode.ADD
					or OpCode == enum.OpCode.ADDK
					or OpCode == enum.OpCode.SUB
					or OpCode == enum.OpCode.SUBK
					or OpCode == enum.OpCode.SUBRK
					or OpCode == enum.OpCode.MUL
					or OpCode == enum.OpCode.MULK
					or OpCode == enum.OpCode.DIV
					or OpCode == enum.OpCode.DIVK
					or OpCode == enum.OpCode.DIVRK
					or OpCode == enum.OpCode.IDIV
					or OpCode == enum.OpCode.IDIVK
					or OpCode == enum.OpCode.MOD
					or OpCode == enum.OpCode.MODK
					or OpCode == enum.OpCode.POW
					or OpCode == enum.OpCode.POWK
					or OpCode == enum.OpCode.AND
					or OpCode == enum.OpCode.ANDK
					or OpCode == enum.OpCode.OR
					or OpCode == enum.OpCode.ORK then
						local K = (
							OpCode == enum.OpCode.ADDK
							or OpCode == enum.OpCode.SUBK
							or OpCode == enum.OpCode.MULK
							or OpCode == enum.OpCode.DIVK
							or OpCode == enum.OpCode.IDIVK
							or OpCode == enum.OpCode.MODK
							or OpCode == enum.OpCode.POWK
							or OpCode == enum.OpCode.ANDK
							or OpCode == enum.OpCode.ORK
						)

						local RK = (
							OpCode == enum.OpCode.DIVRK
							or OpCode == enum.OpCode.SUBRK
						)

						local right = (K and func.Constants[Instruction:C()] and decompile:ConstantToExpression(func.Constants[Instruction:C()])) or Instruction:C()
						local left = Instruction:B()
						
						local operation = BinaryExpression:GetBinaryOperation(OpCode)

						local rightValue = nil
						local leftValue = nil
						
						if RK then
							leftValue = left
						else
							local declaration = Declaration:Get(left, Block)

							leftValue = declaration and declaration._registers[1]._output or ("[NOT FOUND %s]"):format(tostring(left))
						end

						if K then
							rightValue = right
						else
							local declaration = Declaration:Get(right, Block)

							rightValue = declaration and declaration._registers[1]._output or ("[NOT FOUND %s]"):format(tostring(right))
						end

						local statement = Declaration:new(Instruction:A(), Operation:new(tostring(leftValue), BinaryExpression:BinaryOperationChar(operation), tostring(rightValue), Block), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.CONCAT then
						local statement = Declaration:new(Instruction:A(), Operation:new(Declaration:Get(Instruction:B(), Block)._registers[1]._output, "..", Declaration:Get(Instruction:C(), Block)._registers[1]._output, Block), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.NOT
					or OpCode == enum.OpCode.LENGTH
					or OpCode == enum.OpCode.MINUS then
						local condition
						
						if OpCode == enum.OpCode.NOT then
							condition = decompile:ConditionString(enum.Condition.Not)
						elseif OpCode == enum.OpCode.LENGTH then
							condition = decompile:ConditionString(enum.Condition.Len)
						elseif OpCode == enum.OpCode.MINUS then
							condition = decompile:ConditionString(enum.Condition.Min)
						end
			
						local statement = Declaration:new(Instruction:A(), Expression:new(condition, Register:Get(Instruction:B(), Block)._output, Block), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.JUMP
					or OpCode == enum.OpCode.JUMPIF 
					or OpCode == enum.OpCode.JUMPIFNOT
					or OpCode == enum.OpCode.JUMPIFEQ 
					or OpCode == enum.OpCode.JUMPIFNOTEQ 
					or OpCode == enum.OpCode.JUMPIFNOTLT
					or OpCode == enum.OpCode.JUMPIFLT
					or OpCode == enum.OpCode.JUMPIFNOTLE
					or OpCode == enum.OpCode.JUMPIFLE
					or OpCode == enum.OpCode.JUMPXEQKNIL
					or OpCode == enum.OpCode.JUMPXEQKB
					or OpCode == enum.OpCode.JUMPXEQKN
					or OpCode == enum.OpCode.JUMPXEQKS then
						(function()
							if false then
								local statement = Plain:new(("%s; %d; %d; %d; START: %d; END: %d"):format(properties.Name, index, index + Instruction:D(), Instruction:D(), pcStart, pcEnd))

								Block:AddStatement(properties.Name, OpCode, statement, index)

								return
							end

							if OpCode == enum.OpCode.JUMP then
								return
							end

							local NextInstruction = reader:ReadInstruction(func, index + 1)
			
							local auxUsed = false
							
							local condition
			
							if OpCode == enum.OpCode.JUMPIFNOT then
								condition = enum.Condition.If
							elseif OpCode == enum.OpCode.JUMPIF then
								condition = enum.Condition.Not
							end
			
							-- If the next instruction is a JUMPBACK instruction, then we must be dealing with a repeat..until loop.
							local NextProperties = NextInstruction:GetProperties() -- IS FAULTY
							local NextCode = NextProperties.Code
			
							if NextCode == enum.OpCode.JUMPBACK then -- repeat
								increment = increment + 1

								condition = decompile:InvertCondition(condition)
			
								local iOpCode = nil
			
								if condition == enum.Condition.Not then
									iOpCode = enum.OpCode.JUMPIFNOT
								elseif condition == enum.Condition.If then
									iOpCode = enum.OpCode.JUMPIF
								end
			
								local statement

								local block = BlockObj:new(Block, debugMode)
			
								-- Now we need to take all of the statements created after the initial program counter and add them to our block.
								
								local jmp = NextInstruction:D() -- + 2 is for JUMPIF and JUMPBACK

								if jmp > 2^31 and jmp < 2^33 then
									jmp = (2^32 - jmp)
								end
								
								for i = (index - jmp), index - 1 do
									statement = Block._pcMap[i];
									Block._pcMap[i] = nil
		
									if statement then
										block:AddStatement(statement:Code(), statement:OpCode(), statement:Value(), i);
										
										statement:Remove()
									end
								end
								
								local Condition
								
								if auxUsed then
									Condition = ("%s %s %s"):format(Declaration:Get(Instruction:A(), Block)._registers[1]._output, Operation, Declaration:Get(properties.Aux, Block)._registers[1]._output)
								else
									Condition = ("%s"):format(Declaration:Get(Instruction:A(), Block)._registers[1]._output)
								end

								local iOpCode
				
								if condition == enum.Condition.Not then
									iOpCode = enum.OpCode.JUMPIFNOT
								elseif condition == enum.Condition.If then
									iOpCode = enum.OpCode.JUMPIF
								end

								local ifStatement = IfElse:new(Instruction:A(), Condition, iOpCode, block, Block)

								statement = Repeat:new(ifStatement, Block)
								
								Block:AddStatement(properties.Name, OpCode, statement, index + 1)
			
								return
							end
			
							if OpCode ~= enum.OpCode.JUMPIFNOT and OpCode ~= enum.OpCode.JUMPIF then
								auxUsed = true
							end

							local ifStatement

							local Operation = BinaryExpression:GetBinaryOperation(OpCode)
							local OperationChar = BinaryExpression:BinaryOperationChar(Operation)
							
							local Condition
							
							if auxUsed then
								if properties.Aux >= 2^31 and properties.Aux <= 2^33 then
									properties.Aux = (2^31 - properties.Aux)
								end

								local Source = Declaration:Get(Instruction:A(), Block)
								Source = Source and Source._registers and Source._registers[1]._output or ("SOURCE NOT FOUND; %d; %d; %d; %d"):format(Instruction:A(), Instruction:B(), Instruction:C(), properties.Aux)

								local Right = Declaration:Get(properties.Aux, Block)
								Right = Right and Right._registers and Right._registers[1]._output or ("RIGHT NOT FOUND; %d; %d; %d; %d"):format(Instruction:A(), Instruction:B(), Instruction:C(), properties.Aux)

								if (Operation == enum.BinaryOperation.CompareEq)
								and (OpCode ~= enum.OpCode.JUMPIFNOTEQ) then
									if (OpCode == enum.OpCode.JUMPXEQKN)
									or (OpCode == enum.OpCode.JUMPXEQKS) then
										local constant = func.Constants[bit32.band(func.Instructions[index + 1]:Value(), 255)]

										Right = decompile:ConstantToExpression(constant)
									elseif (OpCode == enum.OpCode.JUMPXEQKNIL) then
										Right = "nil"
									elseif (OpCode == enum.OpCode.JUMPXEQKB) then
										Right = bit32.band(func.Instructions[index + 1]:Value(), 255) == 1
									end
								elseif (Operation == enum.BinaryOperation.CompareNe)
								and (OpCode ~= enum.OpCode.JUMPIFEQ) then
									local expression = func.Constants[func.Instructions[index + 1]:Value()]

									if not expression then
										expression = func.Instructions[index + 1]:Value()

										warn("right constant not found", expression)
									end

									Right = type(expression) == "table" and decompile:ConstantToExpression(expression) or expression
								else
									Right = Declaration:Get(func.Instructions[index + 1]:Value(), Block)._registers[1]._output
								end

								if not (Source ~= nil and OperationChar ~= nil and Right ~= nil) then
									print("if condition missing", Source, OperationChar, Right, properties.Aux, properties.Name, debug.traceback())
								end

								if Source == nil then
									Source = ("SOURCE NOT FOUND; %d; %d; %d; %d"):format(Instruction:A(), Instruction:B(), Instruction:C(), properties.Aux)
								end
								
								if Right == nil then
									Right = ("RIGHT NOT FOUND; %d; %d; %d; %d"):format(Instruction:A(), Instruction:B(), Instruction:C(), properties.Aux)
								end

								Condition = ("%s %s %s"):format(
									tostring(Source),
									tostring(OperationChar),
									tostring(Right)
								)
							else
								local declaration = Declaration:Get(Instruction:A(), Block)

								if not declaration then
									declaration = Declaration:new(Instruction:B(), Plain:new(("NOT FOUND; %d"):format(Instruction:B()), enum.KeywordType.Value), Block)
								end

								Condition = ("%s"):format(declaration._registers[1]._output)
							end

							local iOpCode
			
							if condition == enum.Condition.Not then
								iOpCode = enum.OpCode.JUMPIFNOT
							elseif condition == enum.Condition.If then
								iOpCode = enum.OpCode.JUMPIF
							end
							
							local decompile = Decompile:new()

							local block = BlockObj:new(Block, debugMode)

							local n_index = index + Instruction:D()

							NextInstruction = reader:ReadInstruction(func, n_index)
							NextProperties = NextInstruction:GetProperties() 
							NextCode = NextProperties.Code

							local StatingNextInstruction = false
							
							if (not NextInstruction.Stated) then
								if NextCode == enum.OpCode.JUMP
								or NextCode == enum.OpCode.JUMPBACK then
									StatingNextInstruction = true

									NextInstruction.Stated = true
								end
							end

							local for_min_index = (index + (auxUsed and 2 or 1))
							local for_max_index = (n_index + 1)

							local body, traversed, remainder = reader:ReadFunction(chunk, func, decompile, block, nil, for_min_index, for_max_index, nil, recurse or 0)

							ifStatement = IfElse:new(Instruction:A(), Condition, iOpCode, body, Block)
							
							increment = increment + traversed + remainder

							if StatingNextInstruction then
								if NextCode == enum.OpCode.JUMP then -- else statement
									local nn_index = n_index + NextInstruction:D()

									local decompile = Decompile:new()
				
									local block = BlockObj:new(Block, debugMode)

									local for_min_index = (n_index + 1)
									local for_max_index = (nn_index + 1)
									
									local body, traversed, remainder = reader:ReadFunction(chunk, func, decompile, block, nil, for_min_index, for_max_index, nil, recurse or 0)

									ifStatement._elseBody = body
									
									increment = increment + traversed + remainder

									if (ifStatement._elseBody and len(ifStatement._elseBody._statements) >= 2) then
										local Statement = ifStatement._elseBody._statements[0]
										local OpCode = Statement:OpCode()

										if OpCode == enum.OpCode.JUMPIF 
										or OpCode == enum.OpCode.JUMPIFNOT
										or OpCode == enum.OpCode.JUMPIFEQ 
										or OpCode == enum.OpCode.JUMPIFNOTEQ 
										or OpCode == enum.OpCode.JUMPIFNOTLT
										or OpCode == enum.OpCode.JUMPIFLT
										or OpCode == enum.OpCode.JUMPIFNOTLE
										or OpCode == enum.OpCode.JUMPIFLE
										or OpCode == enum.OpCode.JUMPXEQKNIL
										or OpCode == enum.OpCode.JUMPXEQKB
										or OpCode == enum.OpCode.JUMPXEQKN
										or OpCode == enum.OpCode.JUMPXEQKS then
											Statement = Statement:Value()

											if Statement:IsA("IfElse") then
												ifStatement._elseBody = Statement

												ifStatement._elseBody._elseIf = true
											end
										end
									end
								elseif NextCode == enum.OpCode.JUMPBACK then -- while loop
									increment = increment + 1

									local statement = While:new(ifStatement, Block)

									Block:AddStatement(properties.Name, OpCode, statement, n_index)
									
									return
								elseif NextCode == OpCode then
									--print("UH", ifStatement._output, NextCode, OpCode, properties.Name)
								end
							end

							Block:AddStatement(properties.Name, OpCode, ifStatement, index)
						end)()
					elseif OpCode == enum.OpCode.FASTCALL then
						Block._isFastcall = true

						-- FastCall:new(Instruction:A(), Block)
					elseif OpCode == enum.OpCode.NAMECALL then
						Block._isNamecall = true

						local NextInstruction = reader:ReadInstruction(func, index + 1)
						local properties = Instruction:GetProperties()
						local OpCode = properties.Code
						
						local vars = {}
						
						local A = NextInstruction:A()
						local B = NextInstruction:B()
						local C = NextInstruction:C()
						
						if C <= 0 then
							table.insert(vars, Instruction:A())
						else
							for i = 0, C - 1 do
								if i >= 0 then
									table.insert(vars, Instruction:A() + i)
								end
							end
						end

						local name = Declaration:Get(Instruction:B(), Block)

						if not name then
							name = Declaration:new(Instruction:B(), Plain:new(("NOT FOUND; %d"):format(Instruction:B()), enum.KeywordType.Value), Block)
						end

						local statement = Declaration:new(vars, NameCall:new(Instruction:A(), name, func:GetConstant(index + 1):Value(), nil, C, Block), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.CALL then
						local vars = {}
						local args = {}
						
						local Builtin = nil
						
						local A = Instruction:A()
						local B = Instruction:B()
						local C = Instruction:C()
						
						local Fastcall, Namecall

						if false and Block._isFastcall then
							--Fastcall = Fastcall or FastCall:Get(A, Block)

							Block._isFastcall = false

							Builtin = find(enum.BuiltinFunction, A)

							Declaration:new(A, Plain:new(tostring(Builtin), enum.KeywordType.Value), Block)

							Builtin = nil
							
							Instruction = reader:ReadInstruction(func, index + Instruction:C() + 1)
						end
						
						local function InsertArg(tbl, arg)
							if arg then
								if not Block._isNamecall then
									table.insert(tbl, arg)
								else
									Namecall = Namecall or NameCall:Get(A, Block)

									table.insert(tbl, arg)

									Namecall:Insert(arg)
								end
							end
						end
						
						local numArgs = (Instruction:B() > 0 and Instruction:B()) or (Register._top[Block] - (Instruction:A() - 1));

						for i = 1 + (Block._isNamecall and 1 or 0), numArgs - (Block._isNamecall and 1 or 1) do
							local declaration = Declaration:Get(A + i, Block)

							InsertArg(args, declaration)
						end

						if C <= 0 then
							table.insert(vars, A)
						else
							if C - 1 > 0 then
								for i = 0, C - 2 do
									if i >= 0 then
										table.insert(vars, A + i)
									end
								end
							else
								table.insert(vars, A)
							end
						end

						if not Block._isNamecall then
							local declaration = Declaration:Get(A, Block)

							if not declaration then
								declaration = Declaration:new(A, Plain:new(("NOT FOUND; %d"):format(A), enum.KeywordType.Value), Block)
							end

							local statement = Declaration:new(vars, Call:new(Builtin or declaration, args, Block), Block)
							statement._call = true

							Block:AddStatement(properties.Name, OpCode, statement, index)
						else
							--[[
							local numArgs = B > 0 and B - 1 or (Register._top[Block] - A) + 1;
							
							for i = 1, numArgs do
								table.insert(args, Declaration:Get((A + i - 1), Block)._registers[1]._output)
							end
							--]]
							
							Namecall = Namecall or NameCall:Get(A, Block)

							Block._isNamecall = false

							local declaration = Declaration:Get(A, Block)

							declaration:Decrement() -- since we have already referred to it when loading Namecall so we decrement it
							declaration._call = true
							
							local obj = Declaration:new(vars, Namecall, Block)._output

							declaration._output = obj
						end
					elseif OpCode == enum.OpCode.CAPTURE then
						-- Codeless
					elseif OpCode == enum.OpCode.NEWCLOSURE
					or OpCode == enum.OpCode.DUPCLOSURE then
						local args = {}

						local functionId = properties.Code == enum.OpCode.DUPCLOSURE and func.Constants[Instruction:D()]:Value() or Instruction:D()

						local newFunction = properties.Code == enum.OpCode.DUPCLOSURE and func.GlobalFunctions[functionId] or func:GetFunction(functionId)

						if func.DebugInfo ~= nil then
							for key, value in pairs(newFunction.DebugInfo.Locals) do
								args[value.Slot] = value
							end
						else
							for i = 1, newFunction.Parameters do
								args[i] = Plain:new(("%s%d"):format(settings.argument, i - 1), enum.KeywordType.Variable)
							end
						end

						local closure = Closure:new(Instruction:A(), newFunction, args, newFunction.IsVararg, functionId, nil, Block)

						local statement = Declaration:new(Instruction:A(), closure, Block)

						if newFunction.DebugName and newFunction.DebugName ~= "" then
							closure._debugname = newFunction.DebugName

							closure:Renew(newFunction.DebugName, true)

							local register = Register:Get(Instruction:A(), Block)

							register._output = register:Rewrite(newFunction.DebugName)
						end

						local expression

						local Upvalues = 0

						while Upvalues < newFunction.MaxUpvalues do
							index = index + 1

							local capture = func.Instructions[index]
							local captureProperties = capture:GetProperties()
							local captureType = capture:A()

							if (captureProperties.Code ~= enum.OpCode.CAPTURE) then
								error(("Expected capture instruction following NEWCLOSURE/DUPCLOSURE (fId: {%d}, code: {%d}, pc: {%d})"):format(func.Id, captureProperties.Code, index))
							end

							if captureType == enum.CaptureType.Reference and properties.Code == enum.OpCode.DUPCLOSURE then
								error("Invalid reference capture type when duplicating closure")
							elseif captureType == enum.CaptureType.Value then
								expression = Declaration:Get(capture:B(), Block)._registers[1]._output
							elseif captureType == enum.CaptureType.Upvalue then
								expression = func.Upvalues[capture:B()]
							else
								-- error(("Unknown capture type %d"):format(captureType))

								expression = Declaration:Get(capture:B(), Block)._registers[1]._output
							end

							Upvalues = Upvalues + 1

							local statement = Plain:new(("upvalue[%s_%s] = %s"):format(tostring(Upvalues), expression, expression), enum.KeywordType.Upvalue)

							Block:AddStatement(properties.Name, OpCode, statement, index)

							insert(newFunction.Upvalues, ("upvalue[%s_%s]"):format(tostring(Upvalues), expression))
						end

						local decompile = Decompile:new()

						local block = BlockObj:new(Block, debugMode)

						for i, v in pairs(args) do
							args[i] = Declaration:new(i - 1, v, block, true)
						end
						
						local body, traversed, remainder = reader:ReadFunction(chunk, newFunction, decompile, block, args, nil, newFunction.sizeCode, increment, recurse or 0)

						closure._body = body

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.GETUPVAL then
						local statement = Declaration:new(Instruction:A(), Plain:new(("upvalue[%s]"):format(func.Upvalues[Instruction:B()]), enum.KeywordType.Upvalue), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETUPVAL then
						local statement = Plain:new(("upvalue[%s] = %s"):format(func.Upvalues[Instruction:B()], Register:Get(Instruction:A(), Block)._output), enum.KeywordType.Upvalue)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.RETURN then
						local args = {}

						local A = Instruction:A()
						local B = Instruction:B()
						
						local numArgs = B > 0 and B - 1 or (Register._top[Block] - A) + 1;
						
						for i = 1, numArgs do
							table.insert(args, Declaration:Get((A + i - 1), Block)._registers[1]._output)
						end
						
						if true or (index + 1 < #func.Instructions or #args > 0) then
							local statement = Plain:new(("return %s"):format(table.concat(args, ", ")), enum.KeywordType.Return)
							
							Block:AddStatement(properties.Name, OpCode, statement, index)
						end
					elseif OpCode == enum.OpCode.FORNPREP then
						local Limit = Declaration:Get(Instruction:A(), Block)

						local Step = Declaration:Get(Instruction:A() + 1, Block)

						local Variable = Declaration:Get(Instruction:A() + 2, Block)

						local jmp = Instruction:D() -- + 2 is for JUMPIF and JUMPBACK

						if jmp > 2^31 and jmp < 2^33 then
							jmp = (2^32 - jmp)
						end

						local decompile = Decompile:new()

						local block = BlockObj:new(Block, debugMode)

						local for_min_index = (index + 1)
						local for_max_index = (index + jmp + 1)

						local body, traversed, remainder = reader:ReadFunction(chunk, func, decompile, block, nil, for_min_index, for_max_index, nil, recurse or 0)

						local statement = ForNumeric:new(Variable, Limit, Step, body, Block)

						increment = increment + traversed + remainder

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.FORGPREP 
					or OpCode == enum.OpCode.FORGPREP_INEXT 
					or OpCode == enum.OpCode.FORGPREP_NEXT then
						local vars = {}
						local vals = {}

						local A = Instruction:A()

						local Iterators = A + 2 -- - (OpCode == enum.OpCode.FORGPREP and 2 or 0)

						for i = A, Iterators do
							local declaration = Declaration:Get(i, Block)

							table.insert(vals, declaration)
						end

						local LoopInstruction = func.Instructions[index + Instruction:D() + 1]

						if LoopInstruction:Code() ~= enum.OpCode.FORGLOOP then
							error(("Expected FORGLOOP following for loop body got %s"):format(LoopInstruction:GetProperties().Name))
						end

						local VarCount = Instruction:Code() == enum.OpCode.FORGPREP_INEXT and 2 or func.Instructions[index + Instruction:D() + 2]:Value()

						-- Load all of the variables with placeholder values at at the third register. The first two are reserved for the VM.
						for i = 1, VarCount do
							local register = i + 2 + A

							local declaration = Declaration:new(register, Plain:new(tostring(register), enum.KeywordType.Variable), Block)

							table.insert(vars, declaration)
						end

						local jmp = Instruction:D()

						if jmp > 2^31 and jmp < 2^33 then
							jmp = (2^32 - jmp)
						end

						local decompile = Decompile:new()

						local block = BlockObj:new(Block, debugMode)

						local for_min_index = (index + 1)
						local for_max_index = (index + jmp + 1)

						local body, traversed, remainder = reader:ReadFunction(chunk, func, decompile, block, nil, for_min_index, for_max_index, nil, recurse or 0)

						local statement = ForGeneric:new(vars, vals, body, Block)

						increment = increment + traversed + remainder

						Block:AddStatement(properties.Name, OpCode, statement, index)
					end
					
					if properties.HasAux then
						local statement = Aux:new(GetAux())
			
						index = index + 1
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					end
					
					local nextindex = index + 1 + increment

					if nextindex > pcEnd then
						remainder = nextindex - pcEnd
					end

					index = nextindex

					increment = 0

					traversed = traversed + 1
				end
				
				Object:RemoveInnerBlock(InnerBlockIndex)

				-- Block:Exit()
				
				return Block, pcEnd - pcStart, remainder
			end
			function reader:ReadInstruction(func, index)
				return func.Instructions[index]
			end
		end
		do
			Decompile.__index = Decompile

			Decompile.LocalIdCounter = 0
			Decompile.ClosureIdCounter = 0
			Decompile.UpvalueIdCounter = 0
			
			function Decompile:new()
				self = setmetatable({}, self)
				self._output = ""
				self._lua = {}
				self._blocks = {}
				self._innerBlocks = {}
				self._processed = {}
				
				return self
			end
			
			function Decompile:OpCode(opcode, lua)
				local code = lua[opcode]
				
				if code then
					self._output = self._output .. lua:Indent() .. code
					
					self._output = self._output .. lua:NewLine()
				end
			end
			
			function Decompile:Concat(input, newline)
				local _Code, _Newline, _Tabs = "", "", ""

				if not newline then
					_Code, _Newline, _Tabs = self:OpCodeParse(self._value, self._key)

					newline = _Newline
				end

				input = input:gsub("\n", ("\n%s"):format(("\t"):rep(5 + self._inBlocks)))

				self._output = self._output .. self._lastPrefixConcat .. input .. self._lastSuffixConcat
 
				self._output = self._output .. newline
			end

			function Decompile:PreConcat(Statement, pc)
				local Redundant = self:Redundance(Statement)

				local _Code, _Newline, _Tabs = "", "", ""

				if settings.KeepRedundance or not Redundant then
					_Code, _Newline, _Tabs = self:OpCodeParse(self._value, self._key)

					pc = pc or self._value._pc

					self._lastPrefixConcat = (settings.OpCodes and (_Code or "nil") or "") .. ("\t"):rep(self._inBlocks)
					self._lastSuffixConcat = (settings.ShowRedundance and Redundant and " -- [REDUNDANT]" or "")

					if type(Statement._output) == "table" then
						self:Concat(Statement._output._output)
					else
						if Statement._output then
							self:Concat(Statement._output)
						end
					end
				end
			end

			function Decompile:StateBlock(Block, debugMode)
				if true or not self._processed[Block] then
					self._processed[Block] = Block

					self._inBlocks = self._inBlocks and self._inBlocks + 1 or 1
					
					if debugMode then
						print("Reading Block", Block._address, len(Block._statements))
					end

					for key = 1, len(Block._statements) do
						local value = Block._statements[(key - 1)]
						local Statement = value and value:Value()
						
						if Statement then
							self._key = (key - 1)
							self._value = value
							
							local Handler = {}

							Handler.Block = (function(_self, Statement)
								self:StateBlock(Statement)
							end)

							Handler.Closure = (function(_self, Statement)
								self:PreConcat(Statement, value._pc)

								self:StateBlock(Statement._body)

								self:PreConcat(Plain:new("end", enum.KeywordType.End), value._pc)
							end)

							Handler.IfElse = (function(_self, Statement)
								self:PreConcat(Statement, value._pc)
								
								self:StateBlock(Statement._body)

								Handler:ElseBody(Statement._elseBody)

								self:PreConcat(Plain:new("end", enum.KeywordType.End), value._pc)
							end) do
								Handler.ElseBody = (function(_self, elseBody)
									if elseBody then
										if elseBody:IsA("IfElse") then
											self:PreConcat(Plain:new(("else%s"):format(elseBody._output), enum.KeywordType.ElseIf), value._pc)

											self:StateBlock(elseBody._body)

											if elseBody._elseBody then
												Handler:ElseBody(elseBody._elseBody)
											end
										else
											self:PreConcat(Plain:new("else"), value._pc)

											self:StateBlock(elseBody)
										end
									end
								end)
							end

							Handler.ForNumeric = (function(_self, Statement)
								self:PreConcat(Statement, value._pc)
									
								self:StateBlock(Statement._body)
								
								self:PreConcat(Plain:new("end", enum.KeywordType.End), value._pc)
							end)

							Handler.ForGeneric = (function(_self, Statement)
								self:PreConcat(Statement, value._pc)
									
								self:StateBlock(Statement._body)
								
								self:PreConcat(Plain:new("end", enum.KeywordType.End), value._pc)
							end)

							Handler.While = (function(_self, Statement)
								self:PreConcat(Statement, value._pc)
								
								self:StateBlock(Statement._ifStatement._body)
								
								self:PreConcat(Plain:new("end", enum.KeywordType.End), value._pc)
							end)

							Handler.Repeat = (function(_self, Statement)
								--[[
								local PeekStatement = Statement._ifStatement._body._statements[len(Statement._ifStatement._body._statements) - 1]

								if PeekStatement and PeekStatement:IsA("Repeat") then
									Statement._ifStatement._body._statements[len(Statement._ifStatement._body._statements) - 1] = nil
								end
								--]]

								self:PreConcat(Plain:new("repeat", enum.KeywordType.Repeat), value._pc)

								self:StateBlock(Statement._ifStatement._body)
								
								self:PreConcat(Statement, value._pc)
							end)

							Handler.General = (function(_self, Statement)
								if debugMode then
									print(Statement, Statement._val, Statement._val and Statement._val._address, Statement._output)
								end

								self:PreConcat(Statement, value._pc)
							end)

							if not Statement:IsA("Aux") then
								if Statement:IsA("Block") then
									Handler:Block(Statement)
								elseif Statement:IsA("Closure") then
									Handler:Closure(Statement)
								elseif Statement:IsA("IfElse") then
									Handler:IfElse(Statement)
								elseif Statement:IsA("ForNumeric") then
									Handler:ForNumeric(Statement)
								elseif Statement:IsA("ForGeneric") then
									Handler:ForGeneric(Statement)
								elseif Statement:IsA("While") then
									Handler:While(Statement)
								elseif Statement:IsA("Repeat") then
									Handler:Repeat(Statement)
								else
									if Statement:IsA("Declaration") then
										if Statement._val:IsA("Closure") then
											Handler:Closure(Statement._val)
										else
											Handler:General(Statement)
										end
									else
										Handler:General(Statement)
									end
								end
							end
						else
							if debugMode then
								print("Found nothing")
							end
						end
					end

					self._prevBlock = Block
					
					self._inBlocks = self._inBlocks - 1
				else
					print("PROCESSED")
				end
			end
			
			function Decompile:State()
				local Block = self._blocks

				for key = 0, len(Block) - 1 do
					local Block = Block[key]
					
					if Block then
						if Block._statements then
							self:StateBlock(Block)
						else
							error("No statements found?")
						end
					else
						error("No block found?")
					end
				end
			end

			function Decompile:Redundance(statement)
				if statement._redundant then return true end
				
				if statement:IsA("Declaration") then
					if statement._redundance then
						if statement._call then
							for key, value in pairs(statement._registers) do
								if value._references == 1 then
									if not settings.KeepRedundance then
										--Namecall Call
										--statement._output = string.match(statement._output, " = (.+)") or statement._output

										return false
									end
								end
							end
						end

						for key, value in pairs(statement._registers) do
							if value._references == 2 then
								return true
							end
						end
					end
				end

				return false
			end

			function Decompile:OpCodeParse(statement, pc)
				local _Code = statement:Code()
				local _Newline = "\n"
				local _Tabs = "\t"

				if settings.OpCodes and _Code then
					pc = ("%d"):format(pc)

					local codetabs = math.floor(((((4 * 5) - 1) - #_Code) / 4))

					_Tabs = _Tabs:rep(codetabs)

					local pctabs = math.floor(((((4 * 2) - 1) - #pc) / 4))

					_Code = _Code .. _Tabs .. pc .. ("\t"):rep(pctabs)
					
					self._previousOpCode = enum.OpCode[statement:Code()]
				end

				return _Code, _Newline, _Tabs
			end

			function Decompile:AddInnerBlock(block)
				table.insert(self._innerBlocks, block)

				return #self._innerBlocks
			end

			function Decompile:RemoveInnerBlock(index)
				table.remove(self._innerBlocks, index)
			end

			function Decompile:AddBlock(block)
				insert(self._blocks, block)
			end

			function Decompile:AddLua(lua)
				insert(self._lua, lua)
			end

			function Decompile:InvertCondition(Condition)
				if Condition == enum.Condition.If then
					return enum.Condition.Not
				elseif Condition == enum.Condition.Not then
					return enum.Condition.If
				end
			end
			
			function Decompile:ConditionString(Condition)
				if Condition == enum.Condition.If then
					return ""
				elseif Condition == enum.Condition.Not then
					return "not "
				elseif Condition == enum.Condition.Len then
					return "#"
				elseif Condition == enum.Condition.Min then
					return "-"
				else
					return
				end
			end
			
			function Decompile:CreateRegisters(func)
				local declarations = {}
				
				if (func.DebugInfo ~= nil) then
					for key, value in pairs(func.DebugInfo.Locals) do
						local Declaration = self.Declaration:new()

						declarations[value.Slot] = Declaration:Local(value)
					end
				else
					for i = 0, func.Parameters do
						declarations = Declaration:Parameter(i, ("arg%d"):format(slot + 1), 0)
					end
				end

				local expressions = {}

				for key, value in pairs(declarations) do
					expressions[value.Key] = self.LocalExpression:new(nil, value.Block)
				end
			end

			function Decompile:GetCondition()
				
			end

			function Decompile:ConstantToExpression(constant)
				if not constant then
					print("constant not found", debug.traceback())
				end

				if (constant:Type() == enum.ConstantType.Nil) then
					return constant:Value() or "nil"
				elseif (constant:Type() == enum.ConstantType.Bool) then
					return constant:Value()
				elseif (constant:Type() == enum.ConstantType.Number) then
					return constant:Value()
				elseif (constant:Type() == enum.ConstantType.String) then
					return '"' .. constant:Value() .. '"'
				elseif (constant:Type() == enum.ConstantType.Import) then
					local import = ""

					local imports = constant:Value()

					for i = 1, #imports do
						import = import .. imports[i].constant:Value()

						if i < #constant:Value() then
							import = import .. "."
						end
					end
					
					return import
				elseif (constant:Type() == enum.ConstantType.Closure) then
					return constant:Value()
				elseif (constant:Type() == enum.ConstantType.Vector) then
					local values = {}
	
					for key, value in pairs(constant:Value()) do
						table.insert(values, value)
					end
	
					return ("Vector3.new(%s)"):format(table.concat(values, ", "))
				end

				print("ConstantToExpression", constant:Type())
			end

			function Decompile:Output()
				return self._output
			end
		end
		do
			lua.__index = lua
			
			function lua:new(index, Block)
				self = setmetatable({}, self)
				self._block = Block
				self._newlines = 1
				self._index = index

				return self
			end
			
			function lua:Indent()
				return ("\t"):rep(self._block._index - 1)
			end
			
			function lua:NewLine()
				if self:Namecall() then return "" end
				
				return ("\n"):rep(self._newlines)
			end
			
			function lua:Concat(index)
				
			end
			
			function lua:Assemble(opcode, code, ...)
				if code ~= "" then
					local Prefix = opcode .. ("\t"):rep(2)
					
					if enum.OpCode[opcode] == enum.OpCode.FASTCALL then
						self._block._fastcall = true
					elseif enum.OpCode[opcode] == enum.OpCode.NAMECALL then
						self._block._namecall = true
					elseif enum.OpCode[opcode] == enum.OpCode.CALL and (self._block._namecall or self._block._fastcall) then
						self._block._namecall = false
						self._block._fastcall = false
						
						Prefix = ""
					end
	
					local Local = self._local and "" or self._local == false and "local " or ""
					
					--self._block:AddStatement(opcode, Local .. code:format(...), self._index)
					
					--lua[enum.OpCode[opcode]] = Prefix .. Local .. code:format(...)
				end
			end

			function lua:Namecall()
				return self._block._namecall
			end
			
			function lua:Fastcall()
				return self._block._fastcall
			end

			function lua:Local(index)
				self._local = self._block:Variable(index)
				
				if not self._local then
					self._block:AddLocalVariable(index)
					
					return false
				end
				
				return true
			end
			
			function lua:TableIndex(value)
				return settings.variable, value
			end
		end
		
		local Decompile = Decompile:new()

		local Block = Block:new(nil, false)
		
		local Block = reader:ReadFunction(nil, Main, Decompile, Block, nil, 0, Main.sizeCode, nil, nil)
		
		Decompile:State()
		
		return Decompile:Output()
	end
end



return disassemble
