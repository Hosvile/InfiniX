
--[[
-- UnLuau (Atrexus) -- Unluau his project helped me in this project
-- Luau-UnLuau (Creator)

-- UnLuau to Luau and UnLuaus in lua

-- Created by Creator A.K.A. Hosvile (discord: hosvile)
--]]



local VSCode = false



if VSCode then
	_G.bit32 = bit32 or require("modules/bitwise").bit32
	_G.bit = bit or require("modules/bitwise").bit
end



local base64 = {}

local extract = _G.bit32 and _G.bit32.extract -- Lua 5.2/Lua 5.3 in compatibility mode
if not extract then
	if _G.bit then -- LuaJIT
		local shl, shr, band = _G.bit.lshift, _G.bit.rshift, _G.bit.band
		extract = function( v, from, width )
			return band( shr( v, from ), shl( 1, width ) - 1 )
		end
	elseif _G._VERSION == "Lua 5.1" then
		extract = function( v, from, width )
			local w = 0
			local flag = 2^from
			for i = 0, width-1 do
				local flag2 = flag + flag
				if v % flag2 >= flag then
					w = w + 2^i
				end
				flag = flag2
			end
			return w
		end
	else -- Lua 5.3+
		--extract = load[[return function( v, from, width )
			--return ( v >> from ) & ((1 << width) - 1)
		--end]]()
		
		extract = function( v, from, width )
			local w = 0
			local flag = 2^from
			for i = 0, width-1 do
				local flag2 = flag + flag
				if v % flag2 >= flag then
					w = w + 2^i
				end
				flag = flag2
			end
			return w
		end
	end
end


function base64.makeencoder( s62, s63, spad )
	local encoder = {}
	for b64code, char in pairs{[0]='A','B','C','D','E','F','G','H','I','J',
		'K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y',
		'Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n',
		'o','p','q','r','s','t','u','v','w','x','y','z','0','1','2',
		'3','4','5','6','7','8','9',s62 or '+',s63 or'/',spad or'='} do
		encoder[b64code] = char:byte()
	end
	return encoder
end

function base64.makedecoder( s62, s63, spad )
	local decoder = {}
	for b64code, charcode in pairs( base64.makeencoder( s62, s63, spad )) do
		decoder[charcode] = b64code
	end
	return decoder
end

local DEFAULT_ENCODER = base64.makeencoder()
local DEFAULT_DECODER = base64.makedecoder()

local char, concat = string.char, table.concat

function base64.encode( str, encoder, usecaching )
	encoder = encoder or DEFAULT_ENCODER
	local t, k, n = {}, 1, #str
	local lastn = n % 3
	local cache = {}
	for i = 1, n-lastn, 3 do
		local a, b, c = str:byte( i, i+2 )
		local v = a*0x10000 + b*0x100 + c
		local s
		if usecaching then
			s = cache[v]
			if not s then
				s = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[extract(v,6,6)], encoder[extract(v,0,6)])
				cache[v] = s
			end
		else
			s = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[extract(v,6,6)], encoder[extract(v,0,6)])
		end
		t[k] = s
		k = k + 1
	end
	if lastn == 2 then
		local a, b = str:byte( n-1, n )
		local v = a*0x10000 + b*0x100
		t[k] = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[extract(v,6,6)], encoder[64])
	elseif lastn == 1 then
		local v = str:byte( n )*0x10000
		t[k] = char(encoder[extract(v,18,6)], encoder[extract(v,12,6)], encoder[64], encoder[64])
	end
	return concat( t )
end

function base64.decode( b64, decoder, usecaching )
	decoder = decoder or DEFAULT_DECODER
	local pattern = '[^%w%+%/%=]'
	if decoder then
		local s62, s63
		for charcode, b64code in pairs( decoder ) do
			if b64code == 62 then s62 = charcode
			elseif b64code == 63 then s63 = charcode
			end
		end
		pattern = ('[^%%w%%%s%%%s%%=]'):format( char(s62), char(s63) )
	end
	b64 = b64:gsub( pattern, '' )
	local cache = usecaching and {}
	local t, k = {}, 1
	local n = #b64
	local padding = b64:sub(-2) == '==' and 2 or b64:sub(-1) == '=' and 1 or 0
	for i = 1, padding > 0 and n-4 or n, 4 do
		local a, b, c, d = b64:byte( i, i+3 )
		local s
		if usecaching then
			local v0 = a*0x1000000 + b*0x10000 + c*0x100 + d
			s = cache[v0]
			if not s then
				local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
				s = char( extract(v,16,8), extract(v,8,8), extract(v,0,8))
				cache[v0] = s
			end
		else
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			s = char( extract(v,16,8), extract(v,8,8), extract(v,0,8))
		end
		t[k] = s
		k = k + 1
	end
	if padding == 1 then
		local a, b, c = b64:byte( n-3, n-1 )
		local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
		t[k] = char( extract(v,16,8), extract(v,8,8))
	elseif padding == 2 then
		local a, b = b64:byte( n-3, n-2 )
		local v = decoder[a]*0x40000 + decoder[b]*0x1000
		t[k] = char( extract(v,16,8))
	end
	return concat( t )
end



local _Bytecode

_Bytecode = [[]]

-- Actions
-- _Bytecode = [[]]

-- _Bytecode = [[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]]

--

-- [[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]]

_Bytecode = [[]]

--_Bytecode = [[BgMNBXBhaXJzC0dldENoaWxkcmVuDEdldEF0dHJpYnV0ZQV0YWJsZQZpbnNlcnQaX2dldEFuaW1hdGlvbkluQ29sbGVjdGlvbnMORmluZEZpcnN0Q2hpbGQHRGVmYXVsdAR0eXBlBnN0cmluZw1HZXRBbmltYXRpb25zBnNjcmlwdApDb2xsZWN0aW9uAAMSAwAAAAAg/wMAAAAAAACkBAEAAAAAQFIFAQCfBAIEFwQWAA4IFQCpCQAAvAoIaAIAAACfCgIEZAoNAFIRAgC8Dw4SAwAAAJ8PAwIODwgAnjQDBQ4AAABSEAMAUhEOAKQPBgAAFECAnw8DAakJAQBuCvL/AgAAACsJAgBuBOn/AgAAAIIDAgAHAwEEAAAAQAMCAwMDBAMFBAAUQIAACwYBGAAAAQAAAAABBAEAAAABAAAAAAEAAAAAAAAB/QAH8wASDAAAAAAPBQEAAAA3/wUAAAMAAABSBgIADgYFAPsGAABSCAIAvAYGAwAAAACfBgMCUgcDAA4HBQD7BwAAUgkDALwHBwMAAAAAnwcDAlYIBAAOCAMA+wkAAE0ICToBAAAAxQUGBAEAAAC7KAEDUgcBAKQGAwAAACBAnwYCAvAGBwAEAACAUggFAFIJAQC8BgCNBQAAAJ8GBACCBgAAUgYBAMYHAADGCAAAZAYKAFINBQBSDgoAvAsAjQUAAACfCwQCHAwLAIwNAABgDQIADAAAAIILAgBuBvX/AgAAAP8GAAAAAAAAggYCAAYDBwMIAwkEAAAgQAMKAwYAIgsBGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAEAAAAAAAMAAAABAAAAAAEAAAAB/QAHAAAjAAAAAAMAAAECAA+jAAAApAEBAAAAAEBNAAEsAgAAAP8BAAAAAAAAwAIDADACAY0EAAAAwAIFABIAAAAwAgHQBgAAAIIBAgAHAwwEAAAAQAMNBgADBgYBAwsCAAEBAAEYAAEAAAAHAAIAABcAAAAQAQAAAAAC]]

--_Bytecode = [[BgMJBXByaW50BWhlbGxvB3dvcmxkIDEHd29ybGQgMgR0YXNrBHdhaXQGd2FpdGVkC2RpZG4ndCB3YWl0BXdlaXJkAAEDAAABAgAoowAAAKQAAQAAAABAbwECAJ8AAgGpAAAAVgAAAA4ABQCkAQEAAAAAQG8CAwCfAQIBZQAEAKQBAQAAAABAbwIEAJ8BAgGkAQcAABhQgJ8BAQIOAQUApAEBAAAAAEBvAggAnwECAYIAAQCkAQcAABhQgJ8BAQIrAQUApAEBAAAAAEBvAgkAnwECAYIAAQCkAQEAAAAAQG8CCgCfAQIBggABAAsDAQQAAABAAwIDAwMEAwUDBgQAGFCAAwcDCAMJAAEAARgAAQAAAAMCAgEAAAAAAgAAAAMAAAABAAAAAAEAAAABAAAAAAIAAAABAQAAAAAA]]

-- _Bytecode = [[BgMNC0xvY2FsRG9NYXRoDEdsb2JhbERvTWF0aAVMb2NhbAZHbG9iYWwFcHJpbnQFaGVsbG8Hd29ybGQgMQd3b3JsZCAyBHRhc2sEd2FpdAZ3YWl0ZWQLZGlkbid0IHdhaXQFd2VpcmQABQICAAAAAAGCAAMAAAAXAQEYABgAAAAAAwMAAAAAAYIABAAAABsCARgAHAAAAAABAAABAAADowAAAN0AAACCAAAAAAAfAwEYAAEAHwAAAAABAAABAAADowAAAN0AAACCAAAAAAAjBAEYAAEAIwAAAAADAAABAgAyowAAAKQAAQAAAABAbwECAJ8AAgGpAAAAVgAAAA4ABQCkAQEAAAAAQG8CAwCfAQIBZQAEAKQBAQAAAABAbwIEAJ8BAgGkAQcAABhQgJ8BAQIOAQUApAEBAAAAAEBvAggAnwECAWUADQCkAQcAABhQgJ8BAQIrAQUApAEBAAAAAEBvAgkAnwECAWUABACkAQEAAAAAQG8CCgCfAQIBwAELAMACDAAYAgA9DQAAAMACDgAYAgC7DwAAAMACEAAYAgDyEQAAAIIAAQASAwUEAAAAQAMGAwcDCAMJAwoEABhQgAMLAwwDDQYABgEDAgYCAwMGAwMEBAABAgMBAAEYAAEAAAADAgIBAAAAAAIAAAADAAAAAQAAAAABAAAAAQAAAAACAAAAAwQAAAQAAAQAAAIBAAAAAAQ=]]

-- _Bytecode = [[]]

-- _Bytecode = [[]]

-- Rivals: ItemLibrary
-- _Bytecode = [[BgPaBgpWaWV3TW9kZWxzBytSYW5kb20TSW1hZ2VIaWdoUmVzb2x1dGlvbgVJbWFnZRFHZXRWaWV3TW9kZWxJbWFnZQROYW1lBFNraW4fR2V0Vmlld01vZGVsSW1hZ2VGcm9tV2VhcG9uRGF0YQVUeXBlcwhhZGRfdHlwZQhTdGF0dXNlcwphZGRfc3RhdHVzBFNsb3QSSW1hZ2VEaWFnb25hbFJpZ2h0EUltYWdlRGlhZ29uYWxMZWZ0B0NsYXNzZXMLU2xvdFRvQ2xhc3MJYWRkX2NsYXNzBUFtbW9zDWFkZF9hbW1vX3R5cGUJSXNTcGVjaWFsCkRvdEVuYWJsZWQIRG90SW1hZ2UHRG90U2l6ZQtCYXJzRW5hYmxlZAtUb3BCYXJJbWFnZQpUb3BCYXJTaXplDkJvdHRvbUJhckltYWdlDUJvdHRvbUJhclNpemUMTGVmdEJhckltYWdlC0xlZnRCYXJTaXplDVJpZ2h0QmFySW1hZ2UMUmlnaHRCYXJTaXplGHJieGFzc2V0aWQ6Ly8xNTA4NTAxMTAwNgpDcm9zc2hhaXJzDWFkZF9jcm9zc2hhaXINSW1hZ2VDZW50ZXJlZA5Sb290UGFydE9mZnNldApBbmltYXRpb25zBkNGcmFtZQhpZGVudGl0eQVFcXVpcARJZGxlCVNwcmludGluZwdJbnNwZWN0C1JhcmVJbnNwZWN0BXBhaXJzDWFkZF92aWV3bW9kZWwLUmVsZWFzZVRpbWUEVHlwZQZTdGF0dXMFQ2xhc3MTV2Fsa1NwZWVkTXVsdGlwbGllcg5NYXhEb3VibGVKdW1wcw1Dcm9zc2hhaXJUeXBlE01vYmlsZUlucHV0U2V0dGluZ3MRUXVpY2tBdHRhY2tJbnB1dHMXUXVpY2tBdHRhY2tJbnB1dHNNb2JpbGUUSW5wdXRTcGFtbWluZ0VuYWJsZWQSQ3JpdGljYWxNdWx0aXBsaWVyDVN0YXJ0U2hvb3RpbmcLU3RhcnRBaW1pbmcOU3RhcnRSZWxvYWRpbmcPU3RhcnRJbnNwZWN0aW5nBUl0ZW1zCUl0ZW1PcmRlcgV0YWJsZQZpbnNlcnQJSVNfU0VSVkVSBHdhcm4cW0lURU1dIER1cGxpY2F0ZSBpdGVtIG5hbWU6IAhhZGRfaXRlbQZDdXN0b20KYWRkX2N1c3RvbQVTaG9vdANBaW0ORmluaXNoU2hvb3RpbmcIQ29vbGRvd24SVGhyb3dNYXhDaGFyZ2VUaW1lDVRocm93Rm9yY2VNaW4NVGhyb3dGb3JjZU1heAxUaHJvd0dyYXZpdHkQTG9iTWF4Q2hhcmdlVGltZQtMb2JGb3JjZU1pbgtMb2JGb3JjZU1heApMb2JHcmF2aXR5CVRocm93YWJsZQ1hZGRfdGhyb3dhYmxlDkF0dGFja0Nvb2xkb3duDEF0dGFja0RhbWFnZQtBdHRhY2tSZWFjaA1BdHRhY2tNYXhIaXRzE0hlYXZ5QXR0YWNrQ29vbGRvd24RSGVhdnlBdHRhY2tEYW1hZ2UQSGVhdnlBdHRhY2tSZWFjaBJIZWF2eUF0dGFja01heEhpdHMUSGVhdnlCYWNrc3RhYkVuYWJsZWQFTWVsZWUJYWRkX21lbGVlBlJlbG9hZApTaG9vdEJ1cnN0ElNob290QnVyc3RDb29sZG93bg1TaG9vdENvb2xkb3duC1Nob290RGFtYWdlC1Nob290UmVjb2lsDVNob290QWNjdXJhY3kUU2hvb3RFeHBsb3Npb25SYWRpdXMXU2hvb3RFeHBsb3Npb25Lbm9ja2JhY2sMU2hvb3RQZWxsZXRzC1Nob290U3ByZWFkCUlzUmF5Y2FzdBJSYXljYXN0UGllcmNlQ291bnQMSXNQcm9qZWN0aWxlFVByb2plY3RpbGVDbGllbnRTaWRlZA9Qcm9qZWN0aWxlU3BlZWQRUHJvamVjdGlsZUdyYXZpdHkRUHJvamVjdGlsZU1heEhpdHMVUHJvamVjdGlsZVNwYXduT2Zmc2V0FVByb2plY3RpbGVHcm93dGhTcGVlZBVQcm9qZWN0aWxlR3Jvd3RoTGltaXQSUHJvamVjdGlsZUxpZmV0aW1lCEFtbW9UeXBlB01heEFtbW8OTWF4QW1tb1Jlc2VydmUMQWltRk9WT2Zmc2V0CEFpbVNwZWVkD0FpbVNjb3BlUGVyY2VudBNBaW1TcHJlYWRNdWx0aXBsaWVyA25ldwNHdW4HYWRkX2d1bgZzdHJpbmcFbG93ZXIOU3RyaW5nTGVzc1RoYW4RSXRlbXNBbHBoYWJldGl6ZWQEc29ydAthbHBoYWJldGl6ZQRnYW1lEVJlcGxpY2F0ZWRTdG9yYWdlCkdldFNlcnZpY2UHcmVxdWlyZQdNb2R1bGVzCUNPTlNUQU5UUxBBbmltYXRpb25MaWJyYXJ5B1V0aWxpdHkZUVVJQ0tfQVRUQUNLX0lURU1fSU5ESUNFUxVRVUlDS19BVFRBQ0tfQ09PTERPV04fS0VFUF9RVUlDS19BVFRBQ0tfSE9MRF9EVVJBVElPTgZDaGFybXMIU3RhbmRhcmQFUHJpbWUHUHJpbWFyeRhyYnhhc3NldGlkOi8vMTcyMjU2NDk2NjgYcmJ4YXNzZXRpZDovLzE3MjI1NjUwMTI0CVNlY29uZGFyeRhyYnhhc3NldGlkOi8vMTcyMjU2NTA0ODgYcmJ4YXNzZXRpZDovLzE3MjI1NjUwNjk3GHJieGFzc2V0aWQ6Ly8xNzIyNTY1MDg1ORhyYnhhc3NldGlkOi8vMTcyMjU2NTExMDcYcmJ4YXNzZXRpZDovLzE3MjI1NjUxNDA1GHJieGFzc2V0aWQ6Ly8xNzIyNTY1MTU2NBhyYnhhc3NldGlkOi8vMTY1MzkxMzA1NjQFTGlnaHQYcmJ4YXNzZXRpZDovLzE2NTM5MTMwNDI4Bk1lZGl1bRhyYnhhc3NldGlkOi8vMTMyMjMxMjgyNTQFSGVhdnkYcmJ4YXNzZXRpZDovLzE2NTM5MTMwMjg4BlNoZWxscxhyYnhhc3NldGlkOi8vMTMyMjMzMTk5MjUHUm9ja2V0cxhyYnhhc3NldGlkOi8vMTM2OTU2MDIwMzgGQXJyb3dzGHJieGFzc2V0aWQ6Ly8xMzY3NzA5NTc4OQRGdWVsGHJieGFzc2V0aWQ6Ly8xNjUzODk5MjUyMQRCYWxsB0RlZmF1bHQEQmFycwNEb3QETm9uZQVVRGltMhhyYnhhc3NldGlkOi8vMTM0OTIyODE2NjkYcmJ4YXNzZXRpZDovLzE0ODEwNzg1NzA2GHJieGFzc2V0aWQ6Ly8xMzQ5MjI4MTU1MBhyYnhhc3NldGlkOi8vMTQ4MTA3ODU1NzQGU3ByZWFkGHJieGFzc2V0aWQ6Ly8xMzY5MzY4NTgzNRBTcHJlYWRIb3Jpem9udGFsBk1lZGtpdBhyYnhhc3NldGlkOi8vMTcxNjA4MDA3MzQYcmJ4YXNzZXRpZDovLzEzNzE3NDk3MzY4DG1lZGtpdF9lcXVpcAttZWRraXRfaWRsZQ1tZWRraXRfc3ByaW50Dm1lZGtpdF9pbnNwZWN0A1VzZQhVc2VRdWljawptZWRraXRfdXNlEG1lZGtpdF91c2VfcXVpY2sRU3Vic3BhY2UgVHJpcG1pbmUYcmJ4YXNzZXRpZDovLzE3MTYwNzk5NDE4GHJieGFzc2V0aWQ6Ly8xNzA5ODc3MzY4OAxGbGFtZXRocm93ZXIYcmJ4YXNzZXRpZDovLzE3MjU2MzQxMzkzGHJieGFzc2V0aWQ6Ly8xNzI1NjM0Mzg4NgZBbmdsZXMSZmxhbWV0aHJvd2VyX2VxdWlwEWZsYW1ldGhyb3dlcl9pZGxlFGZsYW1ldGhyb3dlcl9pbnNwZWN0B0dyZW5hZGUYcmJ4YXNzZXRpZDovLzE3MTYwODAxNDExGHJieGFzc2V0aWQ6Ly8xNDUyNjc3NzY5Mg1ncmVuYWRlX2VxdWlwDGdyZW5hZGVfaWRsZQ5ncmVuYWRlX3NwcmludA9ncmVuYWRlX2luc3BlY3QKVGhyb3dTdGFydAlUaHJvd0lkbGULVGhyb3dGaW5pc2gITG9iU3RhcnQHTG9iSWRsZQlMb2JGaW5pc2gbZ3JlbmFkZV90aHJvd19zdGFydF9waW5wdWxsEmdyZW5hZGVfdGhyb3dfaWRsZRRncmVuYWRlX3Rocm93X2ZpbmlzaBlncmVuYWRlX2xvYl9zdGFydF9waW5wdWxsEGdyZW5hZGVfbG9iX2lkbGUSZ3JlbmFkZV9sb2JfZmluaXNoB01vbG90b3YYcmJ4YXNzZXRpZDovLzE3MTYwODAwNTgzGHJieGFzc2V0aWQ6Ly8xNjg0ODczNjI5OAxtb2xvdG92X2lkbGUTZ3JlbmFkZV90aHJvd19zdGFydBFncmVuYWRlX2xvYl9zdGFydAlGbGFzaGJhbmcYcmJ4YXNzZXRpZDovLzE3MTYwODAxNTI5GHJieGFzc2V0aWQ6Ly8xNDY2NDQ4ODI1Mw1TbW9rZSBHcmVuYWRlGHJieGFzc2V0aWQ6Ly8xNzE2MDc5OTc2NxhyYnhhc3NldGlkOi8vMTYzNzMyODM1NzcFRmlzdHMYcmJ4YXNzZXRpZDovLzE3MTYwODAxNzQ1GHJieGFzc2V0aWQ6Ly8xNjU2MDA1MTMyMAtmaXN0c19lcXVpcApmaXN0c19pZGxlDGZpc3RzX3NwcmludA1maXN0c19pbnNwZWN0EEF0dGFja0FuaW1hdGlvbjEQQXR0YWNrQW5pbWF0aW9uMhVIZWF2eUF0dGFja0FuaW1hdGlvbjEXSGVhdnlBdHRhY2tBbmltYXRpb25IaXQNZmlzdHNfYXR0YWNrMQ1maXN0c19hdHRhY2syBUtuaWZlGHJieGFzc2V0aWQ6Ly8xNzE2MDgwMDk4MxhyYnhhc3NldGlkOi8vMTMxOTc1ODM1ODMLa25pZmVfZXF1aXAKa25pZmVfaWRsZQxrbmlmZV9zcHJpbnQNa25pZmVfaW5zcGVjdBJrbmlmZV9pbnNwZWN0X3JhcmUNa25pZmVfYXR0YWNrMQ1rbmlmZV9hdHRhY2syEmtuaWZlX2hlYXZ5YXR0YWNrMQhDaGFpbnNhdxhyYnhhc3NldGlkOi8vMTcxNjA4MDE4NzMYcmJ4YXNzZXRpZDovLzEzNzE3NDQ1NDEwDmNoYWluc2F3X2VxdWlwDWNoYWluc2F3X2lkbGUPY2hhaW5zYXdfc3ByaW50EGNoYWluc2F3X2luc3BlY3QJSG9sZFN0YXJ0CEhvbGRMb29wCkhvbGRGaW5pc2gQY2hhaW5zYXdfYXR0YWNrMRBjaGFpbnNhd19hdHRhY2syE2NoYWluc2F3X2hvbGRfc3RhcnQSY2hhaW5zYXdfaG9sZF9sb29wFGNoYWluc2F3X2hvbGRfZmluaXNoBkthdGFuYRhyYnhhc3NldGlkOi8vMTcxNjA4MDExNTgYcmJ4YXNzZXRpZDovLzEzOTY4MTM3MTk2DGthdGFuYV9lcXVpcAtrYXRhbmFfaWRsZQ5rYXRhbmFfc3ByaW50Mg5rYXRhbmFfaW5zcGVjdBNrYXRhbmFfaW5zcGVjdF9yYXJlC0RlZmxlY3RJZGxlCERlZmxlY3QxCERlZmxlY3QyCERlZmxlY3QzCERlZmxlY3Q0CERlZmxlY3Q1DmthdGFuYV9hdHRhY2sxDmthdGFuYV9hdHRhY2syE2thdGFuYV9kZWZsZWN0X2lkbGUPa2F0YW5hX2RlZmxlY3QxD2thdGFuYV9kZWZsZWN0Mg9rYXRhbmFfZGVmbGVjdDMPa2F0YW5hX2RlZmxlY3Q0D2thdGFuYV9kZWZsZWN0NQZTY3l0aGUYcmJ4YXNzZXRpZDovLzE3MTYwODAwMTg2GHJieGFzc2V0aWQ6Ly8xMzgzNDk5NTg1OBhyYnhhc3NldGlkOi8vMTgyMDA5NDM3OTAMc2N5dGhlX2VxdWlwC3NjeXRoZV9pZGxlDXNjeXRoZV9zcHJpbnQOc2N5dGhlX2luc3BlY3QOc2N5dGhlX2F0dGFjazEOc2N5dGhlX2F0dGFjazIGVHJvd2VsGHJieGFzc2V0aWQ6Ly8xNzE2MDc5OTE3MhhyYnhhc3NldGlkOi8vMTY1NjA1NDczODQMdHJvd2VsX2VxdWlwC3Ryb3dlbF9pZGxlDXRyb3dlbF9zcHJpbnQOdHJvd2VsX2luc3BlY3QFQnVpbGQOdHJvd2VsX2F0dGFjazEOdHJvd2VsX2F0dGFjazIMdHJvd2VsX2J1aWxkCUZsYXJlIEd1bhhyYnhhc3NldGlkOi8vMTcxNjA4MDE2MjcYcmJ4YXNzZXRpZDovLzEzMTk3NTgzODkyDmZsYXJlZ3VuX2VxdWlwDWZsYXJlZ3VuX2lkbGUPZmxhcmVndW5fc3ByaW50EGZsYXJlZ3VuX2luc3BlY3QGU2hvb3QxCkZpbmFsU2hvb3QLRW1wdHlSZWxvYWQPZmxhcmVndW5fc2hvb3QxD2ZsYXJlZ3VuX3JlbG9hZA1Bc3NhdWx0IFJpZmxlGHJieGFzc2V0aWQ6Ly8xNzE2MDY4MjczOBhyYnhhc3NldGlkOi8vMTMxOTc1ODQyNDESYXNzYXVsdHJpZmxlX2VxdWlwEWFzc2F1bHRyaWZsZV9pZGxlE2Fzc2F1bHRyaWZsZV9zcHJpbnQUYXNzYXVsdHJpZmxlX2luc3BlY3QTYXNzYXVsdHJpZmxlX3Nob290MRNhc3NhdWx0cmlmbGVfcmVsb2FkB0hhbmRndW4YcmJ4YXNzZXRpZDovLzE3MTYwODAxMjgyGHJieGFzc2V0aWQ6Ly8xMzE5NzU4MzY5Mw1oYW5kZ3VuX2VxdWlwDGhhbmRndW5faWRsZQ5oYW5kZ3VuX3NwcmludA9oYW5kZ3VuX2luc3BlY3QOaGFuZGd1bl9zaG9vdDETaGFuZGd1bl9zaG9vdF9maW5hbA5oYW5kZ3VuX3JlbG9hZBRoYW5kZ3VuX3JlbG9hZF9lbXB0eQtCdXJzdCBSaWZsZRhyYnhhc3NldGlkOi8vMTcxNjA4MDE5ODMYcmJ4YXNzZXRpZDovLzEzNDgyMjQzNDY2EGJ1cnN0cmlmbGVfZXF1aXAPYnVyc3RyaWZsZV9pZGxlEWJ1cnN0cmlmbGVfc3ByaW50EmJ1cnN0cmlmbGVfaW5zcGVjdBFidXJzdHJpZmxlX3Nob290MRFidXJzdHJpZmxlX3JlbG9hZAZTbmlwZXIYcmJ4YXNzZXRpZDovLzE3MTYwNzk5NTc0GHJieGFzc2V0aWQ6Ly8xMzE5NzU4MzA5OAxzbmlwZXJfZXF1aXALc25pcGVyX2lkbGUNc25pcGVyX3NwcmludA5zbmlwZXJfaW5zcGVjdA1zbmlwZXJfc2hvb3QxDXNuaXBlcl9yZWxvYWQTc25pcGVyX3JlbG9hZF9lbXB0eQNSUEcYcmJ4YXNzZXRpZDovLzE3MTYwODAyMjQzGHJieGFzc2V0aWQ6Ly8xMzE5NzU4MzQzNAlycGdfZXF1aXAIcnBnX2lkbGUKcnBnX3NwcmludAtycGdfaW5zcGVjdBBycGdfaW5zcGVjdF9yYXJlCnJwZ19zaG9vdDEKcnBnX3JlbG9hZAZTaG9ydHkYcmJ4YXNzZXRpZDovLzE3MTYwODAwMDkxGHJieGFzc2V0aWQ6Ly8xMzI1NTEwMzE3MgxzaG9ydHlfZXF1aXALc2hvcnR5X2lkbGUNc2hvcnR5X3NwcmludA5zaG9ydHlfaW5zcGVjdBNzaG9ydHlfaW5zcGVjdF9yYXJlDXNob3J0eV9zaG9vdDENc2hvcnR5X3JlbG9hZBNzaG9ydHlfcmVsb2FkX2VtcHR5B1Nob3RndW4YcmJ4YXNzZXRpZDovLzE3MTYwODAwMDA3GHJieGFzc2V0aWQ6Ly8xMzE5NzU4MzMwMg1zaG90Z3VuX2VxdWlwDHNob3RndW5faWRsZQ5zaG90Z3VuX3NwcmludA9zaG90Z3VuX2luc3BlY3QLUmVsb2FkU3RhcnQNUmVsb2FkU2VnbWVudAxSZWxvYWRGaW5pc2gQRW1wdHlSZWxvYWRTdGFydBJFbXB0eVJlbG9hZFNlZ21lbnQRRW1wdHlSZWxvYWRGaW5pc2gOc2hvdGd1bl9zaG9vdDEUc2hvdGd1bl9yZWxvYWRfc3RhcnQWc2hvdGd1bl9yZWxvYWRfc2VnbWVudBVzaG90Z3VuX3JlbG9hZF9maW5pc2gac2hvdGd1bl9yZWxvYWRfZW1wdHlfc3RhcnQcc2hvdGd1bl9yZWxvYWRfZW1wdHlfZmluaXNoMgNCb3cYcmJ4YXNzZXRpZDovLzE3MTYwODAyMDgwGHJieGFzc2V0aWQ6Ly8xMzcxNzIxMjMzMQlib3dfZXF1aXAIYm93X2lkbGUKYm93X3NwcmludAtib3dfaW5zcGVjdAZDaGFyZ2UKQ2hhcmdlTG9vcA1DaGFyZ2VSZWxlYXNlCmJvd19zaG9vdDEKYm93X3JlbG9hZApib3dfY2hhcmdlD2Jvd19jaGFyZ2VfbG9vcBJib3dfY2hhcmdlX3JlbGVhc2UDVXppGHJieGFzc2V0aWQ6Ly8xNzE2MDc5ODkwOBhyYnhhc3NldGlkOi8vMTQwMjA4Mjk3MDYJdXppX2VxdWlwCHV6aV9pZGxlCnV6aV9zcHJpbnQLdXppX2luc3BlY3QKdXppX3Nob290MQp1emlfcmVsb2FkCFJldm9sdmVyGHJieGFzc2V0aWQ6Ly8xNzE2MDgwMDI5ORhyYnhhc3NldGlkOi8vMTQwMjA4Mjk1MDAOcmV2b2x2ZXJfZXF1aXANcmV2b2x2ZXJfaWRsZQ9yZXZvbHZlcl9zcHJpbnQQcmV2b2x2ZXJfaW5zcGVjdAlRdWlja1Nob3QPcmV2b2x2ZXJfc2hvb3QxD3Jldm9sdmVyX3JlbG9hZBVyZXZvbHZlcl9yZWxvYWRfZW1wdHkScmV2b2x2ZXJfcXVpY2tzaG90DVBhaW50YmFsbCBHdW4YcmJ4YXNzZXRpZDovLzE3MTYwODUzNzk4GHJieGFzc2V0aWQ6Ly8xNjU2MDU0NzY3NhJwYWludGJhbGxndW5fZXF1aXARcGFpbnRiYWxsZ3VuX2lkbGUTcGFpbnRiYWxsZ3VuX3NwcmludBRwYWludGJhbGxndW5faW5zcGVjdBNwYWludGJhbGxndW5fc2hvb3QxE3BhaW50YmFsbGd1bl9yZWxvYWQJU2xpbmdzaG90GHJieGFzc2V0aWQ6Ly8xNzE2MDc5OTg4OBhyYnhhc3NldGlkOi8vMTcwOTUzMDYwNzkPc2xpbmdzaG90X2VxdWlwDnNsaW5nc2hvdF9pZGxlEHNsaW5nc2hvdF9zcHJpbnQRc2xpbmdzaG90X2luc3BlY3QQc2xpbmdzaG90X3Nob290MRBHcmVuYWRlIExhdW5jaGVyGHJieGFzc2V0aWQ6Ly8xNzI1MDQ1MzgxNBhyYnhhc3NldGlkOi8vMTcyNTA0NTYyMzAVZ3JlbmFkZWxhdW5jaGVyX2VxdWlwFGdyZW5hZGVsYXVuY2hlcl9pZGxlFmdyZW5hZGVsYXVuY2hlcl9zcHJpbnQXZ3JlbmFkZWxhdW5jaGVyX2luc3BlY3QWZ3JlbmFkZWxhdW5jaGVyX3Nob290MRZncmVuYWRlbGF1bmNoZXJfcmVsb2FkB01pbmlndW4YcmJ4YXNzZXRpZDovLzE3MjUwNDU4NjExGHJieGFzc2V0aWQ6Ly8xNzI1MDQ1Nzc3NQ1taW5pZ3VuX2VxdWlwDG1pbmlndW5faWRsZQ5taW5pZ3VuX3NwcmludA9taW5pZ3VuX2luc3BlY3QLQ2hhcmdlU3RhcnQMQ2hhcmdlRmluaXNoFG1pbmlndW5fY2hhcmdlX3N0YXJ0E21pbmlndW5fY2hhcmdlX2xvb3AVbWluaWd1bl9jaGFyZ2VfZmluaXNoBkV4b2d1bhhyYnhhc3NldGlkOi8vMTczNDQ3OTYzNzYYcmJ4YXNzZXRpZDovLzE3MzQ0Nzk3MzcwDGV4b2d1bl9lcXVpcAtleG9ndW5faWRsZQ1leG9ndW5fc3ByaW50DmV4b2d1bl9pbnNwZWN0DWV4b2d1bl9zaG9vdDENZXhvZ3VuX3JlbG9hZApGcmVlemUgUmF5GHJieGFzc2V0aWQ6Ly8xODQyOTU1MjMyOBhyYnhhc3NldGlkOi8vMTg0Mjk1NDkzMzEPZnJlZXplcmF5X2VxdWlwDmZyZWV6ZXJheV9pZGxlEGZyZWV6ZXJheV9zcHJpbnQRZnJlZXplcmF5X2luc3BlY3QQZnJlZXplcmF5X3Nob290MQVTYWJlchhyYnhhc3NldGlkOi8vMTc2NzIwNjIzNDEYcmJ4YXNzZXRpZDovLzE3NjcyMDg3NzU2EmthdGFuYV9zYWJlcl9lcXVpcBRrYXRhbmFfc2FiZXJfaW5zcGVjdBlrYXRhbmFfc2FiZXJfaW5zcGVjdF9yYXJlFGthdGFuYV9zYWJlcl9hdHRhY2sxFGthdGFuYV9zYWJlcl9hdHRhY2syGWthdGFuYV9zYWJlcl9kZWZsZWN0X2lkbGUVa2F0YW5hX3NhYmVyX2RlZmxlY3QxFWthdGFuYV9zYWJlcl9kZWZsZWN0MhVrYXRhbmFfc2FiZXJfZGVmbGVjdDMVa2F0YW5hX3NhYmVyX2RlZmxlY3Q0FWthdGFuYV9zYWJlcl9kZWZsZWN0NQxDb21wb3VuZCBCb3cYcmJ4YXNzZXRpZDovLzE3NjcyMjM0MjQyGHJieGFzc2V0aWQ6Ly8xNzY3MjIyOTAyMwlTbGltZSBHdW4YcmJ4YXNzZXRpZDovLzE3NjcyMDYyNDcyGHJieGFzc2V0aWQ6Ly8xNzY3MjA4NzU2MRxwYWludGJhbGxndW5fc2xpbWVndW5fc2hvb3QxDU51a2UgTGF1bmNoZXIYcmJ4YXNzZXRpZDovLzE3NjcyMDYxOTk1GHJieGFzc2V0aWQ6Ly8xNzY3MjA4ODkyNQdCbG9ic2F3GHJieGFzc2V0aWQ6Ly8xNzgyNTk2MzU4ORhyYnhhc3NldGlkOi8vMTc4MjU5NjE0MjUNTm90IFNvIFNob3J0eRhyYnhhc3NldGlkOi8vMTc2NzIwNjI1NzIYcmJ4YXNzZXRpZDovLzE3NjcyMDg3MzI1ClRvbyBTaG9ydHkYcmJ4YXNzZXRpZDovLzE4MTI5NTMxMjc2GHJieGFzc2V0aWQ6Ly8xODEyOTUzMjM0Mw9XaG9vcGVlIEN1c2hpb24YcmJ4YXNzZXRpZDovLzE3NjcyMDYyOTMzGHJieGFzc2V0aWQ6Ly8xNzY3MjA4NjcwNApEaXNjbyBCYWxsGHJieGFzc2V0aWQ6Ly8xNzY3MjA2MTc5NhhyYnhhc3NldGlkOi8vMTc2NzIwODkxMzYOUGxhc3RpYyBTaG92ZWwYcmJ4YXNzZXRpZDovLzE3NjcyMDYyMjAxGHJieGFzc2V0aWQ6Ly8xNzY3MjA4ODAxMghHb2FscG9zdBhyYnhhc3NldGlkOi8vMTc2NzIwNjMxNjUYcmJ4YXNzZXRpZDovLzE3NjcyMDg2Mzc4BVN0aWNrGHJieGFzc2V0aWQ6Ly8xNzY3MjA2MzA0OBhyYnhhc3NldGlkOi8vMTc2NzIwODY1MDIHQ2hhbmNsYRhyYnhhc3NldGlkOi8vMTc2NzIwNjA3OTUYcmJ4YXNzZXRpZDovLzE3NjcyMDg5NjAwBkNvZmZlZRhyYnhhc3NldGlkOi8vMTc2NzIwNjE1MzgYcmJ4YXNzZXRpZDovLzE3NjcyMDg5MzU4Fm1vbG90b3ZfY29mZmVlX2luc3BlY3QJV29uZGVyZ3VuGHJieGFzc2V0aWQ6Ly8xNzY3MjA2MDM2MBhyYnhhc3NldGlkOi8vMTc2NzIwODYwNTILU2luZ3VsYXJpdHkYcmJ4YXNzZXRpZDovLzE3Njc2ODc2NzU2GHJieGFzc2V0aWQ6Ly8xNzY3Njg3NTY1MBhleG9ndW5fc2luZ3VsYXJpdHlfZXF1aXAZZXhvZ3VuX3Npbmd1bGFyaXR5X3Nob290MRlleG9ndW5fc2luZ3VsYXJpdHlfcmVsb2FkDFBpeGVsIFNuaXBlchhyYnhhc3NldGlkOi8vMTc2NzYwODExOTYYcmJ4YXNzZXRpZDovLzE3Njc2MDgzNDAwGHNuaXBlcl9waXhlbHNuaXBlcl9lcXVpcBdzbmlwZXJfcGl4ZWxzbmlwZXJfaWRsZRlzbmlwZXJfcGl4ZWxzbmlwZXJfc3ByaW50GnNuaXBlcl9waXhlbHNuaXBlcl9pbnNwZWN0GXNuaXBlcl9waXhlbHNuaXBlcl9zaG9vdDEZc25pcGVyX3BpeGVsc25pcGVyX3JlbG9hZB9zbmlwZXJfcGl4ZWxzbmlwZXJfcmVsb2FkX2VtcHR5D0ZyYW1lc1BlclNlY29uZBdQbGF5QW5pbWF0aW9uc0luc3RhbnRseQ1Cb3hpbmcgR2xvdmVzGHJieGFzc2V0aWQ6Ly8xNzY3MjA2MDQ4NhhyYnhhc3NldGlkOi8vMTc2NzIwODk3NjEFQUstNDcYcmJ4YXNzZXRpZDovLzE3NjkxMTMyNzkzGHJieGFzc2V0aWQ6Ly8xNzY5MTEzNjEyOBhhc3NhdWx0cmlmbGVfYWs0N19zaG9vdDELRG9uJ3QgUHJlc3MYcmJ4YXNzZXRpZDovLzE3ODIxMjMzMjAzGHJieGFzc2V0aWQ6Ly8xNzgyMTI2NDQxOQlCcmllZmNhc2UYcmJ4YXNzZXRpZDovLzE4MTQyMTcyMDY3GHJieGFzc2V0aWQ6Ly8xODE0MjE3NDY5Nw1MYXNlcmd1biAzMDAwGHJieGFzc2V0aWQ6Ly8xNzY5MTEzMjk5NRhyYnhhc3NldGlkOi8vMTc2OTExMzY1MjAMRmlyZXdvcmsgR3VuGHJieGFzc2V0aWQ6Ly8xNzY5MTEzMjkxNxhyYnhhc3NldGlkOi8vMTc2OTExMzYzMjISUGl4ZWwgRmxhbWV0aHJvd2VyGHJieGFzc2V0aWQ6Ly8xNzc3MTc1MjEwNBhyYnhhc3NldGlkOi8vMTc3NzE3NTMxMTkkZmxhbWV0aHJvd2VyX3BpeGVsZmxhbWV0aHJvd2VyX2VxdWlwI2ZsYW1ldGhyb3dlcl9waXhlbGZsYW1ldGhyb3dlcl9pZGxlJmZsYW1ldGhyb3dlcl9waXhlbGZsYW1ldGhyb3dlcl9pbnNwZWN0D1NjeXRoZSBvZiBEZWF0aBhyYnhhc3NldGlkOi8vMTc4MjU5OTY1MzcYcmJ4YXNzZXRpZDovLzE3ODI1OTYxMjcyB0JsYXN0ZXIYcmJ4YXNzZXRpZDovLzE3ODIxMjM0NTU0GHJieGFzc2V0aWQ6Ly8xNzgyMTI2NTc1MBZoYW5kZ3VuX2JsYXN0ZXJfc2hvb3QxG2hhbmRndW5fYmxhc3Rlcl9zaG9vdF9maW5hbAxTd2FzaGJ1Y2tsZXIYcmJ4YXNzZXRpZDovLzE3ODIxMjMzODI4GHJieGFzc2V0aWQ6Ly8xNzgyMTI2NTAwNwlXYXRlciBVemkYcmJ4YXNzZXRpZDovLzE3ODIxMjMzNTkwGHJieGFzc2V0aWQ6Ly8xNzgyMTI2NDc4NBN1emlfd2F0ZXJ1emlfc2hvb3QxDERlc2VydCBFYWdsZRhyYnhhc3NldGlkOi8vMTc4MjEyMzQzNzIYcmJ4YXNzZXRpZDovLzE3ODIxMjY1NjAzGnJldm9sdmVyX2Rlc2VydGVhZ2xlX2VxdWlwG3Jldm9sdmVyX2Rlc2VydGVhZ2xlX3Nob290MSByZXZvbHZlcl9kZXNlcnRlYWdsZV9zaG9vdF9maW5hbBtyZXZvbHZlcl9kZXNlcnRlYWdsZV9yZWxvYWQhcmV2b2x2ZXJfZGVzZXJ0ZWFnbGVfcmVsb2FkX2VtcHR5DUVsZWN0cm8gUmlmbGUYcmJ4YXNzZXRpZDovLzE3ODIxMjM0MjM0GHJieGFzc2V0aWQ6Ly8xNzgyMTI2NTQ2OR5idXJzdHJpZmxlX2VsZWN0cm9yaWZsZV9zaG9vdDEeYnVyc3RyaWZsZV9lbGVjdHJvcmlmbGVfcmVsb2FkD0JhbGxvb24gU2hvdGd1bhhyYnhhc3NldGlkOi8vMTc4MjEyMzQ4MjMYcmJ4YXNzZXRpZDovLzE3ODIxMjY2MDkwHHNob3RndW5fYmFsbG9vbnNob3RndW5fZXF1aXAec2hvdGd1bl9iYWxsb29uc2hvdGd1bl9pbnNwZWN0HXNob3RndW5fYmFsbG9vbnNob3RndW5fc2hvb3QxJXNob3RndW5fYmFsbG9vbnNob3RndW5fcmVsb2FkX3NlZ21lbnQkc2hvdGd1bl9iYWxsb29uc2hvdGd1bl9yZWxvYWRfZmluaXNoKXNob3RndW5fYmFsbG9vbnNob3RndW5fcmVsb2FkX2VtcHR5X3N0YXJ0K3Nob3RndW5fYmFsbG9vbnNob3RndW5fcmVsb2FkX2VtcHR5X2ZpbmlzaDILRW1vamkgQ2xvdWQYcmJ4YXNzZXRpZDovLzE3ODIxMjM0MDc3GHJieGFzc2V0aWQ6Ly8xNzgyMTI2NTIzNwhTYW5kd2ljaBhyYnhhc3NldGlkOi8vMTc4MzgyMzIzMzMYcmJ4YXNzZXRpZDovLzE3ODM4MjMzMTk2FW1lZGtpdF9zYW5kd2ljaF9lcXVpcBRtZWRraXRfc2FuZHdpY2hfaWRsZRZtZWRraXRfc2FuZHdpY2hfc3ByaW50F21lZGtpdF9zYW5kd2ljaF9pbnNwZWN0E21lZGtpdF9zYW5kd2ljaF91c2UZbWVka2l0X3NhbmR3aWNoX3VzZV9xdWljawVSUEtFWRhyYnhhc3NldGlkOi8vMTgxNDEyMTgxMDQYcmJ4YXNzZXRpZDovLzE4MTQxMjIxOTEwDFRlbXBvcmFsIFJheRhyYnhhc3NldGlkOi8vMTg0Mjk1NTI1MDMYcmJ4YXNzZXRpZDovLzE4NDI5NTQ5NjYzHGZyZWV6ZXJheV90ZW1wb3JhbHJheV9zaG9vdDEDQVVHGHJieGFzc2V0aWQ6Ly8xODc3MDE5Mjg1MxhyYnhhc3NldGlkOi8vMTg3NzAyMDExMDIWYXNzYXVsdHJpZmxlX2F1Z19lcXVpcBVhc3NhdWx0cmlmbGVfYXVnX2lkbGUXYXNzYXVsdHJpZmxlX2F1Z19zcHJpbnQYYXNzYXVsdHJpZmxlX2F1Z19pbnNwZWN0F2Fzc2F1bHRyaWZsZV9hdWdfc2hvb3QxF2Fzc2F1bHRyaWZsZV9hdWdfcmVsb2FkC0VsZWN0cm8gVXppGHJieGFzc2V0aWQ6Ly8xODc2Njg2NTIxNBhyYnhhc3NldGlkOi8vMTg3NjY5MDgzMDEVdXppX2VsZWN0cm91emlfc2hvb3QxFXV6aV9lbGVjdHJvdXppX3JlbG9hZAhIYW5kIEd1bhhyYnhhc3NldGlkOi8vMTg4Mzc2NzA2MjQYcmJ4YXNzZXRpZDovLzE4ODM3Njc3NDIzFWhhbmRndW5faGFuZGd1bl9lcXVpcBRoYW5kZ3VuX2hhbmRndW5faWRsZRZoYW5kZ3VuX2hhbmRndW5fc3ByaW50F2hhbmRndW5faGFuZGd1bl9pbnNwZWN0FmhhbmRndW5faGFuZGd1bl9zaG9vdDEbaGFuZGd1bl9oYW5kZ3VuX3Nob290X2ZpbmFsFmhhbmRndW5faGFuZGd1bl9yZWxvYWQcaGFuZGd1bl9oYW5kZ3VuX3JlbG9hZF9lbXB0eQdTaGVyaWZmGHJieGFzc2V0aWQ6Ly8xODc3MDE5MjUwNxhyYnhhc3NldGlkOi8vMTg3NzAyMDA0NDkMRHluYW1pdGUgR3VuGHJieGFzc2V0aWQ6Ly8xODc2Njg2NTM4NBhyYnhhc3NldGlkOi8vMTg3NjY5MDg1NDcbZmxhcmVndW5fZHluYW1pdGVndW5fc2hvb3QxCEthcmFtYml0GHJieGFzc2V0aWQ6Ly8xODc2Njg2MzU4NhhyYnhhc3NldGlkOi8vMTg3NjY5MDcwNzkUa25pZmVfa2FyYW1iaXRfZXF1aXATa25pZmVfa2FyYW1iaXRfaWRsZRVrbmlmZV9rYXJhbWJpdF9zcHJpbnQWa25pZmVfa2FyYW1iaXRfaW5zcGVjdBZrbmlmZV9rYXJhbWJpdF9hdHRhY2sxFmtuaWZlX2thcmFtYml0X2F0dGFjazIba25pZmVfa2FyYW1iaXRfaGVhdnlhdHRhY2sxHmtuaWZlX2thcmFtYml0X2hlYXZ5YXR0YWNrX2hpdAxIeXBlciBTbmlwZXIYcmJ4YXNzZXRpZDovLzE4NzY2ODY0MDgxGHJieGFzc2V0aWQ6Ly8xODc2NjkwNzI2NhlzbmlwZXJfaHlwZXJzbmlwZXJfc2hvb3QxDUh5cGVyIFNob3RndW4YcmJ4YXNzZXRpZDovLzE4NzY4OTY4NDE5GHJieGFzc2V0aWQ6Ly8xODc2ODk3NDQxMBtzaG90Z3VuX2h5cGVyc2hvdGd1bl9zaG9vdDESU3BhY2VzaGlwIExhdW5jaGVyGHJieGFzc2V0aWQ6Ly8xODc2Njg2MDg2MBhyYnhhc3NldGlkOi8vMTg3NjY5MDQzNzUNTG92ZWx5IFNob3J0eRhyYnhhc3NldGlkOi8vMTg3NjY4NjIwMDAYcmJ4YXNzZXRpZDovLzE4NzY2OTA2MDExCEhhbmRzYXdzGHJieGFzc2V0aWQ6Ly8xODc2Njg2NDU4MxhyYnhhc3NldGlkOi8vMTg3NjkwMDI1OTYXY2hhaW5zYXdfaGFuZHNhd3NfZXF1aXAWY2hhaW5zYXdfaGFuZHNhd3NfaWRsZRhjaGFpbnNhd19oYW5kc2F3c19zcHJpbnQZY2hhaW5zYXdfaGFuZHNhd3NfaW5zcGVjdBljaGFpbnNhd19oYW5kc2F3c19hdHRhY2sxGWNoYWluc2F3X2hhbmRzYXdzX2F0dGFjazIcY2hhaW5zYXdfaGFuZHNhd3NfaG9sZF9zdGFydBtjaGFpbnNhd19oYW5kc2F3c19ob2xkX2xvb3AdY2hhaW5zYXdfaGFuZHNhd3NfaG9sZF9maW5pc2gJUmF2ZW4gQm93GHJieGFzc2V0aWQ6Ly8xODc2Njg2MTYyNxhyYnhhc3NldGlkOi8vMTg3NjY5MDUzMjEGQW5jaG9yGHJieGFzc2V0aWQ6Ly8xODc2Njg2Njc0MxhyYnhhc3NldGlkOi8vMTg3NjkwMjM5MzIVc2N5dGhlX2FuY2hvcl9hdHRhY2sxFXNjeXRoZV9hbmNob3JfYXR0YWNrMg5MaWdodG5pbmcgQm9sdBhyYnhhc3NldGlkOi8vMTg3Njg5NjgyNDEYcmJ4YXNzZXRpZDovLzE4NzY5MDAyMjc4GmthdGFuYV9saWdodG5pbmdib2x0X2VxdWlwIWthdGFuYV9saWdodG5pbmdib2x0X2luc3BlY3RfcmFyZRxrYXRhbmFfbGlnaHRuaW5nYm9sdF9hdHRhY2sxHGthdGFuYV9saWdodG5pbmdib2x0X2F0dGFjazIha2F0YW5hX2xpZ2h0bmluZ2JvbHRfZGVmbGVjdF9pZGxlHWthdGFuYV9saWdodG5pbmdib2x0X2RlZmxlY3QxHWthdGFuYV9saWdodG5pbmdib2x0X2RlZmxlY3QyHWthdGFuYV9saWdodG5pbmdib2x0X2RlZmxlY3QzHWthdGFuYV9saWdodG5pbmdib2x0X2RlZmxlY3Q0HWthdGFuYV9saWdodG5pbmdib2x0X2RlZmxlY3Q1DVdhdGVyIEJhbGxvb24YcmJ4YXNzZXRpZDovLzE4NzY2ODU5ODE5GHJieGFzc2V0aWQ6Ly8xODc2OTAwMTM5NwVUb3JjaBhyYnhhc3NldGlkOi8vMTg3NjY4NjAzNTkYcmJ4YXNzZXRpZDovLzE4NzY2OTAzNDgwBkNhbWVyYRhyYnhhc3NldGlkOi8vMTg3NjY4NjU2NDAYcmJ4YXNzZXRpZDovLzE4NzY2OTA4OTE1B0JhbGFuY2UYcmJ4YXNzZXRpZDovLzE4NzY2ODY2MTY4GHJieGFzc2V0aWQ6Ly8xODc2NjkwOTk2NA1HYXJkZW4gU2hvdmVsGHJieGFzc2V0aWQ6Ly8xODc2Njg2NDg3MxhyYnhhc3NldGlkOi8vMTg3NjY5MDgwNTgIQm9iYSBHdW4YcmJ4YXNzZXRpZDovLzE4NzY4ODMwNjYwGHJieGFzc2V0aWQ6Ly8xODc2ODgyODA3MhtwYWludGJhbGxndW5fYm9iYWd1bl9zaG9vdDEOQnJhc3MgS251Y2tsZXMYcmJ4YXNzZXRpZDovLzE4NzY2ODY2MDEyGHJieGFzc2V0aWQ6Ly8xODc2NjkwOTU4NxBVcmFuaXVtIExhdW5jaGVyGHJieGFzc2V0aWQ6Ly8xODc2Njg2MDExNBhyYnhhc3NldGlkOi8vMTg3NjY5MDI5ODMLTGFtZXRocm93ZXIYcmJ4YXNzZXRpZDovLzE4NzY2ODYyODIyGHJieGFzc2V0aWQ6Ly8xODc2NjkwNjc0MQdSYXkgR3VuGHJieGFzc2V0aWQ6Ly8xODc2Njg2MTQ1NBhyYnhhc3NldGlkOi8vMTg3NjY5MDUwODkGTGFwdG9wGHJieGFzc2V0aWQ6Ly8xODc3MDE2NDg2OBhyYnhhc3NldGlkOi8vMTg3NjY5MDY1MTATbWVka2l0X2xhcHRvcF9lcXVpcBJtZWRraXRfbGFwdG9wX2lkbGUUbWVka2l0X2xhcHRvcF9zcHJpbnQVbWVka2l0X2xhcHRvcF9pbnNwZWN0Gm1lZGtpdF9sYXB0b3BfaW5zcGVjdF9yYXJlEW1lZGtpdF9sYXB0b3BfdXNlF21lZGtpdF9sYXB0b3BfdXNlX3F1aWNrBlNwcmluZxhyYnhhc3NldGlkOi8vMTg3NjY4NjA2MTUYcmJ4YXNzZXRpZDovLzE4NzY2OTA0MDM1CkFxdWEgQnVyc3QYcmJ4YXNzZXRpZDovLzE4ODM3NjcwODA3GHJieGFzc2V0aWQ6Ly8xODgzNzY3NzcyNRtidXJzdHJpZmxlX2FxdWFidXJzdF9zaG9vdDEKQnViYmxlIFJheRhyYnhhc3NldGlkOi8vMTg3NjY4NjU4MTkYcmJ4YXNzZXRpZDovLzE4NzY5MDAyODY4GWZyZWV6ZXJheV9idWJibGVyYXlfZXF1aXANUGl4ZWwgTWluaWd1bhhyYnhhc3NldGlkOi8vMTg3NjY4NjE3OTgYcmJ4YXNzZXRpZDovLzE4NzY5MDAxNjQyGm1pbmlndW5fcGl4ZWxtaW5pZ3VuX2VxdWlwGW1pbmlndW5fcGl4ZWxtaW5pZ3VuX2lkbGUbbWluaWd1bl9waXhlbG1pbmlndW5fc3ByaW50HG1pbmlndW5fcGl4ZWxtaW5pZ3VuX2luc3BlY3QhbWluaWd1bl9waXhlbG1pbmlndW5fY2hhcmdlX3N0YXJ0IG1pbmlndW5fcGl4ZWxtaW5pZ3VuX2NoYXJnZV9sb29wIm1pbmlndW5fcGl4ZWxtaW5pZ3VuX2NoYXJnZV9maW5pc2gGS2V5dGhlGHJieGFzc2V0aWQ6Ly8xODc2Njg2MzEyNBhyYnhhc3NldGlkOi8vMTg3NjkwMjM2NjITc2N5dGhlX2tleXRoZV9lcXVpcBVzY3l0aGVfa2V5dGhlX2F0dGFjazEVc2N5dGhlX2tleXRoZV9hdHRhY2syCExvbmdIZWFsCVF1aWNrSGVhbAtIaXRib3hEZWxheQ9FeHBsb3Npb25SYWRpdXMPRXhwbG9zaW9uRGFtYWdlEkV4cGxvc2lvbktub2NrYmFjawVSZWFjaBBBaXJibGFzdENvb2xkb3duEUFpcmJsYXN0S25vY2tiYWNrF0FpcmJsYXN0UmVjb2lsS25vY2tiYWNrDURldG9uYXRlRGVsYXkKRmlyZVJhZGl1cwxGaXJlRHVyYXRpb24KQnVybkRhbWFnZQxCdXJuRHVyYXRpb24JQnVyblRpY2tzDUJsaW5kRHVyYXRpb24LU21va2VSYWRpdXMNU21va2VEdXJhdGlvbhFIb2xkU3BlZWRCb29zdE1pbhFIb2xkU3BlZWRCb29zdE1heBZIb2xkU3BlZWRCb29zdFJhbXBUaW1l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AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABXAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAoAAgEAAADJAAAAqQAAAAAP]]

-- _Bytecode = [[]]

-- _Bytecode = [[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]]

_Bytecode = [[]]

-- _Bytecode = [[BgM0B0JhcnJpZXIMV2FpdEZvckNoaWxkCkNhbkNvbGxpZGUGc2NyaXB0DUNvbGxpc2lvblBhcnQFQ2xvbmUGQ0ZyYW1lBFNpemUGUGFyZW50DkNyZWF0ZUNvbGxpZGVyCWlzSW5Mb2JieQxHZXRBdHRyaWJ1dGUKX0lzVmlld2luZw9CYXNlQ2FuY2VsRnJhbWUmQ2Fubm90IGVudGVyIGxvYmJ5IHdoaWxlIGluIHZpZXcgbW9kZSEJU2hvd1BvcHVwDElzSW5UdXRvcmlhbC9QbGVhc2UgZmluaXNoIHJlYWRpbmcgdHV0b3JpYWwgYmVmb3JlIGVudGVyaW5nIQ9DbG9zZUFsbFdpbmRvd3MFRW50ZXIKRmlyZVNlcnZlcglDb2xsaXNpb24ORmluZEZpcnN0Q2hpbGQDbmV3EmxvY2FsUGxheWVyRW50ZXJlZAdDb25uZWN0C0hhbmRsZUxvYmJ5CUdldFRhZ2dlZBZHZXRJbnN0YW5jZUFkZGVkU2lnbmFsBV9Jbml0BGdhbWUHUGxheWVycwpHZXRTZXJ2aWNlEVJlcGxpY2F0ZWRTdG9yYWdlDVN0YXJ0ZXJQbGF5ZXIMVHdlZW5TZXJ2aWNlEUNvbGxlY3Rpb25TZXJ2aWNlB3JlcXVpcmUHTW9kdWxlcwhQYWNrYWdlcwRab25lCUludGVyZmFjZQZMb2FkZXINV2luZG93SGFuZGxlcgRNaXNjDFBvcHVwSGFuZGxlcghHYW1lcGxheQ9UdXRvcmlhbEhhbmRsZXIKTmV0d29ya2luZwpMb2JieUV2ZW50BVN0b3J5CUNoYWxsZW5nZQAGBgEAAAAAHm8DAAC8AQDTAQAAAJ8BAwIOARcAqQIBADACAdMCAAAApAMEAAAAMEBNAgPVBQAAALwCAjoGAAAAnwICAk0DAYUHAAAAMAMChQcAAABNBAEvCAAAAG8FCQBDAwQFMAMCLwgAAAAwAAIkCgAAAIICAgDGAgAAggICAAsDAQMCAwMDBAQAADBAAwUDBgMHAwgHAAAAAAAAAAAzM3NAAAAAAAMJABcKARgAAAAAAgEAAAIAAAAAAAABAAAAAQAAAAAAAQACAwAYAAAAAAUBBAAAACdvAwAAvAEAEgEAAACfAQMCDgEBAIIAAQD7AgAATQECQgIAAAAOAQcA+wEBAG8DAwBvBAQAvAEBPgUAAACfAQQAggEAAPsCAABNAQKCBgAAAA4BBwD7AQEAbwMDAG8EBwC8AQE+BQAAAJ8BBACCAQAA+wEAALwBAZ0IAAAAnwECAfsBAgBvAwkA+wQDALwBAWsKAAAAnwEEAYIAAQALAwsDDAMNAw4DDwMQAxEDEgMTAxQDFQAsAAEYAAAAAAABAwAAAAEAAAAAAAABAAAAAQAAAAAAAAMAAAACAAAAAAABLQAAAAAHAQQAAAAzbwMAALwBAAMBAAAAnwEDAisBHgBvBAIAvAIA0wMAAACfAgMCDgIYAKkDAQAwAwLTBAAAAKQEBgAAAFBATQME1QcAAAC8AwM6CAAAAJ8DAgJNBAKFCQAAADAEA4UJAAAATQUCLwoAAABvBgsAQwQFBjAEAy8KAAAAMAADJAwAAABSAQMAZQABAMYBAAD7AwAATQID7w0AAABSAwEAnwICAk0DAqUOAAAA2QUAABICAQASAgIAEgIDABIAAAC8AwPHDwAAAJ8DAwGCAAEAEAMWAxcDAQMCAwMDBAQAAFBAAwUDBgMHAwgHAAAAAAAAAAAzM3NAAAAAAAMJAxgDGQMaAQEoGwEYEQAAAADvAAAAAgEAAAIAAAAAAAABAAAAAQAAAAAAAQACAAMFAAAAAAIAAAAAAAAAAAAPGAAAAAADAQEAAAAE+wEAAFICAACfAQIBggABAAAAQwABGAAAAAFEAAAAAAwAAwAAABz7AAAAxgEAAMYCAABkABUA+wUBAFIHBAC8BQUFAAAAAJ8FAwRkBQMA+woCAFILCQCfCgIBbgX8/wIAAAD7BQEAUgcEALwFBV4BAAAAnwUDAsAHAgASAgIAvAUFxwMAAACfBQMBbgDq/wIAAACCAAEABAMcAx0GAwMaAQM9HgEYAAAAAAEAAAAAAAEAAP8ABAAAAAAAAAAAAPsACT4AAAAAEAAAAQIAYqMAAACkAAEAAAAAQG8CAgC8AAAWAwAAAJ8AAwKkAQEAAAAAQG8DBAC8AQEWAwAAAJ8BAwKkAgEAAAAAQG8EBQC8AgIWAwAAAJ8CAwKkAwEAAAAAQG8FBgC8AwMWAwAAAJ8DAwKkBAEAAAAAQG8GBwC8BAQWAwAAAJ8EAwKkBQkAAACAQE0IAegKAAAATQcI5gsAAABNBgcjDAAAAJ8FAgKkBgkAAACAQE0KAugKAAAATQkKDw0AAABNCAkLDgAAAE0HCJwPAAAAnwYCAqQHCQAAAIBATQwC6AoAAABNCwwPDQAAAE0KCwsOAAAATQkK4RAAAABNCAkNEQAAAJ8HAgKkCAkAAACAQE0LAugKAAAATQoL3RIAAABNCQrSEwAAAJ8IAgJNCQHjFAAAAE0KCZkVAAAA/wsBAAAAAAD/DAAAAgAAAG8NFgBvDhcAxQwNAwEAAADADRgAwA4ZABIABQASAAYAEgAHABIACgDADxoAEgAMABIABAASAA4AMA8LTBsAAACCCwIAHAMfBAAAAEADIAMhAyIDIwMkAyUDJgQAAIBAAycDKAMpAyoDKwMsAy0DLgMvAzADMQMyAzMDNAYABgIGBAMeAwACBAEAARgAAAAAAAAAAQAAAAAAAQAAAAAAAQAAAAAAAQAAAAAAAgAAAAAAAAAAAgAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAQAAAAAAAAAAAgABAAIAAgABAQAAAxEAAAAAFQAAAAAADAEAAAAABQ==]]

-- _Bytecode = [[BgOuAQxUcmFuc3BhcmVuY3kFVHdlZW4JVHdlZW5UaW1lB0V4Y2x1ZGUOR2V0RGVzY2VuZGFudHMJQ2xhc3NOYW1lBUZyYW1lGEZpbmRGaXJzdEFuY2VzdG9yT2ZDbGFzcwV0YWJsZQRmaW5kBE5hbWUJVHdlZW5JbmZvA25ldwRFbnVtC0Vhc2luZ1N0eWxlBFF1YWQPRWFzaW5nRGlyZWN0aW9uA091dAZDcmVhdGUEUGxheRdTZXRFbGVtZW50c1RyYW5zcGFyZW5jeQRUZXh0E01heFZpc2libGVHcmFwaGVtZXMEdXRmOAlncmFwaGVtZXMQRmluaXNoZWREaWFsb2d1ZQZzdHJpbmcDc3ViASAEdGFzawR3YWl0BlBhcmVudAVDbGljawdWaXNpYmxlE0FuaW1hdGVEaWFsb2d1ZVRleHQaUmV0cmlldmVEaWFsb2d1ZURhdGFCeU5hbWUHT3B0aW9ucwR3YXJuGENhbnQgZmluZCBkaWFsb2d1ZSAlKiAlKgZmb3JtYXQFT3JkZXIIT3B0aW9uJSoORmluZEZpcnN0Q2hpbGQKVGV4dEJ1dHRvbhVGaW5kRmlyc3RDaGlsZE9mQ2xhc3MFTGFiZWwVVXBkYXRlRGlhbG9ndWVPcHRpb25zCEluc3RhbmNlCFVJU3Ryb2tlD1NlbGVjdGlvblN0cm9rZQlUaGlja25lc3MGQ29sb3IzB2Zyb21SR0IFQ29sb3ILR2V0Q2hpbGRyZW4HRGVzdHJveQtIYW5kbGVFbnRlcgtIYW5kbGVMZWF2ZQpNb3VzZUVudGVyB0Nvbm5lY3QKTW91c2VMZWF2ZRVIYW5kbGVEaWFsb2d1ZUJ1dHRvbnMNRGlhbG9ndWVJbmRleA9DbGllbnRDYWxsYmFja3MIQ2FsbGJhY2sISW50ZXJhY3QKRmlyZVNlcnZlcgpEaXNjb25uZWN0CUFjdGl2YXRlZBVIYW5kbGVEaWFsb2d1ZUNob2ljZXMMV2FpdEZvckNoaWxkA0lzQRZCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5BEJhY2sIUG9zaXRpb24FVURpbTIJZnJvbVNjYWxlC1Nob3dPcHRpb25zBWRlbGF5C0hpZGVPcHRpb25zElNraXBEaWFsb2d1ZUJ1dHRvbgZCdXR0b24KSGFuZGxlU2tpcAVTdGFydA1TdGFydERpYWxvZ3VlCFByb2dyZXNzEFByb2dyZXNzRGlhbG9ndWUFQ2xvc2UOQ2FuY2VsRGlhbG9ndWUNT25DbGllbnRFdmVudAVfSW5pdA5DcmVhdGVJbnN0YW5jZQlBbmltYXRpb24GQXNzZXRzCkFuaW1hdGlvbnMFSWRsZXMGTXl0aGljCUdpbGdhbWVzaBNBbmltYXRpb25Db250cm9sbGVyCEh1bWFub2lkCEFuaW1hdG9yDUxvYWRBbmltYXRpb24SUGxheU1vZGVsQW5pbWF0aW9uBVRpdGxlCE5QQ0ZyYW1lCE5QQ0ltYWdlDVZpZXdwb3J0RnJhbWUGTW9kZWxzA05QQwVDbG9uZQRIZWFkB1Bpdm90VG8KV29ybGRNb2RlbAZDYW1lcmEGQ0ZyYW1lDUN1cnJlbnRDYW1lcmENWm9vbVRvRXh0ZW50cxVTZXREaWFsb2d1ZUZyYW1lTW9kZWwMRGlhbG9ndWVOYW1lDGlzSW5EaWFsb2d1ZQ9DYW5PcGVuRGlhbG9ndWUNRGlhbG9ndWVUaXRsZRBEaWFsb2d1ZUdyYWRpZW50CFVzZU1vZGVsBU1vZGVsDk9wZW5lZERpYWxvZ3VlBEZpcmUDSFVECkludGVyZmFjZXMIRGlhbG9ndWUFR3VpZGUKVUlHcmFkaWVudA5HZXRUYXJnZXRTY2FsZQdVSVNjYWxlBVNjYWxlB0NvbnRlbnQJUmVzcG9uc2VzBXNwYXduDkNsb3NlZERpYWxvZ3VlAAdBZGRJdGVtCVJlc2V0SGVhZARnYW1lB1BsYXllcnMKR2V0U2VydmljZRFSZXBsaWNhdGVkU3RvcmFnZQ1TdGFydGVyUGxheWVyDFR3ZWVuU2VydmljZQZEZWJyaXMLTG9jYWxQbGF5ZXIJUGxheWVyR3VpB3JlcXVpcmUHTW9kdWxlcwREYXRhDERpYWxvZ3VlRGF0YQlJbnRlcmZhY2UPVUlSZXNpemVIYW5kbGVyDU1pc2NlbGxhbmVvdXMKTlBDSGFuZGxlcghQYWNrYWdlcwpGYXN0U2lnbmFsCERlZmVycmVkCVV0aWxpdGllcwtDYW1lcmFVdGlscwpOZXR3b3JraW5nBVN0YXRlDURpYWxvZ3VlRXZlbnQKSW1hZ2VMYWJlbAlUZXh0TGFiZWwRSW1hZ2VUcmFuc3BhcmVuY3kQVGV4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]]

-- _Bytecode = [[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]]

_Bytecode = [[BgMUBkNGcmFtZQhpZGVudGl0eQZ0eXBlb2YISW5zdGFuY2UOR2V0RGVzY2VuZGFudHMIQmFzZVBhcnQDSXNBDXRvT2JqZWN0U3BhY2UEU2l6ZQFYAVkBWg1HZXRDb21wb25lbnRzBG1hdGgDYWJzB1ZlY3RvcjMDbmV3CFBvc2l0aW9uEVBvaW50VG9Xb3JsZFNwYWNlDkdldEJvdW5kaW5nQm94AAIpAgAAAAC2AVICAQArAgIApAICAAAEAIC7LAADUgUAAKQEBAAAADBAnwQCAvAEBQAFAACAvAMARwYAAACfAwICKwMBAFIDAABvBAcAbwUHAG8GBwBvBwgAbwgIAG8JCABSCgMAxgsAAMYMAABkCn4AbxEJALwPDv4KAAAAnw8DAg4PeQBNEQ6FAAAAALwPAmYLAAAAnw8DAk0QDi8MAAAATREQeQ0AAABNEhB4DgAAAE0TEHsPAAAAvBQPQxAAAACfFAINuwIXA1IlFwCkJBQAAEwggZ8kAgIJIyQRuwIYA1ImGACkJRQAAEwggZ8lAgIJJCUSQyIjJLsCGQNSJRkApCQUAABMIIGfJAICCSMkE0MhIiM+ICERuwIaA1ImGgCkJRQAAEwggZ8lAgIJJCURuwIbA1InGwCkJhQAAEwggZ8mAgIJJSYSQyMkJbsCHANSJhwApCUUAABMIIGfJQICCSQlE0MiIyQ+ISIRuwIdA1InHQCkJhQAAEwggZ8mAgIJJSYRuwIeA1IoHgCkJxQAAEwggZ8nAgIJJicSQyQlJrsCHwNSJx8ApCYUAABMIIGfJgICCSUmE0MjJCU+IiMRJiQUIGAkAwAEAAAAJiMUICsjAQBSIwQAUgQjACYkFSFgJAMABQAAACYjFSErIwEAUiMFAFIFIwAmJBYiYCQDAAYAAAAmIxYiKyMBAFIjBgBSBiMAQyQUIGAHAwAkAAAAQyMUICsjAQBSIwcAUgcjAEMkFSFgCAMAJAAAAEMjFSErIwEAUiMIAFIIIwBDJBYiYAkDACQAAABDIxYiKyMBAFIjCQBSCSMAbgqB/wIAAAA0NgQGBQYAAFINBABSDgUAUg8GAKQMFwAAWFCBnwwEAlIKDAA0NgcGCAkAAFIMBwBSDQgAUg4JAKQLFwAAWFCBnwsEAiYMCwpNDwI7GAAAACYOAg9DEgsKPhESEbwPAjgZAAAAnw8DAkMNDg+CDAMAGgMBAwIEAAQAgAMDBAAAMEADBAMFAgAAAAAAAPB/AgAAAAAAAPD/AwYDBwMIAwkDCgMLAwwDDQIAAAAAAAAAQAMOAw8EAEwggQMQAxEEAFhQgQMSAxMAARQBGAAAAAABAAAAAAAAAAAAAAACAAABAAACAAAAAQAAAAABAAAAAAEAAQAAAAAAAgAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAEAAAAAAAABAAAAAAAAAgAAAAAAAAEAAAAAAAABAAAAAAAA7gAWAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAgAAAAABAAABAgADowAAAMAAAACCAAIAAQYAAQABAAEYAAAhAQAAAAAB]]

_Bytecode = [[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]]

_Bytecode = [[]]

_Bytecode = [[BgOEAglDaGFyYWN0ZXIBIwVUb0hleAV0b0hleAZzZWFyY2gABFRleHQHVmlzaWJsZQVmcmFtZQVwYWlycwdidXR0b25zBHRvb2wFVmFsdWUWQmFja2dyb3VuZFRyYW5zcGFyZW5jeQZzY3JpcHQGUGFyZW50BE9wZW4ORmluZEZpcnN0Q2hpbGQQVG9nZ2xlVmlzaWJpbGl0eQRFbnVtDVVzZXJJbnB1dFR5cGUFVG91Y2gIR2FtZXBhZDEMV2FpdEZvckNoaWxkEShgKSBPcGVuIEJhY2twYWNrCWludmVudG9yeQVDbG9zZRIoYCkgQ2xvc2UgQmFja3BhY2sQSW50ZXJhY3QgdG8gb3BlbhFJbnRlcmFjdCB0byBjbG9zZQRnYW1lEFVzZXJJbnB1dFNlcnZpY2UKR2V0U2VydmljZRBHZXRMYXN0SW5wdXRUeXBlBGRwYWQESWNvbgtVcGRhdGVJbnB1dARsaW5rEVJlcGxpY2F0ZWRTdG9yYWdlCXJlc291cmNlcwVpdGVtcwRmaXNoBE5hbWUKUnVuU2VydmljZQ1SZW5kZXJTdGVwcGVkBFdhaXQIRmluZExpbmsEaXRlbQhzcGFya2xlcwdFbmFibGVkBXRhYmxlBGZpbmQIaXRlbW5hbWUFc3RhY2sGd2VpZ2h0CmZhdm91cml0ZWQJYXBwcmFpc2VkB0Rlc3Ryb3kMUmVtb3ZlQnV0dG9uEEh1bWFub2lkUm9vdFBhcnQIQW5jaG9yZWQISHVtYW5vaWQJV2Fsa1NwZWVkBkhlYWx0aAVlcXVpcApGaXJlU2VydmVyBUVxdWlwCWZhdm91cml0ZQ9GYXZvdXJpdGVUb2dnbGUFVURpbTIDbmV3E0Fic29sdXRlQ29udGVudFNpemUBWQpDYW52YXNTaXplEFVwZGF0ZUNhbnZhc1NpemUGc3Ryb2tlCVRoaWNrbmVzcwpEaXNjb25uZWN0Ck1vdXNlRW50ZXIHQ29ubmVjdAh0b251bWJlcgpNb3VzZUxlYXZlEEZpbmRTbG90c0hvdmVyZWQKRmF2b3VyaXRlZAR0YXNrBXNwYXduFlVwZGF0ZUZhdm91cml0ZWRWaXN1YWwJQXBwcmFpc2VkFVVwZGF0ZUFwcHJhaXNlZFZpc3VhbAZXZWlnaHQIdG9zdHJpbmcCa2cHQ2hhbmdlZAdyZXF1aXJlB21vZHVsZXMHbGlicmFyeQpXZWlnaHRQb29sBkNvbG9yMwdmcm9tUkdCBExlcnAKVGV4dENvbG9yMwRGb250EFNvdXJjZVNhbnNJdGFsaWMOU291cmNlU2Fuc0JvbGQKU291cmNlU2FucwpMb2FkV2VpZ2h0BVN0YWNrAiB4ASAJTG9hZFN0YWNrBG5vbmUIRW5jaGFudHMPPGZvbnQgY29sb3IgPSAnBUNvbG9yAic+B0Rpc3BsYXkIPC9mb250PiANZW5jaGFudFVwZGF0ZQVob3Zlcg1SYXJpdHlDb2xvdXJzBlJhcml0eQtJbWFnZUNvbG9yMwhNdXRhdGlvbglNdXRhdGlvbnMOPGZvbnQgY29sb3IgPSclPGZvbnQgY29sb3IgPSAnIzhiZmY4OSc+R2lhbnQ8L2ZvbnQ+IAZHaWFudCAjPGZvbnQgY29sb3IgPSAnIzhiZmY4OSc+QmlnPC9mb250PiAEQmlnIAVTaGlueSM8Zm9udCBjb2xvcj0nI2ZmZjBiYyc+U2hpbnk8L2ZvbnQ+IAZTaGlueSAJU3BhcmtsaW5nJzxmb250IGNvbG9yPScjZmZmMGJjJz5TcGFya2xpbmc8L2ZvbnQ+IApTcGFya2xpbmcgCkNoaWxkQWRkZWQMQ2hpbGRSZW1vdmVkGHJieGFzc2V0aWQ6Ly8xNjgxMjkzMTgzMgVJbWFnZRFJbWFnZVRyYW5zcGFyZW5jeQlTY2FsZVR5cGUDRml0AlBTBFJvZHMJZXF1aXBtZW50F3JieGFzc2V0aWQ6Ly82NTIzOTM2NzcxBUl0ZW1zBkxvYWRVSRBCYWNrZ3JvdW5kQ29sb3IzBnNvdW5kcwNzZngCdWkJaXRlbWhvdmVyCVBsYXlTb3VuZAJvcwR0aW1lD2Zhdm91cml0ZWRjbGljawR3YWl0DU1vdXNlTW92ZW1lbnQQR2V0TW91c2VMb2NhdGlvbgpmcm9tT2Zmc2V0AVgIUG9zaXRpb24MTW91c2VCdXR0b24xCEdldE1vdXNlCUJ1dHRvbjFVcAVwcmludCpzd2FwcGluZyBhIGhvdGJhciBzbG90IHdpdGggaW52ZW50b3J5IHNsb3QDa2V5C0dldENoaWxkcmVuC0xheW91dE9yZGVyATEBMgEzATQBNQE2ATcBOAE5JW1vdmluZyBhIGhvdGJhciBzbG90IHRvIHRoZSBpbnZlbnRvcnkOaG90YmFydGVtcGxhdGUFQ2xvbmUNZG9pbmcgbm90aGluZxlzd2FwcGluZyB0d28gaG90YmFyIHNsb3RzI3N3YXBwaW5nIGludmVudG9yeSBpdGVtIHdpdGggaG90YmFyLml0ZW0gd2FzIGluIG9wZW4gYXJlYSwgc28gcHV0dGluZyBpbiBpbnZlbnRvcnkGY2xpY2syBGZha2UHVmVjdG9yMgtBbmNob3JQb2ludAhJbnN0YW5jZRBVSVNpemVDb25zdHJhaW50B01heFNpemUGY2xpY2sxB1VJU2NhbGUFU2NhbGUJU2NyZWVuR3VpGUZpbmRGaXJzdEFuY2VzdG9yV2hpY2hJc0EMSW5wdXRDaGFuZ2VkCklucHV0RW5kZWQLSW1hZ2VCdXR0b24DSXNBCHRlbXBsYXRlCEJhY2twYWNrC3BsYXllcnN0YXRzCUludmVudG9yeRFNb3VzZUJ1dHRvbjFDbGljaxFNb3VzZUJ1dHRvbjJDbGljawxUd2VlblNlcnZpY2UJVHdlZW5JbmZvC0Vhc2luZ1N0eWxlBFNpbmUPRWFzaW5nRGlyZWN0aW9uBUluT3V0BFNpemUGQ3JlYXRlBFBsYXkKSW5wdXRCZWdhbgRUb29sFkZpbmRGaXJzdENoaWxkV2hpY2hJc0EJSXRlbUFkZGVkB0tleUNvZGUJQmFja3F1b3RlAUcIRFBhZERvd24GQW5jaG9yA09uZQhEUGFkTGVmdANUd28GRFBhZFVwBVRocmVlCURQYWRSaWdodARGb3VyBEZpdmUDU2l4BVNldmVuBUVpZ2h0BE5pbmUGc3RyaW5nBWxvd2VyDlNjcm9sbGluZ0ZyYW1lBGdyaWQHUGxheWVycwtMb2NhbFBsYXllcgZldmVudHMGc2Nyb2xsCHNhZmV6b25lBmhvdGJhcgljaGFyYWN0ZXICZngEcm9kcwhlbmNoYW50cwdmaXNoaW5nCW11dGF0aW9ucwpTdGFydGVyR3VpC0NvcmVHdWlUeXBlEVNldENvcmVHdWlFbmFibGVkCElzTG9hZGVkFExhc3RJbnB1dFR5cGVDaGFuZ2VkADECAAIAAAAF+wEBAE0AAWkAAAAA3gAAAIIAAQABAwEACwABGAAAAAAACwAAAAAFAQAAAAAGbwIAALwDAB8B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AAEGAAEAAAAAAAEAAQAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAQABAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAPgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAD7AQAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAA/QAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAIBAQAAAAAAAAAAAPgAAAABAAEBAgAAAAAAAAAAAAAACAAAAQAAAAAAAAAAAAMAAAQAAAAAAAAiAAAAAAAAAAYAABcAAAAAAAAAAACsAAIAAAAAAAAAAAAAAAAAAAEAAQAAAAAAAAAAAAADAAAAAAAAAAAAAAAHAAAAAAAAAAAAAAAAAAMAAAAAAAAA7wAAAAAAAAAAAAUAAA8AAAAAFAAAAAAADQAAAAANAAAEAAEAAAAAAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAJgAAAAAAAAAAAAHAAAAAAAAAAAHAAACAAAAAAAAAEwAAAAAAAAAAAAAAABAAAAAAAAAAwAAAAAAAAQAAAABAABcAAAAAAABAAAAAQAAAAD+AAcAAAAAAAAAAwABAAAACAAAAAUAAAADAAAACAAAAFQAAAARAAAA6QIAAKQAAAAAMA==]]

_Bytecode = [[]]

_Bytecode = [[BgNhC3BsYXllcnN0YXRzDFdhaXRGb3JDaGlsZAROYW1lDkZpbmRGaXJzdENoaWxkBGdhbWUKUnVuU2VydmljZQpHZXRTZXJ2aWNlCElzU2VydmVyCUNoYXJhY3RlchFSZXBsaWNhdGVkU3RvcmFnZQVTdGF0cwlXb3Jrc3BhY2UFd29ybGQGc3Bhd25zDXNwYXdubG9jYXRpb24FdmFsdWULR2V0Q2hpbGRyZW4Ed2FybgohISBQTEFZRVIgBnN0cmluZwV1cHBlciwgU1BBV04gSVMgTk9XIFZPSUQgLSBTRVQgVE8gU1RBUlRFUiBMT0NBVElPTgdTdGFydGVyEEh1bWFub2lkUm9vdFBhcnQEbWF0aAZyYW5kb20GQ0ZyYW1lCXJlc291cmNlcwZzb3VuZHMDc2Z4BnBsYXllcgVzcGF3bglQbGF5U291bmQKcmVwbGljYXRlZAJmeAxwbGF5ZXJfc3Bhd24FQ2xvbmUHRW5hYmxlZAZQYXJlbnQERW1pdAdBZGRJdGVtEHBsYXllcl9zcGF3bmF1cmELU3Bhd25QbGF5ZXIJUGxheWVyR3VpA2h1ZAhzYWZlem9uZQhiYWNrcGFjawdWaXNpYmxlCGJlc3RpYXJ5CWVxdWlwbWVudAhBbmNob3JlZARUb29sFkZpbmRGaXJzdENoaWxkV2hpY2hJc0EGYm9iYmVyA0NhbghJc0NsaWVudAJQUwdMYW50ZXJuB0Rlc3Ryb3kOaGFzYm9keWxhbnRlcm4FVmFsdWUHZW5hYmxlZAlpbnN0YW5jZXMIbGFudGVybnMLbGFudGVybnR5cGUISW5zdGFuY2UDbmV3D1JpZ2lkQ29uc3RyYWludAVUb3JzbxJCb2R5QmFja0F0dGFjaG1lbnQLQXR0YWNobWVudDAGQ2VudGVyDldlbGRBdHRhY2htZW50C0F0dGFjaG1lbnQxBXBhaXJzCEJhc2VQYXJ0A0lzQQpDYW5Db2xsaWRlCENhblRvdWNoCENhblF1ZXJ5DGxhbnRlcm5lcXVpcA1VcGRhdGVMYW50ZXJuCEJlc3RpYXJ5A0FsbAROb25lBHR5cGUFdGFibGUERnJvbQdHaXZlbkJ5CHRvc3RyaW5nC0dldEJlc3RpYXJ5B3JlcXVpcmUHbW9kdWxlcwZkZWJyaXMHbGlicmFyeQRyb2RzBGZpc2gA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]]

_Bytecode = [[]]

_Bytecode = [[BgNAE0FuaW1hdGlvbkNvbnRyb2xsZXIMV2FpdEZvckNoaWxkCEFuaW1hdG9yCUFuaW1hdGlvbg1Mb2FkQW5pbWF0aW9uBnNjcmlwdA9QbGF5ZXJBbmltYXRpb24EUGxheQl3b3Jrc3BhY2UNQ3VycmVudENhbWVyYQNDYW0GQ0ZyYW1lCUNoYXJhY3RlchBIdW1hbm9pZFJvb3RQYXJ0DkZpbmRGaXJzdENoaWxkCEh1bWFub2lkBUNsb25lDFRpbWVQb3NpdGlvbgZQYXJlbnQEZ2FtZQZEZWJyaXMKR2V0U2VydmljZQdBZGRJdGVtCEFuY2hvcmVkDlRvZ2dsZUNvbnRyb2xzEURpc2FibGVBbGxTY3JlZW5zB0VuYWJsZWQERmFkZQZNb2RlbHMLUHJpbWFyeVBhcnQDbmV3BkNhbWVyYQVwY2FsbAR0YXNrBHdhaXQIU2hvd0JhcnMERW51bQpDYW1lcmFUeXBlClNjcmlwdGFibGUNUmVuZGVyU3RlcHBlZAdDb25uZWN0DFNvdW5kU2VydmljZQ5QbGF5TG9jYWxTb3VuZAhQb3NpdGlvbgFYAVoHVmVjdG9yMwpEaXNjb25uZWN0BkN1c3RvbQdEZXN0cm95BVN0YXJ0EVJlcGxpY2F0ZWRTdG9yYWdlClJ1blNlcnZpY2UHUGxheWVycxZQcm94aW1pdHlQcm9tcHRTZXJ2aWNlCHBhY2thZ2VzB3JlcXVpcmUFVHJvdmUHUHJvbWlzZQtDb250cm9sbGVycxJDdXRzY2VuZUNvbnRyb2xsZXIQUGxheWVyQ29udHJvbGxlcgtMb2NhbFBsYXllcgVTb3VuZAAIBQAGAAAAMPsAAQBvAgAAvAAA0wEAAACfAAMCbwICALwAANMBAAAAnwADAvsCAQBvBAMAvAIC0wEAAACfAgMAvAAAlAQAAACfAAAC3gAAAPsAAwBvAgAAvAAA0wEAAACfAAMCbwICALwAANMBAAAAnwADAvsCAwBvBAMAvAIC0wEAAACfAgMAvAAAlAQAAACfAAAC3gACAPsABQCkAgYAAABQQG8EBwC8AgLTAQAAAJ8CAwC8AACUBAAAAJ8AAALeAAQAggABAAgDAQMCAwMDBAMFAwYEAABQQAMHAE0AARgAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAB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]]



local function len(Table, limit)
	local len = 0
	
	--[[
	for key, value in pairs(Table) do
		len = len + 1
		
		if limit == len then break end
	end
	--]]

	len = Table[0] ~= nil and #Table + 1 or 0

	return len
end



local function insert(Table, ...)
	local args = {...}
	local index = nil

	if args[2] and #args >= 2 then
		index = args[1]

		if not index then
			print("insert index not found", debug.traceback())
		end

		Table[index] = args[2]
	else
		index = (#Table == 0 and Table[0] == nil and -1 or #Table) + 1

		if not index then
			print("insert index not found", debug.traceback())
		end

		Table[index] = args[1]
	end
	
	if not getmetatable(Table) and false then
		setmetatable(Table, {
			__len = function(self)
				return rawlen(self) == 0 and len(self) > 0 and len(self) or rawlen(self) + 1
			end;
		})
	end
	
	return index, ...
end

local function find(Table, value)
	for i, v in pairs(Table) do
		if v == value then
			return i, v
		end
	end
end



local __recurse; __recurse = function(tbl, func, tbls)
    if type(tbl) == "table" then
        tbls = tbls or {}
        for key, value in pairs(tbl) do
            func(key, value)

            if not tbls[value] then
                tbls[value] = true

				__recurse(value, func)
            end
        end
    end
end



local LuaUOpcode = [[
enum LuauOpcode
{
    // NOP: noop
    LOP_NOP,

    // BREAK: debugger break
    LOP_BREAK,

    // LOADNIL: sets register to nil
    // A: target register
    LOP_LOADNIL,

    // LOADB: sets register to boolean and jumps to a given short offset (used to compile comparison results into a boolean)
    // A: target register
    // B: value (0/1)
    // C: jump offset
    LOP_LOADB,

    // LOADN: sets register to a number literal
    // A: target register
    // D: value (-32768..32767)
    LOP_LOADN,

    // LOADK: sets register to an entry from the constant table from the proto (number/vector/string)
    // A: target register
    // D: constant table index (0..32767)
    LOP_LOADK,

    // MOVE: move (copy) value from one register to another
    // A: target register
    // B: source register
    LOP_MOVE,

    // GETGLOBAL: load value from global table using constant string as a key
    // A: target register
    // C: predicted slot index (based on hash)
    // AUX: constant table index
    LOP_GETGLOBAL,

    // SETGLOBAL: set value in global table using constant string as a key
    // A: source register
    // C: predicted slot index (based on hash)
    // AUX: constant table index
    LOP_SETGLOBAL,

    // GETUPVAL: load upvalue from the upvalue table for the current function
    // A: target register
    // B: upvalue index
    LOP_GETUPVAL,

    // SETUPVAL: store value into the upvalue table for the current function
    // A: target register
    // B: upvalue index
    LOP_SETUPVAL,

    // CLOSEUPVALS: close (migrate to heap) all upvalues that were captured for registers >= target
    // A: target register
    LOP_CLOSEUPVALS,

    // GETIMPORT: load imported global table global from the constant table
    // A: target register
    // D: constant table index (0..32767); we assume that imports are loaded into the constant table
    // AUX: 3 10-bit indices of constant strings that, combined, constitute an import path; length of the path is set by the top 2 bits (1,2,3)
    LOP_GETIMPORT,

    // GETTABLE: load value from table into target register using key from register
    // A: target register
    // B: table register
    // C: index register
    LOP_GETTABLE,

    // SETTABLE: store source register into table using key from register
    // A: source register
    // B: table register
    // C: index register
    LOP_SETTABLE,

    // GETTABLEKS: load value from table into target register using constant string as a key
    // A: target register
    // B: table register
    // C: predicted slot index (based on hash)
    // AUX: constant table index
    LOP_GETTABLEKS,

    // SETTABLEKS: store source register into table using constant string as a key
    // A: source register
    // B: table register
    // C: predicted slot index (based on hash)
    // AUX: constant table index
    LOP_SETTABLEKS,

    // GETTABLEN: load value from table into target register using small integer index as a key
    // A: target register
    // B: table register
    // C: index-1 (index is 1..256)
    LOP_GETTABLEN,

    // SETTABLEN: store source register into table using small integer index as a key
    // A: source register
    // B: table register
    // C: index-1 (index is 1..256)
    LOP_SETTABLEN,

    // NEWCLOSURE: create closure from a child proto; followed by a CAPTURE instruction for each upvalue
    // A: target register
    // D: child proto index (0..32767)
    LOP_NEWCLOSURE,

    // NAMECALL: prepare to call specified method by name by loading function from source register using constant index into target register and copying source register into target register + 1
    // A: target register
    // B: source register
    // C: predicted slot index (based on hash)
    // AUX: constant table index
    // Note that this instruction must be followed directly by CALL; it prepares the arguments
    // This instruction is roughly equivalent to GETTABLEKS + MOVE pair, but we need a special instruction to support custom __namecall metamethod
    LOP_NAMECALL,

    // CALL: call specified function
    // A: register where the function object lives, followed by arguments; results are placed starting from the same register
    // B: argument count + 1, or 0 to preserve all arguments up to top (MULTRET)
    // C: result count + 1, or 0 to preserve all values and adjust top (MULTRET)
    LOP_CALL,

    // RETURN: returns specified values from the function
    // A: register where the returned values start
    // B: number of returned values + 1, or 0 to return all values up to top (MULTRET)
    LOP_RETURN,

    // JUMP: jumps to target offset
    // D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
    LOP_JUMP,

    // JUMPBACK: jumps to target offset; this is equivalent to JUMP but is used as a safepoint to be able to interrupt while/repeat loops
    // D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
    LOP_JUMPBACK,

    // JUMPIF: jumps to target offset if register is not nil/false
    // A: source register
    // D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
    LOP_JUMPIF,

    // JUMPIFNOT: jumps to target offset if register is nil/false
    // A: source register
    // D: jump offset (-32768..32767; 0 means "next instruction" aka "don't jump")
    LOP_JUMPIFNOT,

    // JUMPIFEQ, JUMPIFLE, JUMPIFLT, JUMPIFNOTEQ, JUMPIFNOTLE, JUMPIFNOTLT: jumps to target offset if the comparison is true (or false, for NOT variants)
    // A: source register 1
    // D: jump offset (-32768..32767; 1 means "next instruction" aka "don't jump")
    // AUX: source register 2
    LOP_JUMPIFEQ,
    LOP_JUMPIFLE,
    LOP_JUMPIFLT,
    LOP_JUMPIFNOTEQ,
    LOP_JUMPIFNOTLE,
    LOP_JUMPIFNOTLT,

    // ADD, SUB, MUL, DIV, MOD, POW: compute arithmetic operation between two source registers and put the result into target register
    // A: target register
    // B: source register 1
    // C: source register 2
    LOP_ADD,
    LOP_SUB,
    LOP_MUL,
    LOP_DIV,
    LOP_MOD,
    LOP_POW,

    // ADDK, SUBK, MULK, DIVK, MODK, POWK: compute arithmetic operation between the source register and a constant and put the result into target register
    // A: target register
    // B: source register
    // C: constant table index (0..255); must refer to a number
    LOP_ADDK,
    LOP_SUBK,
    LOP_MULK,
    LOP_DIVK,
    LOP_MODK,
    LOP_POWK,

    // AND, OR: perform `and` or `or` operation (selecting first or second register based on whether the first one is truthy) and put the result into target register
    // A: target register
    // B: source register 1
    // C: source register 2
    LOP_AND,
    LOP_OR,

    // ANDK, ORK: perform `and` or `or` operation (selecting source register or constant based on whether the source register is truthy) and put the result into target register
    // A: target register
    // B: source register
    // C: constant table index (0..255)
    LOP_ANDK,
    LOP_ORK,

    // CONCAT: concatenate all strings between B and C (inclusive) and put the result into A
    // A: target register
    // B: source register start
    // C: source register end
    LOP_CONCAT,

    // NOT, MINUS, LENGTH: compute unary operation for source register and put the result into target register
    // A: target register
    // B: source register
    LOP_NOT,
    LOP_MINUS,
    LOP_LENGTH,

    // NEWTABLE: create table in target register
    // A: target register
    // B: table size, stored as 0 for v=0 and ceil(log2(v))+1 for v!=0
    // AUX: array size
    LOP_NEWTABLE,

    // DUPTABLE: duplicate table using the constant table template to target register
    // A: target register
    // D: constant table index (0..32767)
    LOP_DUPTABLE,

    // SETLIST: set a list of values to table in target register
    // A: target register
    // B: source register start
    // C: value count + 1, or 0 to use all values up to top (MULTRET)
    // AUX: table index to start from
    LOP_SETLIST,

    // FORNPREP: prepare a numeric for loop, jump over the loop if first iteration doesn't need to run
    // A: target register; numeric for loops assume a register layout [limit, step, index, variable]
    // D: jump offset (-32768..32767)
    // limit/step are immutable, index isn't visible to user code since it's copied into variable
    LOP_FORNPREP,

    // FORNLOOP: adjust loop variables for one iteration, jump back to the loop header if loop needs to continue
    // A: target register; see FORNPREP for register layout
    // D: jump offset (-32768..32767)
    LOP_FORNLOOP,

    // FORGLOOP: adjust loop variables for one iteration of a generic for loop, jump back to the loop header if loop needs to continue
    // A: target register; generic for loops assume a register layout [generator, state, index, variables...]
    // D: jump offset (-32768..32767)
    // AUX: variable count (1..255) in the low 8 bits, high bit indicates whether to use ipairs-style traversal in the fast path
    // loop variables are adjusted by calling generator(state, index) and expecting it to return a tuple that's copied to the user variables
    // the first variable is then copied into index; generator/state are immutable, index isn't visible to user code
    LOP_FORGLOOP,

    // FORGPREP_INEXT: prepare FORGLOOP with 2 output variables (no AUX encoding), assuming generator is luaB_inext, and jump to FORGLOOP
    // A: target register (see FORGLOOP for register layout)
    LOP_FORGPREP_INEXT,

    // FASTCALL3: perform a fast call of a built-in function using 3 register arguments
    // A: builtin function id (see LuauBuiltinFunction)
    // B: source argument register
    // C: jump offset to get to following CALL
    // AUX: source register 2 in least-significant byte
    // AUX: source register 3 in second least-significant byte
    LOP_FASTCALL3,

    // FORGPREP_NEXT: prepare FORGLOOP with 2 output variables (no AUX encoding), assuming generator is luaB_next, and jump to FORGLOOP
    // A: target register (see FORGLOOP for register layout)
    LOP_FORGPREP_NEXT,

    // NATIVECALL: start executing new function in native code
    // this is a pseudo-instruction that is never emitted by bytecode compiler, but can be constructed at runtime to accelerate native code dispatch
    LOP_NATIVECALL,

    // GETVARARGS: copy variables into the target register from vararg storage for current function
    // A: target register
    // B: variable count + 1, or 0 to copy all variables and adjust top (MULTRET)
    LOP_GETVARARGS,

    // DUPCLOSURE: create closure from a pre-created function object (reusing it unless environments diverge)
    // A: target register
    // D: constant table index (0..32767)
    LOP_DUPCLOSURE,

    // PREPVARARGS: prepare stack for variadic functions so that GETVARARGS works correctly
    // A: number of fixed arguments
    LOP_PREPVARARGS,

    // LOADKX: sets register to an entry from the constant table from the proto (number/string)
    // A: target register
    // AUX: constant table index
    LOP_LOADKX,

    // JUMPX: jumps to the target offset; like JUMPBACK, supports interruption
    // E: jump offset (-2^23..2^23; 0 means "next instruction" aka "don't jump")
    LOP_JUMPX,

    // FASTCALL: perform a fast call of a built-in function
    // A: builtin function id (see LuauBuiltinFunction)
    // C: jump offset to get to following CALL
    // FASTCALL is followed by one of (GETIMPORT, MOVE, GETUPVAL) instructions and by CALL instruction
    // This is necessary so that if FASTCALL can't perform the call inline, it can continue normal execution
    // If FASTCALL *can* perform the call, it jumps over the instructions *and* over the next CALL
    // Note that FASTCALL will read the actual call arguments, such as argument/result registers and counts, from the CALL instruction
    LOP_FASTCALL,

    // COVERAGE: update coverage information stored in the instruction
    // E: hit count for the instruction (0..2^23-1)
    // The hit count is incremented by VM every time the instruction is executed, and saturates at 2^23-1
    LOP_COVERAGE,

    // CAPTURE: capture a local or an upvalue as an upvalue into a newly created closure; only valid after NEWCLOSURE
    // A: capture type, see LuauCaptureType
    // B: source register (for VAL/REF) or upvalue index (for UPVAL/UPREF)
    LOP_CAPTURE,

    // SUBRK, DIVRK: compute arithmetic operation between the constant and a source register and put the result into target register
    // A: target register
    // B: constant table index (0..255); must refer to a number
    // C: source register
    LOP_SUBRK,
    LOP_DIVRK,

    // FASTCALL1: perform a fast call of a built-in function using 1 register argument
    // A: builtin function id (see LuauBuiltinFunction)
    // B: source argument register
    // C: jump offset to get to following CALL
    LOP_FASTCALL1,

    // FASTCALL2: perform a fast call of a built-in function using 2 register arguments
    // A: builtin function id (see LuauBuiltinFunction)
    // B: source argument register
    // C: jump offset to get to following CALL
    // AUX: source register 2 in least-significant byte
    LOP_FASTCALL2,

    // FASTCALL2K: perform a fast call of a built-in function using 1 register argument and 1 constant argument
    // A: builtin function id (see LuauBuiltinFunction)
    // B: source argument register
    // C: jump offset to get to following CALL
    // AUX: constant index
    LOP_FASTCALL2K,

    // FORGPREP: prepare loop variables for a generic for loop, jump to the loop backedge unconditionally
    // A: target register; generic for loops assume a register layout [generator, state, index, variables...]
    // D: jump offset (-32768..32767)
    LOP_FORGPREP,

    // JUMPXEQKNIL, JUMPXEQKB: jumps to target offset if the comparison with constant is true (or false, see AUX)
    // A: source register 1
    // D: jump offset (-32768..32767; 1 means "next instruction" aka "don't jump")
    // AUX: constant value (for boolean) in low bit, NOT flag (that flips comparison result) in high bit
    LOP_JUMPXEQKNIL,
    LOP_JUMPXEQKB,

    // JUMPXEQKN, JUMPXEQKS: jumps to target offset if the comparison with constant is true (or false, see AUX)
    // A: source register 1
    // D: jump offset (-32768..32767; 1 means "next instruction" aka "don't jump")
    // AUX: constant table index in low 24 bits, NOT flag (that flips comparison result) in high bit
    LOP_JUMPXEQKN,
    LOP_JUMPXEQKS,

    // IDIV: compute floor division between two source registers and put the result into target register
    // A: target register
    // B: source register 1
    // C: source register 2
    LOP_IDIV,

    // IDIVK compute floor division between the source register and a constant and put the result into target register
    // A: target register
    // B: source register
    // C: constant table index (0..255)
    LOP_IDIVK,

    // Enum entry for number of opcodes, not a valid opcode by itself!
    LOP__COUNT
};
]]

--[[
K = Constant
S = String
N = Number
B = Boolean
R = Reverse
I = Self?
X = <void>
--]]

local codes = {
	A = {};
	B = {};
	C = {};
	D = {};
	E = {};
	F = {};
	Bx = {};
	sBx = {};
	sAx = {};
	AUX = {};
}

local function searchCode(query)
	local regex = query
	
	if query == "Bx" then
		regex = "D" .. ":%s"
	elseif query == "sBx" then
		regex = "D" .. ":%sjump"
	elseif query == "sAx" then
		regex = "E" .. ":%s"
	else
		regex = query .. ":%s"
	end
	
	for code in string.gmatch(LuaUOpcode, "//%s" .. regex .. ".-(LOP_.-)[,%s]//") do
		for opcode in string.gmatch(code, "LOP[_]+(.-)[,%s]") do
			codes[query][opcode] = true
		end
	end
end

searchCode("A"); searchCode("B"); searchCode("C"); searchCode("D" or "Bx"); searchCode("E" or "sBx"); searchCode("F" or "sAx"); searchCode("AUX")

local enum = {
	KeywordType = {
        Nil = 0;
        False = 1;
        While = 2;
        Function = 3;
        Table = 5;
        True = 7;
		And = 8;
		Break = 9;
		Else = 10;
		ElseIf = 11;
		End = 12;
		If = 13;
		In = 14;
		Local = 15;
		Not = 16;
		Or = 13;
		Repeat = 14;
		Return = 15;
		Then = 16;
		Until = 17;
		Do = 18;

		Upvalue = 19;
		Reference = 20;
		Value = 21;

		Variable = 22;
		Number = 23;
		Boolean = 24;
		Vararg = 25;
    };
	ConstantType = {
        Nil = 0;
        Bool = 1;
        Number = 2;
        String = 3;
        Import = 4;
        Table = 5;
        Closure = 6;
        Vector = 7;
    };
	BytecodeTypes = {
		Nil = 0;
		Boolean = 1;
		Number = 2;
		String = 3;
		Table = 4;
		Function = 5;
		Thread = 6;
		UserData = 7;
		Vector = 8;
	};
	OpCodeEncoding = {
		None = 0;
		Client = 1;
		Studio = 2;
	};
	OpMode = {
		iABC = 0;
		iAD = 1;
		iE = 2;
		AUX = 3;
		None = 4;
	};
	OpCode = {

	};
	CaptureType = {
		Value = 0;
		Reference = 1;
		Upvalue = 2;
	};
	DeclarationType = {
		Local = 0,
		Closure = 1,
		Upvalue = 2,
	};
	BinaryOperation = {
		Add = 0;
		Subtract = 1;
		Mulitply = 2;
		Divide = 3;
		Modulus = 4;
		Power = 5;
		Concat = 6;
		And = 7;
		Or = 8;
		CompareNe = 9;
		CompareEq = 10;
		CompareGe = 11;
		CompareGt = 12;
		CompareLe = 13;
		CompareLt = 14;
		FloorDivide = 15;
	};
	Condition = {
		Not = 0;
		If = 1;
		Len = 2;
		Min = 3;
	};
	BuiltinFunction = {
		NONE = 0;
	
		-- assert()
		ASSERT = 1;
	
		-- math.
		MATH_ABS = 2;
		MATH_ACOS = 3;
		MATH_ASIN = 4;
		MATH_ATAN2 = 5;
		MATH_ATAN = 6;
		MATH_CEIL = 7;
		MATH_COSH = 8;
		MATH_COS = 9;
		MATH_DEG = 10;
		MATH_EXP = 11;
		MATH_FLOOR = 12;
		MATH_FMOD = 13;
		MATH_FREXP = 14;
		MATH_LDEXP = 15;
		MATH_LOG10 = 16;
		MATH_LOG = 17;
		MATH_MAX = 18;
		MATH_MIN = 19;
		MATH_MODF = 20;
		MATH_POW = 21;
		MATH_RAD = 22;
		MATH_SINH = 23;
		MATH_SIN = 24;
		MATH_SQRT = 25;
		MATH_TANH = 26;
		MATH_TAN = 27;
	
		-- bit32.
		BIT32_ARSHIFT = 28;
		BIT32_BAND = 29;
		BIT32_BNOT = 30;
		BIT32_BOR = 31;
		BIT32_BXOR = 32;
		BIT32_BTEST = 33;
		BIT32_EXTRACT = 34;
		BIT32_LROTATE = 35;
		BIT32_LSHIFT = 36;
		BIT32_REPLACE = 37;
		BIT32_RROTATE = 38;
		BIT32_RSHIFT = 39;
	
		-- type()
		TYPE = 40;
	
		-- string.
		STRING_BYTE = 41;
		STRING_CHAR = 42;
		STRING_LEN = 43;
	
		-- typeof()
		TYPEOF = 44;
	
		-- string.
		STRING_SUB = 45;
	
		-- math.
		MATH_CLAMP = 46;
		MATH_SIGN = 47;
		MATH_ROUND = 48;
	
		-- raw*
		RAWSET = 49;
		RAWGET = 50;
		RAWEQUAL = 51;
	
		-- table.
		TABLE_INSERT = 52;
		TABLE_UNPACK = 53;
	
		-- vector ctor
		VECTOR = 54;
	
		-- bit32.count
		BIT32_COUNTLZ = 55;
		BIT32_COUNTRZ = 56;
	
		-- select(_; ...)
		SELECT_VARARG = 57;
	
		-- rawlen
		RAWLEN = 58;
	
		-- bit32.extract(_; k; k)
		BIT32_EXTRACTK = 59;
	
		-- get/setmetatable
		GETMETATABLE = 60;
		SETMETATABLE = 61;
	
		-- tonumber/tostring
		TONUMBER = 62;
		TOSTRING = 63;
	
		-- bit32.byteswap(n)
		BIT32_BYTESWAP = 64;
	
		-- buffer.
		BUFFER_READI8 = 65;
		BUFFER_READU8 = 66;
		BUFFER_WRITEU8 = 67;
		BUFFER_READI16 = 68;
		BUFFER_READU16 = 69;
		BUFFER_WRITEU16 = 70;
		BUFFER_READI32 = 71;
		BUFFER_READU32 = 72;
		BUFFER_WRITEU32 = 73;
		BUFFER_READF32 = 74;
		BUFFER_WRITEF32 = 75;
		BUFFER_READF64 = 76;
		BUFFER_WRITEF64 = 77;
	};
}

local enumreverse = {}

for i, v in pairs(enum) do
	enumreverse[i] = {}

	for i2, v2 in pairs(v) do
		enumreverse[i][v2] = i2
	end
end

local opcodes = {}
local iteration = 0
for opcode in string.gmatch(LuaUOpcode, "LOP[_]+(.-)[,%s]") do
	local tbl = {
		["name"] = opcode;
		["case"] = iteration;
		["number"] = (256+-29*iteration) % 256;
		["aux"] = false;
	}

	local buildCode
	local Mode
	for index, value in pairs(codes) do
		if (value[opcode]) then
			if (index == "AUX") then
				tbl.aux = true
			else
				if not Mode then Mode = "i" end
				Mode = Mode .. index
			end
		end
	end

	Mode = Mode and Mode .. " " or Mode

	if Mode then
		Mode = Mode:gsub("BA", "AB")
		Mode = Mode:gsub("CA", "AC")
		Mode = Mode:gsub("CB", "BC")
		Mode = Mode:gsub("DA", "AD")
		Mode = Mode:gsub("CAB", "ABC")
		Mode = Mode:gsub("BAC", "ABC")

		Mode = Mode:gsub("AB ", "ABC")
		Mode = Mode:gsub("AC ", "ABC")
		Mode = Mode:gsub("iD ", "iAD")
		Mode = Mode:gsub("iA ", "iABC")

		Mode = Mode:gsub(" ", "")
	end

	tbl.type = Mode and Mode or "none"
	tbl.mode = Mode and enum.OpMode[Mode] or "none"

	enum.OpCode[opcode] = tbl.number

	enum.OpCode["EndStatement"] = -1

	insert(opcodes, tbl)
	iteration = iteration + 1
end



local LuaU = {};
LuaU.SIZE_A = 8
LuaU.SIZE_C = 8
LuaU.SIZE_B = 8
LuaU.SIZE_Bx = (LuaU.SIZE_C + LuaU.SIZE_B)
LuaU.SIZE_OP = 8

LuaU.INSN_A_SHIFT = 8
LuaU.INSN_B_SHIFT = 16
LuaU.INSN_C_SHIFT = 24
LuaU.INSN_Bx_SHIFT = 16
LuaU.INSN_sBx_SHIFT = 8

LuaU.POS_OP = 0
LuaU.POS_A = (LuaU.POS_OP + LuaU.SIZE_OP)
LuaU.POS_B = (LuaU.POS_A + LuaU.SIZE_A)
LuaU.POS_C = (LuaU.POS_B + LuaU.SIZE_B)
LuaU.POS_Bx = LuaU.POS_B

LuaU.MAXARG_A = (bit32.lshift(1, LuaU.SIZE_A) - 1)
LuaU.MAXARG_B = (bit32.lshift(1, LuaU.SIZE_B) - 1)
LuaU.MAXARG_C = (bit32.lshift(1, LuaU.SIZE_C) - 1)
LuaU.MAXARG_Bx = (bit32.lshift(1, LuaU.SIZE_Bx) - 1)
LuaU.MAXARG_sBx = bit32.rshift(LuaU.MAXARG_Bx, 1)

LuaU.BITRK = bit32.lshift(1, (LuaU.SIZE_B - 1))
LuaU.MAXINDEXRK = (LuaU.BITRK - 1)
LuaU.ISK = function(x) return bit32.band(x, LuaU.BITRK) end
LuaU.INDEXK = function(x) return bit32.band(x, bit32.bnot(LuaU.BITRK)) end
LuaU.RKASK = function(x) return bit32.bor(x, LuaU.BITRK) end
LuaU.MASK1 = function(n,p) return bit32.lshift(bit32.bnot(bit32.lshift(bit32.bnot(0), n)), p) end
LuaU.MASK0 = function(n,p) return bit32.bnot(LuaU.MASK1(n, p)) end

LuaU.GETARG_A = function(i) return bit32.band(bit32.rshift(i, LuaU.POS_A), LuaU.MASK1(LuaU.SIZE_A, 0)) end
LuaU.GETARG_B = function(i) return bit32.band(bit32.rshift(i, LuaU.POS_B), LuaU.MASK1(LuaU.SIZE_B, 0)) end
LuaU.GETARG_C = function(i) return bit32.band(bit32.rshift(i, LuaU.POS_C), LuaU.MASK1(LuaU.SIZE_C, 0)) end
LuaU.GETARG_Bx = function(i) return bit32.band(bit32.rshift(i, LuaU.POS_Bx), LuaU.MASK1(LuaU.SIZE_Bx, 0)) end
LuaU.GETARG_sBx = function(i) local Bx = LuaU.GETARG_Bx(i) local sBx = Bx + 1; if Bx > 0x7FFF and Bx <= 0xFFFF then sBx = -(0xFFFF - Bx); sBx = sBx - 1; end return sBx end
LuaU.GETARG_sAx = function(i) return bit32.rshift(i, 8) end

LuaU.INSN_A = function(i) return bit32.band(bit32.rshift(i, LuaU.INSN_A_SHIFT), 0xFF) end
LuaU.INSN_B = function(i) return bit32.band(bit32.rshift(i, LuaU.INSN_B_SHIFT), 0xFF) end
LuaU.INSN_C = function(i) return bit32.band(bit32.rshift(i, LuaU.INSN_C_SHIFT), 0xFF) end
LuaU.INSN_Bx = function(i) return bit32.arshift(i, LuaU.INSN_Bx_SHIFT) end
LuaU.INSN_sBx = function(i) return bit32.arshift(i, LuaU.INSN_sBx_SHIFT) end

LuaU.GET_OPCODE = function(i) return bit32.band(bit32.rshift(i, LuaU.POS_OP), LuaU.MASK1(LuaU.SIZE_OP, 0)) end

local function getOpCode(op)
	for _,v in pairs(opcodes) do 
		if type(op) == "string" and v.name == op then 
			return tonumber(v.number);
		elseif type(op) == "number" and v.number == op then
			return tostring(v.name)
		end
	end
end

local Constant = {}
do
    
end

local OpProperties = {}
do
	OpProperties.__index = OpProperties

	function OpProperties:new(name, code, mode, type, hasAux)
		self = setmetatable({}, self)
		self.Code = code
		self.Mode = mode
		self.Type = type
		self.Name = name
		self.HasAux = hasAux or false
		
		return self
	end

	function OpProperties:Mapper()
		local OpCodes = {}
	
		for key, value in pairs(opcodes) do
			local Op = OpProperties:new(value.name, value.number, value.mode, value.type, value.aux)
			
			OpCodes[value.number] = Op
			
			--[[
			{
				Code = value.number;
				Mode = value.mode;
				Type = value.type;
				HasAux = value.aux;
			}
			--]]
		end
	
		return OpCodes
	end
	
	OpProperties.Map = OpProperties:Mapper()
end

local Instruction = {}
do
	Instruction.__index = Instruction

	function Instruction:new(value, encoding)
		self = setmetatable({}, self)
		self._value = value
		self._encoding = encoding or enum.OpCodeEncoding.None
		self._stated = false

		return self
	end

	function Instruction:GetProperties()
		local properties = OpProperties.Map[self:Code()]

		if properties then
			--self._properties = properties
			
			return properties
		else
			-- print("unhandled operation code (" .. self:Code() .. ")", debug.traceback())
			
			return OpProperties.Map[0]
		end
	end

	function Instruction:Value()
		return self._value
	end

	function Instruction:A()
		return bit32.band(bit32.rshift(self._value, 8), 0xFF)
	end

	function Instruction:B()
		return bit32.band(bit32.rshift(self._value, 16), 0xFF)
	end

	function Instruction:C()
		return bit32.band(bit32.rshift(self._value, 24), 0xFF)
	end

	function Instruction:D()
		return bit32.arshift(self._value, 16)
	end

	function Instruction:E()
		return bit32.arshift(self._value, 8)
	end
	
	function Instruction:Aux()
		return self:Value() or bit32.band(bit32.rshift(self._value, 8), 0xFF) - 1
	end
	
	function Instruction:Code()
		local rawCode = bit32.band(self:Value(), 0xFF)

		if self._encoding == enum.OpCodeEncoding.Client then
			rawCode = rawCode * 203
		end
		
		--rawCode = LuaU.GET_OPCODE(self:Value())
		
		return rawCode
	end
end

local Constant = {}
do
	Constant.__index = Constant

	function Constant:new(value, type, enum)
		self = setmetatable({}, self)
		self._value = value
		self._type = type
		self._enum = enum

		return self
	end
	
	function Constant:Value()
		return self._value
	end
	
	function Constant:Type()
		return self._type
	end

	function Constant:Enum()
		return self._enum
	end
end

local LineInfo = {}
do
	LineInfo.__index = LineInfo

	function LineInfo:new()
		self = setmetatable({}, self)
		self.LineGapLog = 0
		self.LineInfoList = {}
		self.AbsLineInfoList = {}

		return self
	end
end

local DebugInfo = {}
do
	DebugInfo.__index = DebugInfo

	function DebugInfo:new()
		local self = setmetatable({}, self)
		self.Locals = {}
		self.Upvalues = {}

		return self
	end

	function DebugInfo:ToString()
		return "DebugInfo enabled."
	end
end

local LocalVariable = {}
do
	LocalVariable.__index = LocalVariable

	function LocalVariable:new(name, startPc, endPc, slot)
		local self = setmetatable({}, self)
		self.Name = name
		self.StartPc = startPc
		self.EndPc = endPc
		self.Slot = slot

		return self
	end
end

local BinaryExpression = {}
do
	BinaryExpression.__index = BinaryExpression

	function BinaryExpression:new(operation)
		self = setmetatable({}, self)
		self.Operation = operation

		return self
	end
	
	function BinaryExpression:Value()
		return "%s%i " .. self.operation .. " %s%i"
	end

	function BinaryExpression:GetBinaryOperationPrecedence(operation)
		if operation == enum.BinaryOperation.And or
		   operation == enum.BinaryOperation.Or then
			return 1
		elseif operation == enum.BinaryOperation.CompareNe or
			   operation == enum.BinaryOperation.CompareEq or
			   operation == enum.BinaryOperation.CompareGe or
			   operation == enum.BinaryOperation.CompareGt or
			   operation == enum.BinaryOperation.CompareLe or
			   operation == enum.BinaryOperation.CompareLt then
			return 2
		elseif operation == enum.BinaryOperation.Add or
			   operation == enum.BinaryOperation.Subtract then
			return 3
		elseif operation == enum.BinaryOperation.Multiply or
			   operation == enum.BinaryOperation.Divide or
			   operation == enum.BinaryOperation.Modulus then
			return 4
		elseif operation == enum.BinaryOperation.Concat then
			return 5
		elseif operation == enum.BinaryOperation.Power then
			return 6
		else
			return 0
		end
	end
	
	function BinaryExpression:BinaryOperationChar(operation)
		if operation == enum.BinaryOperation.Add then
			return "+"
		elseif operation == enum.BinaryOperation.Subtract then
			return "-"
		elseif operation == enum.BinaryOperation.Multiply then
			return "*"
		elseif operation == enum.BinaryOperation.Divide then
			return "/"
		elseif operation == enum.BinaryOperation.FloorDivide then
			return "//"
		elseif operation == enum.BinaryOperation.Modulus then
			return "%"
		elseif operation == enum.BinaryOperation.Power then
			return "^"
		elseif operation == enum.BinaryOperation.Concat then
			return "..."
		elseif operation == enum.BinaryOperation.CompareNe then
			return "~="
		elseif operation == enum.BinaryOperation.CompareEq then
			return "=="
		elseif operation == enum.BinaryOperation.CompareGe then
			return ">="
		elseif operation == enum.BinaryOperation.CompareGt then
			return ">"
		elseif operation == enum.BinaryOperation.CompareLe then
			return "<="
		elseif operation == enum.BinaryOperation.CompareLt then
			return "<"
		elseif operation == enum.BinaryOperation.And then
			return "and"
		elseif operation == enum.BinaryOperation.Or then
			return "or"
		end
		
		--error("Unexpected binary operation")
	end
	
	function BinaryExpression:GetBinaryOperation(code)
		if code == enum.OpCode.ADDK or code == enum.OpCode.ADD then
			return (enum.BinaryOperation.Add)
		elseif code == enum.OpCode.SUBRK or code == enum.OpCode.SUBK or code == enum.OpCode.SUB then
			return (enum.BinaryOperation.Subtract)
		elseif code == enum.OpCode.MULK or code == enum.OpCode.MUL then
			return (enum.BinaryOperation.Multiply)
		elseif code == enum.OpCode.DIVRK or code == enum.OpCode.DIVK or code == enum.OpCode.DIV then
			return (enum.BinaryOperation.Divide)
		elseif code == enum.OpCode.IDIVK or code == enum.OpCode.IDIV then
			return (enum.BinaryOperation.FloorDivide)
		elseif code == enum.OpCode.MODK or code == enum.OpCode.MOD then
			return (enum.BinaryOperation.Modulus)
		elseif code == enum.OpCode.POWK or code == enum.OpCode.POW then
			return (enum.BinaryOperation.Power)
		elseif code == enum.OpCode.CONCAT then
			return (enum.BinaryOperation.Concat)
		elseif code == enum.OpCode.JUMPIFEQ then
			return (enum.BinaryOperation.CompareNe)
		elseif code == enum.OpCode.JUMPIFNOTEQ then
			return (enum.BinaryOperation.CompareEq)
		elseif code == enum.OpCode.JUMPXEQKNIL
		or code == enum.OpCode.JUMPXEQKB
		or code == enum.OpCode.JUMPXEQKN
		or code == enum.OpCode.JUMPXEQKS then
			return (enum.BinaryOperation.CompareEq)
		elseif code == enum.OpCode.JUMPIFLE then
			return (enum.BinaryOperation.CompareGe)
		elseif code == enum.OpCode.JUMPIFLT then
			return (enum.BinaryOperation.CompareGt)
		elseif code == enum.OpCode.JUMPIFNOTLE then
			return (enum.BinaryOperation.CompareLe)
		elseif code == enum.OpCode.JUMPIFNOTLT then
			return (enum.BinaryOperation.CompareLt)
		elseif code == enum.OpCode.ORK or code == enum.OpCode.OR then
			return (enum.BinaryOperation.Or)
		elseif code == enum.OpCode.ANDK or code == enum.OpCode.AND then
			return (enum.BinaryOperation.And)
		end
	
		--error("Unexpected operation code")
	end
end

local function deserialize(bytecode)
	local limit = 16384

	local slices = {}

	local totalLength = 0

	for i = 0, #bytecode, limit do
		local id = #slices + 1
		slices[id] = string.sub(bytecode, i + 1, i + limit)
		
		totalLength = totalLength + #slices[id]

		--print("slice", i + 1, #slices[id], i + limit, totalLength)
	end

	local reader, func = {}, {}

	local TypeVersion = 2

	local version = nil
	local typesVersion = 0

	local pos = 0

	do
		function reader:Clone(src)
			local dest = {}

			for i, v in pairs(src) do
				if type(v) == "table" then
					dest[i] = reader:Clone(v)
				else
					dest[i] = v
				end
			end

			return dest
		end
		function reader:pos() return pos end
		function reader:ReadByte()
			local v = slices[math.floor(pos / limit) + 1]:byte((pos % limit) + 1, (pos % limit) + 1)
			pos = pos + 1
			return v
		end
		function reader:ReadChar()
			return string.char(reader:ReadByte())
		end
		function reader:ReadInt32()
			local b = { reader:ReadByte(), reader:ReadByte(), reader:ReadByte(), reader:ReadByte() }
			local uint32_t = (b[4] * 256^3) + (b[3] * 256^2) + (b[2] * 256) + b[1]
			--b[1] + b[2] * 256 + b[3] * 65536 + b[4] *16777216
			return uint32_t
		end
		function reader:ReadUInt32() -- alias
			return reader:ReadInt32()
		end
		function reader:ReadVarInt()
			local result, shift = 0, 0
			
			local b
			
			repeat
				b = reader:ReadByte()
				result = bit32.bor(
					result, 
					bit32.lshift(
						bit32.band(
							b,
							0x7F),
						shift)
				)
				shift = shift + 7
			until bit32.band(b, 128) == 0
			
			return result
		end
		--[[
		function reader:ReadString(strings) 
			local id = reader:ReadVarInt();

			if id == 0 or id > #strings then
				return ""
			else
				return strings[id - 1]
			end
		end
		--]]
		function reader:ReadString(strings, inChunk)
			if not inChunk then
				local result = ""
				
				local len = reader:ReadVarInt()
				
				--local oldPos = pos

				for i = 1, len do
					result = result .. reader:ReadChar()
				end

				--pos = oldPos + len

				return result
			elseif inChunk then
				local id = reader:ReadVarInt();
				
				if id == 0 or id > #strings + 1 then
					return ""
				else
					return strings[id - 1]
				end
			end
		end
		function reader:ReadSingle()
			local b = {};

			for i = 1, 4 do
				table.insert(b, reader:ReadByte());
			end

			local str = string.char(b[1], b[2], b[3], b[4])

			local stringunpack = function(data)
				-- Ensure the input is exactly 4 bytes
				if #data ~= 4 then
					error("Invalid data length for float, must be 4 bytes")
				end
			
				-- Read bytes in little-endian order
				local b1 = data:byte(1)
				local b2 = data:byte(2)
				local b3 = data:byte(3)
				local b4 = data:byte(4)
			
				-- Combine bytes into a 32-bit integer
				local int = b1 + (b2 * 256) + (b3 * 65536) + (b4 * 16777216)
			
				-- Extract sign (1 bit), exponent (8 bits), and fraction (23 bits)
				local sign = (int >= 0x80000000) and -1 or 1
				local exponent = (math.floor(int / 8388608) % 256) - 127
				local fraction = int % 8388608
			
				-- Handle special cases
				if exponent == 128 then
					if fraction == 0 then
						return sign * math.huge -- Infinity
					else
						return 0 / 0 -- NaN (Not a Number)
					end
				elseif exponent == -127 then
					if fraction == 0 then
						return 0.0 * sign -- Zero
					else
						-- Denormalized number
						return sign * math.ldexp(fraction / 8388608, -126)
					end
				end
				
				-- Normalized number
				return sign * math.ldexp(1 + fraction / 8388608, exponent)
			end

			local result = (string.unpack and string.unpack("<f", str)) or (stringunpack(str))

			return result
		end
		function reader:ReadFloat() -- alias
			return reader:ReadSingle()
		end
		function reader:ReadDouble()
			local function BytesToDouble(b)
				local sign = (b[8] > 127) and -1 or 1
				local exponent = ((b[8] % 128) * 16) + math.floor(b[7] / 16)
				local mantissa = ((b[7] % 16) * 0x1000000000000) + (b[6] * 0x10000000000) + (b[5] * 0x100000000) +
								 (b[4] * 0x1000000) + (b[3] * 0x10000) + (b[2] * 0x100) + b[1]
			
				if exponent == 0 then
					return sign * mantissa * 2^(-1074)
				elseif exponent == 0x7FF then
					if mantissa == 0 then
						return sign * math.huge
					else
						return 0/0 -- NaN
					end
				end
			
				return sign * (1 + mantissa * 2^-52) * 2^(exponent - 1023)
			end

			local b = {};
			for i = 1, 8 do
				table.insert(b, reader:ReadByte());
			end
			local str = '';
			for i = 1, 8 do
				str = str .. string.char(b[i]);
			end
			--local result = string.unpack("<d", str)
			return BytesToDouble(b)
		end
		function reader:ReadBytes(count)
			local result = string.sub(slices[math.floor(pos / limit) + 1], 0, count)
			
			if (#result ~= count) then
				error("Remaining size of stream is smaller than requested number of bytes.")
			end
			
			pos = pos + count
			return result;
		end
		function reader:ReadASCII(length)
			return reader:ReadBytes(length)
		end



		--[[
		function reader:ReadStrings()
			local strings = {}
			
			local size = reader:ReadVarInt()
			while (#strings < size) do
				local stringSize = reader:ReadVarInt()
				
				local String = reader:ReadASCII(stringSize)
				
				print(String)
				
				insert(strings, String)
			end

			return strings;
		end
		--]]
		function reader:ReadStrings(size)
			local strings = {}
			
			for i = 0, size - 1 do
				local string = reader:ReadString(strings, false)
				strings[i] = string
			end
			
			return strings
		end
		function reader:ReadFunction(chunk, functions, strings, size)
			local Function = func:new()

			Function.Id = len(functions)
			
			Function.MaxStackSize = reader:ReadByte()
			Function.Parameters = reader:ReadByte()

			Function.MaxUpvalues = reader:ReadByte()
			--Function.Upvalues = Function.MaxUpvalues
			Function.IsVararg = reader:ReadBoolean()
			
			if (version >= 4) then
				Function.Flags = reader:ReadByte()
				--Function.Info = reader:ReadString()
				
				if (true) then
					if (typesVersion == 1) then
						local typeSize = reader:ReadVarInt()
						
						if typeSize ~= 0 then
							print("TYPE", pos + 1, (pos % limit) + 1, math.floor(pos / limit) + 1, #slices[math.floor(pos / limit) + 1])

							Function.Types = string.byte(slices[math.floor(pos / limit) + 1], (pos % limit) + 1, #slices[math.floor(pos / limit) + 1]) 
							--Function.Types = reader:ReadBytes(typeSize)

							assert(typeSize == (2 + Function.Parameters))
							--assert(Function.Types[0] == enum.BytecodeTypes.Function)
							--assert(Function.Types[1] == Function.Parameters)

							local headersize = bit32.btest(typeSize, 0x80) and 4 or 3

							Function.SizeTypeInfo = headersize + typeSize

							if headersize == 4 then
								Function.TypeInfo[1] = bit32.bor(bit32.band(typeSize, 127), bit32.lshift(1, 7))
								Function.TypeInfo[2] = bit32.rshift(typeSize, 7)
								Function.TypeInfo[3] = 0
								Function.TypeInfo[4] = 0
							else
								Function.TypeInfo[1] = typeSize
								Function.TypeInfo[2] = 0
								Function.TypeInfo[3] = 0
							end
							
							--reader:Clone()
							
							pos = pos + typeSize;
						end
					elseif (typesVersion == 2 or typesVersion == 3) then
						local typeSize = reader:ReadVarInt()

						if typeSize ~= 0 then
							Function.TypeInfo = {}

							for i = 1, typeSize do
								Function.TypeInfo[i] = 0
							end

							Function.SizeTypeInfo = typeSize

							pos = pos + typeSize
						end
					end
				else
					local typeSize = reader:ReadVarInt()
					
					if (typeSize ~= 0 and typesVersion == 1) then
						assert(typeSize == (2 + Function.Parameters))
						--assert(Function.Types[0] == enum.BytecodeTypes.Function)
						--assert(Function.Types[1] == Function.Parameters)
					end

					pos = pos + typeSize
				end
			end

			Function.sizeCode = reader:ReadVarInt()
			Function.Instructions = reader:ReadInstructions(Function.sizeCode)
			
			Function.sizeConstants = reader:ReadVarInt()
			Function.Constants = reader:ReadConstants(strings, Function.sizeConstants)
			
			Function.sizeProtos = reader:ReadVarInt()
			Function.Functions = reader:ReadFunctions(nil, functions, nil, Function.sizeProtos)
			Function.GlobalFunctions = functions

			Function.LineDefined = reader:ReadVarInt()
			Function.DebugName = reader:ReadString(strings, true)

			Function.LineInfo = reader:ReadLineInfo(Function.sizeCode)
			Function.DebugInfo = reader:ReadDebugInfo(strings)
			
			--print(Function.LineDefined, Function.DebugName, Function.LineInfo, Function.DebugInfo)
			
			return Function
		end
		function reader:ReadFunctions(chunk, funcs, strings, size)
			local functions = {}

			for i = 0, size - 1 do
				if strings and not funcs then
					functions[i] = reader:ReadFunction(chunk, functions, strings, size)
				elseif funcs and not strings then
					local fId = reader:ReadVarInt()
					functions[i] = fId
				end
			end
			
			return functions
		end
		--[[
		function reader:ReadFunctions(strings)
			local functions = {}
			
			local sizeProtos = reader:ReadVarInt();
			for i = 1, sizeProtos do
				insert(functions, reader:ReadVarInt())
			end
			
			return functions
		end
		--]]
		function reader:ReadInstructions(size)
			--local size = reader:ReadVarInt()
	   
			local instructions = {}
			
			local ins = 0
			while (ins < size) do
				local readUInt32 = reader:ReadUInt32()
				local instruction = Instruction:new(readUInt32)
				local properties = instruction:GetProperties()
	   
				if (properties.Code == enum.OpCode.NOP) then
					print("Unexpected NOP instruction.")
				end

				insert(instructions, instruction)

				ins = ins + 1
				
				-- print("Inserted", ins, properties.Name, ("A:%d, B:%d, C:%d, D:%d, E:%d, Aux:%d"):format(instruction:A(), instruction:B(), instruction:C(), instruction:D(), instruction:E(), instruction:Aux()))

				if (properties.HasAux) then
					readUInt32 = reader:ReadUInt32()
					instruction = Instruction:new(readUInt32)
					--properties = instruction:GetProperties()

					insert(instructions, instruction)

					ins = ins + 1

					properties.Aux = instruction:Aux()

					-- print("Inserted AUX", ins, properties.Name, ("A:%d, B:%d, C:%d, D:%d, E:%d, Aux:%d"):format(instruction:A(), instruction:B(), instruction:C(), instruction:D(), instruction:E(), instruction:Aux()))
				end
			end
			
			return instructions
		end
		function reader:ReadConstant(strings, constants)
			local constant = reader:ReadByte() 

			local constantEnum = true or find(enum.ConstantType, constant)
			
			if (not constantEnum) then
				error(("Constant is not defined (%d)"):format(constant))
			end
			
			local r_Constant
			
			if (constant == enum.ConstantType.Nil) then
				r_Constant = Constant:new(nil, constant, constantEnum)
			elseif (constant == enum.ConstantType.Bool) then
				r_Constant = Constant:new(reader:ReadBoolean(), constant, constantEnum)
			elseif (constant == enum.ConstantType.Number) then
				r_Constant = Constant:new(reader:ReadDouble(), constant, constantEnum)
			elseif (constant == enum.ConstantType.String) then
				local string = reader:ReadString(strings, true)

				r_Constant = Constant:new(string, constant, constantEnum)
			elseif (constant == enum.ConstantType.Import) then
				local id = reader:ReadUInt32()
				local count = bit32.band(bit32.rshift(id, 30), 1023)

				local names = {}
				
				if (count > 0) then
					local idx = bit32.band(bit32.rshift(id, 20), 1023)
					table.insert(names, {constant = constants[idx], index = idx})
				end
				
				if (count > 1) then
					local idx = bit32.band(bit32.rshift(id, 10), 1023)
					table.insert(names, {constant = constants[idx], index = idx})
				end

				if (count > 2) then
					local idx = bit32.band(bit32.rshift(id, 0), 1023)
					table.insert(names, {constant = constants[idx], index = idx})
				end
				
				r_Constant = Constant:new(names, constant, constantEnum)
			elseif (constant == enum.ConstantType.Table) then 
				local size = reader:ReadVarInt();

				local keys = {}

				for i = 0, size - 1 do
					keys[i] = constants[reader:ReadVarInt()]
				end

				r_Constant = Constant:new(keys, constant, constantEnum)
			elseif (constant == enum.ConstantType.Closure) then
				r_Constant = Constant:new(reader:ReadVarInt(), constant, constantEnum)
			elseif (constant == enum.ConstantType.Vector) then
				local vectors = {}

				table.insert(vectors, reader:ReadFloat())
				table.insert(vectors, reader:ReadFloat())
				table.insert(vectors, reader:ReadFloat())
				table.insert(vectors, reader:ReadFloat())

				r_Constant = Constant:new(vectors, constant, constantEnum)
			end
			
			if r_Constant then
				return r_Constant
			end
			
			error(("No constant returned for type (%d)"):format(constant))
		end
		function reader:ReadConstants(strings, size)
			local constants = {}

			for i = 0, size - 1 do
				constants[i] = reader:ReadConstant(strings, constants)
			end

			return constants;
		end
		function reader:ReadLineInfo(size)
			local lineInfo = nil

			if (reader:ReadBoolean()) then
				lineInfo = LineInfo:new()

				lineInfo.LineGapLog = reader:ReadByte()

				local intervals = bit32.rshift((size - 1), lineInfo.LineGapLog) + 1
				local absoffset = bit32.band(size + 3, bit32.bnot(3))
				
				lineInfo.LineInfoList = {}

				local lastOffset = 0
				for i = 0, size - 1 do
					lastOffset = lastOffset + reader:ReadByte()
					lineInfo.LineInfoList[i] = lastOffset
				end

				lineInfo.AbsLineInfoList = {}

				local lastLine = 0
				for i = 0, intervals - 1 do
					lastLine = lastLine + reader:ReadInt32()
					lineInfo.AbsLineInfoList[i] = lastLine
				end
			else
				--print("Line information is disabled, skipping.")
			end

			return lineInfo;
		end
		function reader:ReadDebugInfo(strings)
			local debugInfo = nil

			if (reader:ReadBoolean()) then
				debugInfo = DebugInfo:new()

				local sizeVars = reader:ReadVarInt()

				local localVariables = {}

				for i = 0, sizeVars - 1 do
					local variable = LocalVariable:new()

					variable.Name = reader:ReadString(strings, true)
					variable.StartPc = reader:ReadVarInt()
					variable.EndPc = reader:ReadVarInt()
					variable.Slot = reader:ReadByte()

					localVariables[i] = variable
				end

				local sizeUpvals = reader:ReadVarInt()

				local upvalues = {}

				for i = 0, sizeUpvals - 1 do
					upvalues[i] = reader:ReadString(strings, true)
				end

				debugInfo.Locals = localVariables
				debugInfo.Upvalues = upvalues
			else
				--print("Debug information is disabled, skipping.")
			end

			return debugInfo;
		end
		
		function reader:ReadBoolean()
			return reader:ReadByte() == 1
		end
	end
	do
		function func:new()
			local Table = {}

			Table.Id = nil
			Table.MaxStackSize = nil
			Table.Parameters = 0
			Table.MaxUpvalues = nil
			Table.Upvalues = {}
			Table.IsVararg = false
			Table.Flags = nil
			Table.Types = nil
			Table.LineDefined = nil
			Table.DebugName = nil
			Table.Constants = {}
			Table.Instructions = {}
			Table.Functions = {}
			Table.LineInfo = nil
			Table.DebugInfo = nil
			Table.TypeInfo = {}
			Table.SizeTypeInfo = 0

			Table.GlobalFunctions = {}
			Table.SizeCode = nil

			function Table:GetFunction(fId)
				return Table.GlobalFunctions[Table.Functions[fId]]
			end

			function Table:GetConstant(pc)
				--333.0
				--21905775.0

				return Table.Constants[Table.Instructions[pc]:Value()]
			end

			return Table
		end
	end

	local min_version, target_version, max_version = 3, 5, 6
	local type_min_version, type_target_version, type_max_version = 1, 3, 3

	local chunk = {}

	version = reader:ReadByte()
	if (version == 0) then
		error(reader:ReadString())
	end

	if (version < min_version or version > max_version) then
		error(("Bytecode version mismatch, expected version %d...%d, got %d"):format(min_version, max_version, version));
	end

	if version >= 4 then
		typesVersion = reader:ReadByte()

		if (typesVersion < type_min_version or typesVersion > type_max_version) then
			error(("Bytecode version mismatch, expected version %d...%d, got %d"):format(type_min_version, type_max_version, typesVersion));
		end
	end

	chunk.sizeStrings = reader:ReadVarInt()
	chunk.Strings = reader:ReadStrings(chunk.sizeStrings, false)

	local userdataTypeLimit = (64 + 32) - (64)

	if (typesVersion == 3) then
		local index = reader:ReadByte()

		while (index ~= 0) do
			local name = reader:ReadString(chunk.sizeStrings, false);

			if (index - 1) < userdataTypeLimit then
				print("userdataTypeLimit")
			end

			index = reader:ReadByte()
		end
	end

	chunk.sizeProtos = reader:ReadVarInt()

	chunk.GlobalFunctions = {}
	chunk.Functions = reader:ReadFunctions(chunk, nil, chunk.Strings, chunk.sizeProtos)
	
	chunk.MainIndex = reader:ReadVarInt()

	return chunk, chunk.Functions[chunk.MainIndex] --or chunk.Functions[chunk.MainIndex + 1]
end



--setclipboard(crypt.base64.encode(dumpstring()))



-- #fff255
local function disassemble(scr, newSettings)
	local settings = {
		argument = "arg";
		variable = "var";
		upvalue = "upval";
		reference = "ref";
		
		OpCodes = true;

		KeepRedundance = true;
		ShowRedundance = true;

		Base64 = false;
	}

	if newSettings then
		for i, v in pairs(newSettings) do
			settings[i] = v
		end
	end

	local Bytecode = scr

	if typeof then
		if (string.lower(typeof(scr)) == "instance") then
			if not (getscriptbytecode or dumpstring) then error("Executor does not support getscriptbytecode or dumpstring") end
			Bytecode = getscriptbytecode(scr) or dumpstring(scr);
		end
		
		if type(Bytecode) == "table" then
			-- I just prefer bytecode strings
			local t = Bytecode;
			for i = 1, #t do
				Bytecode = Bytecode .. string.char(t[i]);
			end
		end

		writefile("Base64ByteFile.txt", base64.encode(Bytecode))
	else
		if settings.Base64 then
			Bytecode = base64.decode(scr)
		end
	end
	
	local Chunk, Main = deserialize(Bytecode)
	--local Main = Chunk.Functions[Chunk.MainIndex] --or Chunk.Functions[Chunk.MainIndex + 1]
	
	if not Main then return error("Main proto doesn't exist.") end
	
	local LocalAssignment = {}
	do
		LocalAssignment.__index = LocalAssignment

		function LocalAssignment:new(var, val)
			self = setmetatable({}, self)
			self._var = var
			self._val = val
			
			return self
		end
	end
	
	local Object = {}; 
	local Aux = {}; 
	local Register = {}; 
	local Assignment = {};  
	local Declaration = {}; 
	local TableAssign = {}; 
	local TableIndex = {}; 
	local TableNew = {}; 
	local Expression = {};
	local Operation = {};
	local Call = {}; 
	local FastCall = {};
	local Plain = {};
	local Repeat = {}; 
	local While = {}; 
	local If = {}; 
	local IfElse = {};
	local ForNumeric = {};
	local ForGeneric = {};
	local End = {};
	local NameCall = {};
	local Closure = {}; 
	local Block = {};

	do
		Object._innerBlocks = {}

		function Object:IsA(name)
			return name and string.lower(name) == string.lower(self._object) or not name and self._object
		end

		function Object:Assign(tbl, name)
			local mt = getmetatable(tbl)

			setmetatable(tbl, nil)

			tbl._registers = {}
			tbl._values = {}
			tbl._references = 1
			tbl._local = false
			tbl._redundant = false
			tbl._address = tostring(tbl)
			tbl._object = name or tostring(tbl)

			setmetatable(tbl, mt)
		end

		function Object:Values(statement, ...)
			return {Statement = statement}
		end

		function Object:RedundanceSet(var, state, block)
			if settings.KeepRedundance then
				local register = Register:Get(var, block)
				
				if register then
					register._redundant = state
				end

				return register and register._output or nil
			else
				local declaration = Declaration:Get(var, block)
				local object = declaration and declaration._val or nil
				
				if declaration then
					declaration._redundant = state
				end

				return object
			end
		end

		function Object:RedundanceGet(var, block, registers, decrement, index)
			if settings.KeepRedundance then
				local register = Register:Get(var, block)

				if register then
					if decrement then self:Decrement(register) end

					if registers then
						table.insert(registers, register)
					end
				end

				local result = index == "" and register or register and register._output or nil

				return result
			else
				local SearchBlock
				do
					SearchBlock = function(block)
						local declaration = Declaration:Get(var, block)

						local result = index == "" and declaration or index and declaration and (type(declaration[index]) == "table" and select(1, table.unpack(declaration[index])) or declaration[index]) or declaration and declaration._val or nil

						return result, declaration and declaration._isVars
					end
				end

				local recursed = false

				local result, isVars = SearchBlock(block)

				if not result then
					recursed = true

					-- print("RedundanceGet NO RESULT FOR", var, "RECURSING", debug.traceback())

					for i = #self._innerBlocks, 1, -1 do
						local block = self._innerBlocks[i]

						if block then
							result, isVars = SearchBlock(block)

							if result then
								-- print("GOT RESULT", result)

								break
							end
						end
					end
				end

				if not result then
					-- print("RedundanceGet NO RESULT FOR", var, debug.traceback())

					--recurse(self._innerBlocks, print)
				end

				return result, isVars, recursed
			end
		end

		function Object:AddInnerBlock(block)
			table.insert(self._innerBlocks, block)

			return #self._innerBlocks
		end

		function Object:RemoveInnerBlock(index)
			table.remove(self._innerBlocks, index)
		end

		function Object:Decrement(object)
			for key, value in pairs(object._registers) do
				value._references = value._references - 1
			end

			object._references = object._references - 1
		end
	end

	do
		Aux.__index = Aux
		Aux.__tostring = function() return "Aux" end
		Aux._auxs = {}
		Aux._pcMap = {}
		
		function Aux:new(instruction, block)
			self = setmetatable({}, self)
			self._instruction = instruction
			self._block = block
			
			Object:Assign(self, tostring(self))
			
			self._index = insert(Aux._auxs, self)
			
			insert(Aux._pcMap, instruction, self)
			
			self._output = self:Write()
			
			return self
		end
		
		function Aux:Get(index, block)
			local register = self._pcMap[index]

			if register then
				register._references = register._references + 1
			end

			return register
		end
		
		function Aux:Write()
			return ("Aux")
		end

		Aux.IsA = Object.IsA
	end

	do
		Register.__index = Register
		Register.__tostring = function() return "Register" end
		Register._registers = {}
		Register._pcMap = {}
		Register._stack = {}
		Register._top = {}
		Register._topLine = {}
		
		function Register:new(name, var, block)
			self = setmetatable({}, self)
			self._name = name
			self._var = var
			self._block = block

			if not Register._stack[block] then
				Register._stack[block] = {}
			end

			Register._stack[block][var] = var

			table.insert(Register._topLine, var)

			local LastRegister = Register._topLine[#Register._topLine - 1]

			Register._top[block] = LastRegister

			if #Register._topLine > 2 then
				table.remove(Register._topLine, #Register._topLine - 2)
			end
			
			Object:Assign(self, tostring(self))
			
			self._index = insert(Register._registers, self)
			
			insert(Register._pcMap, var, self)
			
			self._output = self:Write()
			
			return self
		end
		
		function Register:Get(index, block)
			local register = self._pcMap[index]

			if not register then
				if block._parent then
					register = self:Get(index, block._parent)
				end
			end

			if register then
				register._references = register._references + 1
			end

			return register
		end
		
		function Register:Rewrite(identifier)
			return (identifier)
		end

		function Register:Write()
			if type(self._var) == "number" then
				return ("%s%i"):format(self._name, self._var)
			else
				return ("%s%s"):format(self._name, tostring(self._var))
			end
 		end

		Register.IsA = Object.IsA
	end
	
	do
		Assignment.__index = Assignment
		Assignment.__tostring = function() return "Assignment" end
		Assignment._assignments = {}
		Assignment._pcMap = {}
		
		function Assignment:new(target, var, block)
			self = setmetatable({}, self)
			self._target = target
			self._var = var
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not Assignment._assignments[block] and not Assignment._pcMap[block] then
				Assignment._assignments[block] = {}
				Assignment._pcMap[block] = {}
			end
			
			self._index = insert(Assignment._assignments[block], self)
			
			self._output = self:Write()

			return self
		end
		
		function Assignment:Get(index, block)
			local assignment = self._pcMap[block]
			assignment = assignment and assignment[index]
			
			if assignment then
				for key, value in pairs(assignment._registers) do
					value._references = value._references + 1
				end

				assignment._references = assignment._references + 1
			end

			return assignment
		end
		
		function Assignment:Write()
			return ("%s = %s"):format(tostring(self._target), self._var._registers[1]._output)
		end

		Assignment.IsA = Object.IsA
	end
	
	do
		Declaration.__index = Declaration
		Declaration.__tostring = function() return "Declaration" end
		Declaration._declarations = {}
		Declaration._pcMap = {}
		
		function Declaration:new(var, val, block, isArg)
			self = setmetatable({}, self)
			self._var = var
			self._val = val
			self._block = block
			self._isVars = type(var) == "table"
			self._call = false
			self._redundance = not (val == "{}")
			self._var_indexes = {}

			self._isArg = isArg

			Object:Assign(self, tostring(self))

			if not Declaration._declarations[block] and not Declaration._pcMap[block] then
				Declaration._declarations[block] = {}
				Declaration._pcMap[block] = {}
			end
			
			self._index = insert(Declaration._declarations[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					table.insert(self._var_indexes, value)
					
					insert(Declaration._pcMap[block], value, self)
				end
			else
				table.insert(self._var_indexes, var)

				insert(Declaration._pcMap[block], var, self)
			end

			self._output = self:Write()

			return self
		end
		
		function Declaration:Get(index, block)
			local declaration = self._pcMap[block]
			declaration = declaration and declaration[index]

			if not declaration then
				if block and block._parent then
					declaration = self:Get(index, block._parent)
				end
			end

			if declaration then
				for key, value in pairs(declaration._registers) do
					value._references = value._references + 1
				end

				declaration._references = declaration._references + 1
			end

			return declaration
		end

		function Declaration:Renew(var, val)
			self._var = var
			self._val = val

			self._output = self:Write()
		end
		
		function Declaration:Decrement()
			for key, value in pairs(self._registers) do
				value._references = value._references - 1
			end

			self._references = self._references - 1
		end

		function Declaration:GetVar()
			return type(self._var) == "table" and table.unpack(self._var) or self._var
		end

		function Declaration:Write()
			local register
			local output = ""

			if type(self._var) == "table" then
				self._isVars = true

				for i = 1, #self._var do
					register = Register:new(self._isArg and settings.argument or settings.variable, self._var[i], self._block)
					table.insert(self._registers, register)

					output = output .. register._output

					if i < #self._var then
						output = output .. ", "
					end
				end
			else
				register = Register:new(self._isArg and settings.argument or settings.variable, self._var, self._block)
				table.insert(self._registers, register)

				output = register._output
			end

			if not self._call then
				return ("%s = %s"):format(output, tostring(type(self._val) == "table" and self._val._output or self._val));
			else
				return ("%s"):format(tostring(type(self._val) == "table" and self._val._output or self._val));
			end
		end

		Declaration.IsA = Object.IsA
	end
	
	do
		TableAssign.__index = TableAssign
		TableAssign.__tostring = function() return "TableAssign" end
		TableAssign._assignments = {}
		TableAssign._pcMap = {}
		
		function TableAssign:new(var, key, val, block)
			self = setmetatable({}, self)
			self._var = var
			self._key = key
			self._val = val
			self._block = block

			Object:Assign(self, tostring(self))

			if not TableAssign._assignments[block] and not TableAssign._pcMap[block] then
				TableAssign._assignments[block] = {}
				TableAssign._pcMap[block] = {}
			end
			
			self._index = insert(TableAssign._assignments[block], self)
			
			self._output = self:Write()

			return self
		end
		
		function TableAssign:Get(index, block)
			local tableAssign = self._pcMap[block]
			tableAssign = tableAssign and tableAssign[index]
			
			if tableAssign then
				for key, value in pairs(tableAssign._registers) do
					value._references = value._references + 1
				end

				tableAssign._references = tableAssign._references + 1
			end

			return tableAssign
		end
		
		function TableAssign:Write()
			if self._val then
				return ("%s[%s] = %s"):format((self._var:IsA("Declaration") and self._var._registers[1]._output) or (self._var:IsA("Register") and self._var._output), self._key and tostring(self._key._output), tostring(self._val._output))
			else
				return ("%s[%s]"):format((self._var and self._var:IsA("Declaration") and self._var._registers[1]._output) or (self._var and (self._var:IsA("Register") or self._var:IsA("Plain")) and self._var._output), self._key and tostring(self._key._output))
			end
		end

		TableAssign.IsA = Object.IsA
	end
	
	do
		TableIndex.__index = TableIndex
		TableIndex.__tostring = function() return "TableIndex" end
		TableIndex._indexes = {}
		TableIndex._pcMap = {}
		
		function TableIndex:new(var, index, block)
			self = setmetatable({}, self)
			self._var = var
			self._key = index
			self._block = block
			
			Object:Assign(self, tostring(self))

			if not TableIndex._indexes[block] and not TableIndex._pcMap[block] then
				TableIndex._indexes[block] = {}
				TableIndex._pcMap[block] = {}
			end
			
			self._index = insert(TableIndex._indexes[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(TableIndex._pcMap[block], value, self)
				end
			else
				insert(TableIndex._pcMap[block], var, self)
			end
			
			self._output = self:Write()

			return self
		end
		
		function TableIndex:Get(index, block)
			local tableIndex = self._pcMap[block]
			tableIndex = tableIndex and tableIndex[index]
			
			if tableIndex then
				for key, value in pairs(tableIndex._registers) do
					value._references = value._references + 1
				end

				tableIndex._references = tableIndex._references + 1
			end

			return tableIndex
		end
		
		function TableIndex:Write()
			local indexes = ""

			if type(self._key) == "table" then
				for i = 1, #self._key do
					indexes = indexes .. ("[%s]"):format(self._key[i])
				end
			else
				indexes = ("[%s]"):format(self._key)
			end
			
			return ("%s%s"):format(self._var, indexes)
		end

		TableIndex.IsA = Object.IsA
	end

	do
		TableNew.__index = TableNew
		TableNew.__tostring = function() return "TableNew" end
		TableNew._tables = {}
		TableNew._pcMap = {}
		
		function TableNew:new(var, val, block)
			self = setmetatable({}, self)
			self._var = var
			self._val = nil
			self._block = block
			self._argWritten = ""
			self._argsWritten = 0

			self._duptable = (val ~= nil)
			self._initval = val
			self._initvalreverse = {}

			if self._duptable then
				for i, v in pairs(self._initval) do
					self._initvalreverse[v] = i
				end
			end

			self._variable = self._var

			Object:Assign(self, tostring(self))

			if not TableNew._tables[block] and not TableNew._pcMap[block] then
				TableNew._tables[block] = {}
				TableNew._pcMap[block] = {}
			end

			self._index = insert(TableNew._tables[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(TableNew._pcMap[block], value, self)
				end
			else
				insert(TableNew._pcMap[block], var, self)
			end
			
			self._output = self:Write()

			return self
		end
		
		function TableNew:Insert(val)
			if not self._val then self._val = {} end

			table.insert(self._val, val)

			if self._output then
				if not (self._argWritten == "") then
					self._argWritten = self._argWritten .. "\n"
				end
				
				local regex = "{\n%s\n}"
				
				if val._val == "..." then
					self._argWritten = self._argWritten .. ("%s%s"):format("\t", val._output)
				else
					local value = nil

					if val._val:IsA("TableNew") then
						local HandleTable; HandleTable = (function(tbl)
							local regex = "{\n\t%s\n\t}"
							
							local indented = string.gsub(tbl._argWritten, "\n", "\n\t")
							
							return regex:format(indented)
						end)

						value = HandleTable(val._val)
					else
						value = val._val._output
					end

					self._argWritten = self._argWritten .. ("%s[%s] = %s;"):format("\t", val._key._output, value)

					if self._duptable then
						local key = self._initvalreverse[val._key]

						if key then
							self._initvalreverse[val._key] = nil
							self._initval[key] = nil
						end
					end
				end

				self._output = regex:format(self._argWritten)
			else
				self._output = self:Write()
			end
		end

		function TableNew:Get(index, block)
			local tableNew = self._pcMap[block]
			tableNew = tableNew and tableNew[index]
			
			if tableNew then
				for key, value in pairs(tableNew._registers) do
					value._references = value._references + 1
				end

				tableNew._references = tableNew._references + 1
			end

			return tableNew
		end
		
		function TableNew:Write()
			local register
			local output = ""

			if type(self._var) == "table" and false then
				for i = 1, #self._var do
					if i == 1 then self._variable = self._var end

					register = Register:new(settings.variable, self._var[i], self._block)
				end
			else
				register = Register:new(settings.variable, self._var, self._block)

				self._register = register

				table.insert(self._registers, register)
			end

			local result = "{}"

			if type(self._val) == "table" then
				local regex = "{%s}"
				
				for i = 1, #self._val do
					local value = self._val[i]
					
					if type(value) == "table" then
						if value._val._output == "..." then
							self._argWritten = self._argWritten .. ("%s"):format(value._val._output)
						end
					else
						self._argWritten = self._argWritten .. value._val._output
					end

					if i < #self._val then
						self._argWritten = self._argWritten .. ", "
					end
				end

				regex = regex:format(self._argWritten)

				result = regex
			end

			return result
		end

		TableNew.IsA = Object.IsA
	end

	do
		Expression.__index = Expression
		Expression.__tostring = function() return "Expression" end
		Expression._expressions = {}
		Expression._pcMap = {}
		
		function Expression:new(expression, var, block)
			self = setmetatable({}, self)
			self._expression = expression
			self._var = var
			self._block = block

			Object:Assign(self, tostring(self))

			if not Expression._expressions[block] and not Expression._pcMap[block] then
				Expression._expressions[block] = {}
				Expression._pcMap[block] = {}
			end

			self._index = insert(Expression._expressions[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(Expression._pcMap[block], value, self)
				end
			else
				insert(Expression._pcMap[block], var, self)
			end

			self._output = self:Write()

			return self
		end

		function Expression:Get(index, block)
			local expression = self._pcMap[block]
			expression = expression and expression[index]
			
			if expression then
				for key, value in pairs(expression._registers) do
					value._references = value._references + 1
				end

				expression._references = expression._references + 1
			end

			return expression
		end
		
		function Expression:Write()
			return ("%s%s"):format(self._expression, self._var)
		end

		Expression.IsA = Object.IsA
	end

	do
		Operation.__index = Operation
		Operation.__tostring = function() return "Operation" end
		Operation._operations = {}
		Operation._pcMap = {}
		
		function Operation:new(var, operation, var2, block)
			self = setmetatable({}, self)
			self._var_l = var
			self._operation = operation
			self._var_r = var2
			self._var = {var, var2}
			self._block = block

			Object:Assign(self, tostring(self))

			if not Operation._operations[block] and not Operation._pcMap[block] then
				Operation._operations[block] = {}
				Operation._pcMap[block] = {}
			end

			self._index = insert(Operation._operations[block], self)

			self._output = self:Write()

			return self
		end

		function Operation:Get(index, block)
			local operation = self._pcMap[block]
			operation = operation and operation[index]
			
			if operation then
				for key, value in pairs(operation._registers) do
					value._references = value._references + 1
				end

				operation._references = operation._references + 1
			end

			return operation
		end
		
		function Operation:Write()
			return ("%s %s %s"):format(self._var_l, self._operation, self._var_r)
		end

		Operation.IsA = Object.IsA
	end

	do
		Call.__index = Call
		Call.__tostring = function() return "Call" end
		Call._calls = {}
		Call._pcMap = {}
		
		function Call:new(var, args, block)
			self = setmetatable({}, self)
			self._var = var
			self._args = args
			self._block = block
			self._argWritten = ""
			self._argsWritten = 0

			Object:Assign(self, tostring(self))

			if not Call._calls[block] and not Call._pcMap[block] then
				Call._calls[block] = {}
				Call._pcMap[block] = {}
			end

			self._index = insert(Call._calls[block], self)
			
			self._output = self:Write()

			return self
		end
		
		function Call:Insert(arg)
			if not self._args then self._args = {} end

			table.insert(self._args, arg)

			if self._output then
				if not (self._argWritten == "") then
					self._argWritten = self._argWritten .. ", "
				end

				local regex = "%s(%s)"
				
				for i = 1, #self._args do
					local arg = self._args[i]

					self._argsWritten = self._argsWritten + 1

					if false and (not arg._isArg and arg._val:IsA("Plain")) then
						arg._output = nil

						arg = arg._val._output
					else
						arg = arg._registers[1]._output
					end

					self._argWritten = self._argWritten .. ("%s"):format(arg)

					if i < #self._args then
						self._argWritten = self._argWritten .. ", "
					end
				end

				self._output = regex:format(self._var, self._argWritten)
			else
				self._output = self:Write()
			end
		end

		function Call:Get(index, block)
			local call = self._pcMap[block]
			call = call and call[index]
			
			if call then
				for key, value in pairs(call._registers) do
					value._references = value._references + 1
				end

				call._references = call._references + 1
			end

			return call
		end
		
		function Call:Write()
			if type(self._args) == "table" then
				local regex = "%s(%s)"
				
				for i = 1, #self._args do
					local arg = self._args[i]

					self._argsWritten = self._argsWritten + 1

					if false and (not arg._isArg and arg._val:IsA("Plain")) then
						arg._output = nil

						arg = arg._val._output
					else
						arg = arg._registers[1]._output
					end

					self._argWritten = self._argWritten .. ("%s"):format(arg)

					if i < #self._args then
						self._argWritten = self._argWritten .. ", "
					end
				end

				return regex:format(self._var._registers[1]._output, self._argWritten)
			else
				return ("%s(%s)"):format(self._var._registers[1]._output, self._argWritten)
			end
		end

		Call.IsA = Object.IsA
	end

	do
		FastCall.__index = FastCall
		FastCall.__tostring = function() return "FastCall" end
		FastCall._calls = {}
		FastCall._pcMap = {}
		
		function FastCall:new(var, block)
			self = setmetatable({}, self)
			self._var = var
			
			Object:Assign(self, tostring(self))

			if not FastCall._calls[block] and not FastCall._pcMap[block] then
				FastCall._calls[block] = {}
				FastCall._pcMap[block] = {}
			end

			self._index = insert(FastCall._calls[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(FastCall._pcMap[block], value, self)
				end
			else
				insert(FastCall._pcMap[block], var, self)
			end

			return self
		end
		
		function FastCall:Get(index, block)
			local fastcall = self._pcMap[block]
			fastcall = fastcall and fastcall[index]
			
			if fastcall then
				for key, value in pairs(fastcall._registers) do
					value._references = value._references + 1
				end

				fastcall._references = fastcall._references + 1
			end

			return fastcall
		end
		
		FastCall.IsA = Object.IsA
	end

	do
		Plain.__index = Plain
		Plain.__tostring = function() return "Plain" end
		Plain._plains = {}
		Plain._pcMap = {}
		
		function Plain:new(plain, keyword)
			self = setmetatable({}, self)
			self._plain = plain
			self._keyword = keyword

			Object:Assign(self, tostring(self))
			
			self._index = insert(Plain._plains, self)
			
			self._output = plain
			
			return self
		end
		
		Plain.IsA = Object.IsA
	end

	do
		Repeat.__index = Repeat
		Repeat.__tostring = function() return "Repeat" end
		Repeat._repeats = {}
		Repeat._pcMap = {}
		
		function Repeat:new(ifStatement, block)
			self = setmetatable({}, self)
			self._ifStatement = ifStatement
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not Repeat._repeats[block] and not Repeat._pcMap[block] then
				Repeat._repeats[block] = {}
				Repeat._pcMap[block] = {}
			end

			self._index = insert(Repeat._repeats[block], self)
			
			if ifStatement then
				insert(Repeat._pcMap[block], ifStatement, self)
			end

			self._output = self:Write()
			
			return self
		end
		
		function Repeat:Get(index, block)
			local _repeat = self._pcMap[block]
			_repeat = _repeat and _repeat[index]
			
			if _repeat then
				for key, value in pairs(_repeat._registers) do
					value._references = value._references + 1
				end

				_repeat._references = _repeat._references + 1
			end

			return _repeat
		end
		
		function Repeat:Write()
			if self._ifStatement then
				return ("until %s"):format(self._ifStatement._condition)
			end

			return ("repeat")
		end

		Repeat.IsA = Object.IsA
	end

	do
		While.__index = While
		While.__tostring = function() return "While" end
		While._whiles = {}
		While._pcMap = {}
		
		function While:new(ifStatement, block)
			self = setmetatable({}, self)
			self._ifStatement = ifStatement
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not While._whiles[block] and not While._pcMap[block] then
				While._whiles[block] = {}
				While._pcMap[block] = {}
			end

			self._index = insert(While._whiles[block], self)
			
			insert(While._pcMap[block], ifStatement, self)
			
			self._output = self:Write()
			
			return self
		end
		
		function While:Get(index, block)
			local _while = self._pcMap[block]
			_while = _while and _while[index]
			
			if _while then
				for key, value in pairs(_while._registers) do
					value._references = value._references + 1
				end

				_while._references = _while._references + 1
			end

			return _while
		end
		
		function While:Write()
			if self._ifStatement then
				return ("while %s do"):format(self._ifStatement._condition)
			end
		end

		While.IsA = Object.IsA
	end

	do
		If.__index = If
		If.__tostring = function() return "If" end
		If._ifs = {}
		If._pcMap = {}
		
		function If:new(var, opcode, block)
			self = setmetatable({}, self)
			self._var = var
			self._opcode = opcode
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not If._ifs[block] and not If._pcMap[block] then
				If._ifs[block] = {}
				If._pcMap[block] = {}
			end

			self._index = insert(If._ifs[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(If._pcMap[block], value, self)
				end
			else
				insert(If._pcMap[block], var, self)
			end
			
			self._output = self:Write()
			
			return self
		end
		
		function If:Get(index, block)
			local _if = self._pcMap[block]
			_if = _if and _if[index]
			
			if _if then
				for key, value in pairs(_if._registers) do
					value._references = value._references + 1
				end

				_if._references = _if._references + 1
			end

			return _if
		end
		
		function If:Write()
			if self._var then
				self._register = self._register or Declaration:Get(self._var, self._block)
				
				if self._opcode == enum.OpCode.JUMPIFNOT then
					self._condition = ("%s%s"):format(("not "), self._register._val._output)
				end
				
				return ("if %s then"):format(self._condition)
			end
		end

		function If:Rewrite()
			if self._var then
				self._condition = ("%s%s"):format((self._opcode == enum.OpCode.JUMPIFNOT and "not " or ""), self._register or Declaration:Get(self._var, self._block)._val._output)
				return ("if %s then"):format(self._condition)
			end
		end

		If.IsA = Object.IsA
	end

	do
		IfElse.__index = IfElse
		IfElse.__tostring = function() return "IfElse" end
		IfElse._ifs = {}
		IfElse._pcMap = {}
		
		function IfElse:new(var, condition, opcode, body, block)
			self = setmetatable({}, self)
			self._var = var
			self._condition = condition
			self._opcode = opcode
			self._body = body
			self._elseBody = nil

			Object:Assign(self, tostring(self))
			
			if not IfElse._ifs[block] and not IfElse._pcMap[block] then
				IfElse._ifs[block] = {}
				IfElse._pcMap[block] = {}
			end

			self._index = insert(IfElse._ifs[block], self)
			
			self._output = self:Write()
			
			return self
		end
		
		function IfElse:Get(index, block)
			local ifElse = self._pcMap[block]
			ifElse = ifElse and ifElse[index]
			
			if ifElse then
				for key, value in pairs(ifElse._registers) do
					value._references = value._references + 1
				end

				ifElse._references = ifElse._references + 1
			end

			return ifElse
		end
		
		function IfElse:Write()
			if self._var then
				self._conditioned = ("%s%s"):format(self._opcode == enum.OpCode.JUMPIFNOT and "not " or "", self._condition)

				return ("if %s then"):format(self._conditioned)
			end
		end
		
		IfElse.IsA = Object.IsA
	end

	do
		ForNumeric.__index = ForNumeric
		ForNumeric.__tostring = function() return "ForNumeric" end
		ForNumeric._fors = {}
		ForNumeric._pcMap = {}
		
		function ForNumeric:new(assignment, limit, step, body, block)
			self = setmetatable({}, self)
			self._assignment = assignment
			self._limit = limit
			self._step = step
			self._body = body
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not ForNumeric._fors[block] and not ForNumeric._pcMap[block] then
				ForNumeric._fors[block] = {}
				ForNumeric._pcMap[block] = {}
			end

			self._index = insert(ForNumeric._fors[block], self)
			
			insert(ForNumeric._pcMap[block], assignment, self)
			
			self._output = self:Write()
			
			return self
		end
		
		function ForNumeric:Get(index, block)
			local forNumeric = self._pcMap[block]
			forNumeric = forNumeric and forNumeric[index]
			
			if forNumeric then
				for key, value in pairs(forNumeric._registers) do
					value._references = value._references + 1
				end

				forNumeric._references = forNumeric._references + 1
			end

			return forNumeric
		end
		
		function ForNumeric:Write()
			local var = self._assignment._output
			local limit = self._limit._output
			local step = self._step._output

			self._assignment._output = nil
			self._limit._output = nil
			self._step._output = nil

			return ("for %s, %s, %s do"):format(var, self._limit._val._output, self._step._val._output)
		end
		
		ForNumeric.IsA = Object.IsA
	end

	do
		ForGeneric.__index = ForGeneric
		ForGeneric.__tostring = function() return "ForGeneric" end
		ForGeneric._fors = {}
		ForGeneric._pcMap = {}
		
		function ForGeneric:new(variables, values, body, block)
			self = setmetatable({}, self)
			self._variables = variables
			self._vals = values
			self._body = body
			self._block = block

			Object:Assign(self, tostring(self))
			
			if not ForGeneric._fors[block] and not ForGeneric._pcMap[block] then
				ForGeneric._fors[block] = {}
				ForGeneric._pcMap[block] = {}
			end

			self._index = insert(ForGeneric._fors[block], self)
			
			self._output = self:Write()
			
			return self
		end
		
		function ForGeneric:Get(index, block)
			local forGeneric = self._pcMap[block]
			forGeneric = forGeneric and forGeneric[index]
			
			if forGeneric then
				for key, value in pairs(forGeneric._registers) do
					value._references = value._references + 1
				end

				forGeneric._references = forGeneric._references + 1
			end

			return forGeneric
		end
		
		function ForGeneric:Write()
			local first = true
			
			local output = "for "

			for i, declaration in pairs(self._variables) do
				if not first then
					output = output .. ", "
				end

				output = output .. declaration._registers[1]._output

				first = false
			end

			output = output .. " in "

			first = true

			for i, declaration in pairs(self._vals) do
				if not first then
					output = output .. ", "
				end
				
				local val

				if #declaration._registers == 3 then
					val = declaration._registers[i]._output
				else
					val =declaration._registers[1]._output
				end

				output = output .. val

				first = false
			end

			output = output .. " do"
			
			return output
		end
		
		ForGeneric.IsA = Object.IsA
	end

	do
		End.__index = End
		End.__tostring = function() return "End" end
		End._ifs = {}
		End._pcMap = {}
		
		function End:new()
			self = setmetatable({}, self)
			
			Object:Assign(self, tostring(self))
			
			self._index = insert(End._ifs, self)
			
			--insert(End._pcMap, var, self)
			
			self._output = self:Write()
			
			return self
		end
		
		function End:Get(index)
			local fastcall = self._pcMap[block]
			fastcall = fastcall and fastcall[index]
			
			if fastcall then
				for key, value in pairs(fastcall._registers) do
					value._references = value._references + 1
				end

				fastcall._references = fastcall._references + 1
			end

			return fastcall
		end
		
		function End:Write()
			return ("end")
		end
	
		End.IsA = Object.IsA
	end

	do
		NameCall.__index = NameCall
		NameCall.__tostring = function() return "NameCall" end
		NameCall._calls = {}
		NameCall._pcMap = {}
		
		function NameCall:new(var, name, func, args, returns, block)
			self = setmetatable({}, self)
			self._var = var
			self._name = name
			self._func = func
			self._args = args
			self._returns = returns
			self._block = block
			self._argsWritten = 0
			self._argWritten = ""

			Object:Assign(self, tostring(self))

			if not NameCall._calls[block] and not NameCall._pcMap[block] then
				NameCall._calls[block] = {}
				NameCall._pcMap[block] = {}
			end

			self._index = insert(NameCall._calls[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(NameCall._pcMap[block], value, self)
				end
			else
				insert(NameCall._pcMap[block], var, self)
			end

			self._output = self:Write()

			return self
		end
		
		function NameCall:Insert(arg)
			if not self._args then self._args = {} end
			
			table.insert(self._args, arg)
			
			if self._output then
				if not (self._argWritten == "") then
					self._argWritten = self._argWritten .. ", "
				end

				if false and (not arg._isArg and arg._val:IsA("Plain")) then
					arg._output = nil

					arg = arg._val._output
				else
					arg = arg._registers[1]._output
				end

				local regex = "%s:%s(%s)"

				self._argWritten = self._argWritten .. ("%s"):format(arg)
				
				self._output = regex:format((self._name:IsA("Declaration") and self._name._registers[1]._output) or (self._name:IsA("Register") and self._name._output), self._func, self._argWritten)
			else
				self._output = self:Write()
			end	
		end

		function NameCall:Get(index, block)
			local namecall = self._pcMap[block]
			namecall = namecall and namecall[index]
			
			if namecall then
				for key, value in pairs(namecall._registers) do
					value._references = value._references + 1
				end

				namecall._references = namecall._references + 1
			end

			return namecall
		end
		
		function NameCall:Write()
			if type(self._args) == "table" then
				local regex = "%s:%s(%s"
				
				for i = 1, #self._args do
					local arg = self._args[i]

					self._argsWritten = self._argsWritten + 1

					if false and (not arg._isArg and arg._val:IsA("Plain")) then
						arg._output = nil

						arg = arg._val._output
					else
						arg = arg._registers[1]._output
					end
					
					self._argWritten = self._argWritten .. ("%s"):format(arg)

					if i < #self._args then
						self._argWritten = self._argWritten .. ", "
					end
				end
				
				regex = regex .. ")"
				
				return regex:format((self._name:IsA("Declaration") and self._name._registers[1]._output) or (self._name:IsA("Register") and self._name._output), self._func, self._argWritten)
			else
				return ("%s:%s(%s)"):format((self._name:IsA("Declaration") and self._name._registers[1]._output) or (self._name:IsA("Register") and self._name._output), self._func, self._argWritten)
			end
		end

		NameCall.IsA = Object.IsA
	end

	do
		Closure.__index = Closure
		Closure.__tostring = function() return "Closure" end
		Closure._closures = {}
		Closure._pcMap = {}
		
		function Closure:new(var, func, args, hasVararg, functionId, body, block)
			self = setmetatable({}, self)
			self._var = var
			self._func = func
			self._args = args
			self._hasVararg = hasVararg
			self._functionId = functionId
			self._body = body
			self._block = block

			Object:Assign(self, tostring(self))

			if not Closure._closures[block] and not Closure._pcMap[block] then
				Closure._closures[block] = {}
				Closure._pcMap[block] = {}
			end

			self._index = insert(Closure._closures[block], self)
			
			if type(var) == "table" then
				for key, value in pairs(var) do
					insert(Closure._pcMap[block], value, self)
				end
			else
				insert(Closure._pcMap[block], var, self)
			end
			
			self._output = self:Write()

			return self
		end

		function Closure:Get(index, block)
			local closure = self._pcMap[block]
			closure = closure and closure[index]
			
			if closure then
				for key, value in pairs(closure._registers) do
					value._references = value._references + 1
				end

				closure._references = closure._references + 1
			end

			return closure
		end
		
		function Closure:Renew(var, isLocal)
			self._renewed = true

			self._var = var
			
			self._output = (isLocal and "local " or "") .. self:Write()
		end

		function Closure:WriteTable(tbl, key)
			return ("function %s.%s(%s)"):format(tbl, key, self._arguments)
		end

		function Closure:Write()
			self._arguments = ""

			if self._args then
				local first = true
				for key, value in pairs(self._args) do
					if first then
						first = false

						self._arguments = self._arguments .. value._output
					else
						self._arguments = self._arguments .. ", " .. value._output
					end
				end

				if self._hasVararg then
					if first then
						self._arguments = self._arguments .. "..."
					else
						self._arguments = self._arguments .. ", ..."
					end
				end
			end

			if not self._renewed then
				self._declaration = Declaration:new(self._var, Plain:new(("function(%s) -- line: %s"):format(self._arguments, self._func and tostring(self._func.LineDefined) or "Unknown"), enum.KeywordType.Function), self._block)
				
				return self._declaration._output
			else
				return ("%s = function(%s) -- line: %s"):format(self._func and self._func.DebugName ~= "" and self._func.DebugName or tostring(self._var), self._arguments, self._func and tostring(self._func.LineDefined) or "Unknown")
			end
		end

		Closure.IsA = Object.IsA
	end

	do
		Block.__index = Block
		Block.__tostring = function() return "Block" end
		Block._blocks = {}
		Block._pcMap = {}

		function Block:new(parent, debugMode)
			self = setmetatable({}, self)
			self._statements = {}
			self._variables = {}
			self._localVariables = {}
			self._functions = {}
			self._line = {}
			self._calls = {}
			self._debugMode = debugMode

			self._parent = parent
			
			Object:Assign(self)

			self._index = insert(Block._blocks, self)

			return self
		end

		function Block:Variable(var)
			if #self._localVariables >= 1 then
				for key, value in pairs(self._localVariables) do
					if value == var then
						return true
					end
				end
				
				return false
			end
		end

		function Block:AddStatement(code, opcode, statement, pc)
			if self._debugMode then
				print("Block.AddStatement", self._address, code, opcode, statement._output, pc)
			end

			local Block = self

			local statementObj = {}
			--statementObj.__index = statementObj
			statementObj.__tostring = function() return "Statement" end

			statementObj._pc = pc

			setmetatable(statementObj, statementObj)

			Object:Assign(statementObj, tostring(statementObj))

			function statementObj:Code()
				if Block._statements[self._index] then
					return code
				end
			end
			
			function statementObj:OpCode()
				if Block._statements[self._index] then
					return opcode
				end
			end

			function statementObj:Value()
				if Block._statements[self._index] then
					return statement
				end
			end

			function statementObj:Remove()
				Block._statements[self._index] = nil
			end

			function statementObj:Add()
				self._index = insert(Block._statements, statementObj)
			end

			statementObj:Add()
			
			statementObj.IsA = Object.IsA

			insert(Block._pcMap, pc, statementObj)
		end

		function Block:Write()
			local str = ""

			for key, Block in pairs(self._statements) do
				local Statement = Block:Value()
				if Statement then
					str = str .. Statement

					str = str .. "\n"
				end
			end

			return str
		end

		function Block:AddVariable(var)
			table.insert(self._variables, var)
		end

		function Block:AddLocalVariable(var)
			table.insert(self._localVariables, var)
		end
		
		function Block:AddCall(index)
			table.insert(self._calls, index)
		end
		
		function Block:Exit()
			Block._blocks[self._index] = nil
		end

		Block.IsA = Object.IsA
	end

	local Reading = nil

	local Skip = false
	
	do
		local reader, Decompile, lua = {}, {}, {}
		do
			function reader:ReadFunction(chunk, func, decompile, block, args, pcStart, pcEnd, increment, recurse, debugMode)
				return reader:ReadFunctions(chunk, func, decompile, block, args, pcStart, pcEnd, increment, recurse, debugMode)
			end
			function reader:ReadFunctions(chunk, func, decompile, block, args, pcStart, pcEnd, increment, recurse, debugMode)
				pcEnd = not pcEnd and func.sizeCode or pcEnd
			
				local BlockObj = Block
				
				local Block = block or BlockObj:new(block, debugMode)

				decompile:AddBlock(Block)

				local InnerBlockIndex = Object:AddInnerBlock(Block)

				-- print("ReadFunction", pcStart, pcEnd, Block._address, Block._parent and Block._parent._address)

				if recurse then
					recurse = recurse + 1
				end
				
				pcStart = pcStart or 0
				pcEnd = pcEnd or 0

				increment = increment or 0

				local remainder = 0

				local traversed = 0

				local index = pcStart

				while (not Skip) and (index < pcEnd) do
					-- print(index, pcEnd, func.sizeCode)

					if index >= 4200 then
						-- Skip = true

						print("SKIPPING BECAUSE TOO BIG!")

						index = pcEnd

						break
					end

					local Instruction = reader:ReadInstruction(func, index)
					local properties = Instruction:GetProperties()
					local OpCode = properties.Code
					
					local GetAux = function()
						return reader:ReadInstruction(func, index + 1)
					end
			
					local Lua = lua:new(index, Block)
					
					decompile:AddLua(Lua)
					
					if recurse then
						-- print(recurse, "reading", properties.Name, "recurse:", index, pcEnd)
					end

					-- print("[]" .. properties.Name)

					if OpCode == enum.OpCode.BREAK then
						local statement = Plain:new("break", enum.KeywordType.Break)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.LOADNIL then
						local target = Declaration:Get(Instruction:A(), Block)

						local statement = Declaration:new(Instruction:A(), Plain:new("nil", enum.KeywordType.Nil), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.LOADB then
						local target = Declaration:Get(Instruction:A(), Block)

						local statement = Declaration:new(Instruction:A(), Plain:new(tostring(Instruction:B() == 1), enum.KeywordType.Boolean), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.LOADN then
						local target = Declaration:Get(Instruction:A(), Block)

						local D = Instruction:D()

						if D > 2^31 and D < 2^33 then
							D = -(2^32 - D)
						end

						local statement = Declaration:new(Instruction:A(), Plain:new(tostring(D), enum.KeywordType.Number), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.LOADK
					or OpCode == enum.OpCode.LOADKX then
						local target = Declaration:Get(Instruction:A(), Block)

						local expression = decompile:ConstantToExpression(func.Constants[Instruction:D()] or func:GetConstant(index + 1))

						local statement = Declaration:new(Instruction:A(), Plain:new(tostring(expression), enum.KeywordType.Value), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.GETGLOBAL then
						local statement = Declaration:new(Instruction:A(), Plain:new(func:GetConstant(index + 1):Value(), enum.KeywordType.Value), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETGLOBAL then
						local constant = func:GetConstant(index + 1)

						local statement = Assignment:new(constant and constant:Value() or ("NOT FOUND; %d"):format(index + 1), Declaration:Get(Instruction:A(), Block), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.GETIMPORT then
						local target = func.Constants[Instruction:D()]
						local targetValue = target:Value()
						
						local tbl = nil
						local indexes = {}
						
						for i = 1, #targetValue do
							local value = targetValue[i]
							
							if i <= 1 then
								tbl = value.constant:Value()
							elseif value then
								table.insert(indexes, decompile:ConstantToExpression(value.constant))
							end
						end
						
						local statement = Declaration:new(Instruction:A(), TableIndex:new(tbl, indexes, Block), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETLIST then
						local tbldeclaration = Declaration:Get(Instruction:A(), Block)

						local tbl = tbldeclaration._val

						local indexes = {}
						
						local C = Instruction:C()
						
						for i = 1, C - 1 do
							local declaration = Declaration:Get(Instruction:B() + i - 1, Block)

							if declaration then
								local value = declaration._val

								declaration._redundant = true

								declaration._output = nil

								tbl:Insert(TableAssign:new(Declaration:Get(Instruction:B() + i - 1, Block), Plain:new(tostring(i), enum.KeywordType.Number), declaration._val, Block))

								tbldeclaration:Renew(tbl._variable, tbl)
							end
						end
					elseif OpCode == enum.OpCode.GETTABLE then
						local statement = Declaration:new(Instruction:A(), TableAssign:new(Declaration:Get(Instruction:B(), Block) or Plain:new(("GETTABLE DECLARATION NOT FOUND : %d"):format(Instruction:B())), Register:Get(Instruction:C(), Block) or Plain:new(("GETTABLE KEY NOT FOUND : %d"):format(Instruction:C())), nil, Block), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETTABLE then
						local registerC = Register:Get(Instruction:C(), Block)

						local AddOriginalStatement = function()
							local register = Register:Get(Instruction:A(), Block)
										
							if register then
								register._redundant = true
		
								local statement = TableAssign:new(Declaration:Get(Instruction:B(), Block), registerC or Plain:new(("SETTABLE KEY NOT FOUND : %d"):format(Instruction:C())), register, Block)
		
								Block:AddStatement(properties.Name, OpCode, statement, index)
							end
						end

						local tbldeclaration = Declaration:Get(Instruction:B(), Block)

						local tbl = tbldeclaration and tbldeclaration._val

						if false and tbl and tbl:IsA("TableNew") then
							local closure = Closure:Get(Instruction:A(), Block)
							
							if closure and closure:IsA("Closure") then
								closure._output = closure:WriteTable(tbl._register._output, func:GetConstant(index + 1):Value())
							else
								local declaration = Declaration:Get(Instruction:A(), Block)

								if declaration then
									declaration._redundant = true

									if (
										declaration._val:IsA("Plain")
										or declaration._val:IsA("TableNew")
									) then
										declaration._output = nil

										tbl:Insert(TableAssign:new(Declaration:Get(Instruction:B(), Block), registerC, declaration._val, Block))

										tbldeclaration:Renew(tbl._variable, tbl)
									else
										AddOriginalStatement()
									end
								end
							end
						else
							AddOriginalStatement()
						end
					elseif OpCode == enum.OpCode.GETTABLEN then
						local statement = Declaration:new(Instruction:A(), TableAssign:new(Declaration:Get(Instruction:B(), Block), Plain:new(tostring(Instruction:C() + 1), enum.KeywordType.Number), nil, Block), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETTABLEN then
						local AddOriginalStatement = function()
							local register = Register:Get(Instruction:A(), Block)
										
							if register then
								register._redundant = true
		
								local statement = TableAssign:new(Declaration:Get(Instruction:B(), Block), Plain:new(tostring(Instruction:C() + 1), enum.KeywordType.Number), register, Block)
		
								Block:AddStatement(properties.Name, OpCode, statement, index)
							end
						end

						local tbldeclaration = Declaration:Get(Instruction:B(), Block)

						local tbl = tbldeclaration and tbldeclaration._val

						if tbl and tbl:IsA("TableNew") then
							local declaration = Declaration:Get(Instruction:A(), Block)

							if declaration then
								declaration._redundant = true

								if (
									declaration._val:IsA("Plain")
									or declaration._val:IsA("TableNew")
								) then
									declaration._output = nil

									tbl:Insert(TableAssign:new(Declaration:Get(Instruction:B(), Block), Plain:new(tostring(Instruction:C() + 1), enum.KeywordType.Number), declaration._val, Block))

									tbldeclaration:Renew(tbl._variable, tbl)
								else
									AddOriginalStatement()
								end
							end
						else
							AddOriginalStatement()
						end
					elseif OpCode == enum.OpCode.GETTABLEKS then
						local constant = func:GetConstant(index + 1) or func:GetConstant(index)

						local expression = decompile:ConstantToExpression(constant)

						local declaration = Declaration:Get(Instruction:B(), Block)

						local statement = Declaration:new(Instruction:A(), TableAssign:new(declaration or Register:Get(Instruction:B(), Block) or Plain:new(("GETTABLEKS DECLARATION NOT FOUND : %d"):format(Instruction:B())), Plain:new(tostring(expression), enum.KeywordType.Value), nil, Block), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETTABLEKS then
						local expression = decompile:ConstantToExpression(func:GetConstant(index + 1))

						local AddOriginalStatement = function()
							local register = Register:Get(Instruction:A(), Block)
										
							if register then
								register._redundant = true
								
								local declaration = Declaration:Get(Instruction:B(), Block)

								if not declaration then
									declaration = Declaration:new(Instruction:B(), Plain:new(("NOT FOUND; %d"):format(Instruction:B()), enum.KeywordType.Value), Block)
								end

								local statement = TableAssign:new(declaration, Plain:new(tostring(expression), enum.KeywordType.Value), register, Block)
		
								Block:AddStatement(properties.Name, OpCode, statement, index)
							end
						end

						local tbldeclaration = Declaration:Get(Instruction:B(), Block)

						local tbl = tbldeclaration and tbldeclaration._val

						if tbl and tbl:IsA("TableNew") then
							local closure = Closure:Get(Instruction:A(), Block)
							
							if closure and closure:IsA("Closure") then
								closure._output = closure:WriteTable(tbl._register._output, func:GetConstant(index + 1):Value())
							else
								local declaration = Declaration:Get(Instruction:A(), Block)

								if declaration then
									declaration._redundant = true

									if (
										declaration._val:IsA("Plain")
										or declaration._val:IsA("TableNew")
									) then
										declaration._output = nil

										tbl:Insert(TableAssign:new(Declaration:Get(Instruction:A(), Block), Plain:new(tostring(expression), enum.KeywordType.Value), declaration._val, Block))

										tbldeclaration:Renew(tbl._variable, tbl)
									else
										AddOriginalStatement()
									end
								end
							end
						else
							AddOriginalStatement()
						end
					elseif OpCode == enum.OpCode.NEWTABLE then
						local statement = Declaration:new(Instruction:A(), TableNew:new(Instruction:A(), nil, Block), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.DUPTABLE then
						local regex = "{"
						local args = {}
						
						local target = func.Constants[Instruction:D()]
						local targetValue = target:Value()
						
						for i = 0, #targetValue do
							local value = targetValue[i]
							
							if value then
								regex = regex .. "%s"
								
								if i < #targetValue then
									regex = regex .. ", "
								end

								table.insert(args, tostring(decompile:ConstantToExpression(value)))
							end
						end
						
						regex = regex .. "}"

						--regex:format(table.unpack(args))

						local statement = Declaration:new(Instruction:A(), TableNew:new(Instruction:A(), args, Block), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.MOVE then
						local GetTarget; GetTarget = (function(register, block)
							if block then
								local target = Declaration:Get(register, block)

								if not target then
									return GetTarget(register, block._parent)
								end

								return target, block
							end
						end)
						
						local target, block -- = GetTarget(Instruction:A(), Block)

						local declaration = Declaration:Get(Instruction:B(), Block)

						if target then
							--[[
							local newDeclaration = Declaration:new(Instruction:A(), Plain:new((not declaration and "not found" or declaration._registers[1]._output), enum.KeywordType.Reference), target._block)

							--newDeclaration._output = nil

							Block:AddStatement(properties.Name, OpCode, newDeclaration, index)
							--]]

							target._val = declaration._val
							target._moved = true

							-- target._output = nil
						end

						if not declaration then
							declaration = Declaration:new(Instruction:B(), Plain:new(("NOT FOUND; %d"):format(Instruction:B()), enum.KeywordType.Value), Block)
						end
						
						local statement = Declaration:new(Instruction:A(), Plain:new(not declaration and Register:Get(Instruction:B(), Block) or declaration._registers[1]._output, enum.KeywordType.Reference), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.GETVARARGS then
						local registers = {}
			
						local count = Instruction:B()
						
						if count <= 0 then
							table.insert(registers, Instruction:A())
						else
							for i = 0, count - 1 do
								if i >= 0 then
									local register = Instruction:A() + i
									
									table.insert(registers, Instruction:A() + i)
								end
							end
						end
						
						local statement = Declaration:new(registers, Plain:new("...", enum.KeywordType.Vararg), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.PREPVARARGS then
						-- Codeless
					elseif OpCode == enum.OpCode.ADD
					or OpCode == enum.OpCode.ADDK
					or OpCode == enum.OpCode.SUB
					or OpCode == enum.OpCode.SUBK
					or OpCode == enum.OpCode.SUBRK
					or OpCode == enum.OpCode.MUL
					or OpCode == enum.OpCode.MULK
					or OpCode == enum.OpCode.DIV
					or OpCode == enum.OpCode.DIVK
					or OpCode == enum.OpCode.DIVRK
					or OpCode == enum.OpCode.IDIV
					or OpCode == enum.OpCode.IDIVK
					or OpCode == enum.OpCode.MOD
					or OpCode == enum.OpCode.MODK
					or OpCode == enum.OpCode.POW
					or OpCode == enum.OpCode.POWK
					or OpCode == enum.OpCode.AND
					or OpCode == enum.OpCode.ANDK
					or OpCode == enum.OpCode.OR
					or OpCode == enum.OpCode.ORK then
						local K = (
							OpCode == enum.OpCode.ADDK
							or OpCode == enum.OpCode.SUBK
							or OpCode == enum.OpCode.MULK
							or OpCode == enum.OpCode.DIVK
							or OpCode == enum.OpCode.IDIVK
							or OpCode == enum.OpCode.MODK
							or OpCode == enum.OpCode.POWK
							or OpCode == enum.OpCode.ANDK
							or OpCode == enum.OpCode.ORK
						)

						local RK = (
							OpCode == enum.OpCode.DIVRK
							or OpCode == enum.OpCode.SUBRK
						)

						local right = (K and func.Constants[Instruction:C()] and decompile:ConstantToExpression(func.Constants[Instruction:C()])) or Instruction:C()
						local left = Instruction:B()
						
						local operation = BinaryExpression:GetBinaryOperation(OpCode)

						local rightValue = nil
						local leftValue = nil
						
						if RK then
							leftValue = left
						else
							local declaration = Declaration:Get(left, Block)

							leftValue = declaration and declaration._registers[1]._output or ("[NOT FOUND %s]"):format(tostring(left))
						end

						if K then
							rightValue = right
						else
							local declaration = Declaration:Get(right, Block)

							rightValue = declaration and declaration._registers[1]._output or ("[NOT FOUND %s]"):format(tostring(right))
						end

						local statement = Declaration:new(Instruction:A(), Operation:new(tostring(leftValue), BinaryExpression:BinaryOperationChar(operation), tostring(rightValue), Block), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.CONCAT then
						local statement = Declaration:new(Instruction:A(), Operation:new(Declaration:Get(Instruction:B(), Block)._registers[1]._output, "..", Declaration:Get(Instruction:C(), Block)._registers[1]._output, Block), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.NOT
					or OpCode == enum.OpCode.LENGTH
					or OpCode == enum.OpCode.MINUS then
						local condition
						
						if OpCode == enum.OpCode.NOT then
							condition = decompile:ConditionString(enum.Condition.Not)
						elseif OpCode == enum.OpCode.LENGTH then
							condition = decompile:ConditionString(enum.Condition.Len)
						elseif OpCode == enum.OpCode.MINUS then
							condition = decompile:ConditionString(enum.Condition.Min)
						end
			
						local statement = Declaration:new(Instruction:A(), Expression:new(condition, Register:Get(Instruction:B(), Block)._output, Block), Block)
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.JUMP
					or OpCode == enum.OpCode.JUMPIF 
					or OpCode == enum.OpCode.JUMPIFNOT
					or OpCode == enum.OpCode.JUMPIFEQ 
					or OpCode == enum.OpCode.JUMPIFNOTEQ 
					or OpCode == enum.OpCode.JUMPIFNOTLT
					or OpCode == enum.OpCode.JUMPIFLT
					or OpCode == enum.OpCode.JUMPIFNOTLE
					or OpCode == enum.OpCode.JUMPIFLE
					or OpCode == enum.OpCode.JUMPXEQKNIL
					or OpCode == enum.OpCode.JUMPXEQKB
					or OpCode == enum.OpCode.JUMPXEQKN
					or OpCode == enum.OpCode.JUMPXEQKS then
						(function()
							if false then
								local statement = Plain:new(("%s; %d; %d; %d; START: %d; END: %d"):format(properties.Name, index, index + Instruction:D(), Instruction:D(), pcStart, pcEnd))

								Block:AddStatement(properties.Name, OpCode, statement, index)

								return
							end

							if OpCode == enum.OpCode.JUMP then
								return
							end

							local NextInstruction = reader:ReadInstruction(func, index + 1)
			
							local auxUsed = false
							
							local condition
			
							if OpCode == enum.OpCode.JUMPIFNOT then
								condition = enum.Condition.If
							elseif OpCode == enum.OpCode.JUMPIF then
								condition = enum.Condition.Not
							end
			
							-- If the next instruction is a JUMPBACK instruction, then we must be dealing with a repeat..until loop.
							local NextProperties = NextInstruction:GetProperties() -- IS FAULTY
							local NextCode = NextProperties.Code
			
							if NextCode == enum.OpCode.JUMPBACK then -- repeat
								increment = increment + 1

								condition = decompile:InvertCondition(condition)
			
								local iOpCode = nil
			
								if condition == enum.Condition.Not then
									iOpCode = enum.OpCode.JUMPIFNOT
								elseif condition == enum.Condition.If then
									iOpCode = enum.OpCode.JUMPIF
								end
			
								local statement

								local block = BlockObj:new(Block, debugMode)
			
								-- Now we need to take all of the statements created after the initial program counter and add them to our block.
								
								local jmp = NextInstruction:D() -- + 2 is for JUMPIF and JUMPBACK

								if jmp > 2^31 and jmp < 2^33 then
									jmp = (2^32 - jmp)
								end
								
								for i = (index - jmp), index - 1 do
									statement = Block._pcMap[i];
									Block._pcMap[i] = nil
		
									if statement then
										block:AddStatement(statement:Code(), statement:OpCode(), statement:Value(), i);
										
										statement:Remove()
									end
								end
								
								local Condition
								
								if auxUsed then
									Condition = ("%s %s %s"):format(Declaration:Get(Instruction:A(), Block)._registers[1]._output, Operation, Declaration:Get(properties.Aux, Block)._registers[1]._output)
								else
									Condition = ("%s"):format(Declaration:Get(Instruction:A(), Block)._registers[1]._output)
								end

								local iOpCode
				
								if condition == enum.Condition.Not then
									iOpCode = enum.OpCode.JUMPIFNOT
								elseif condition == enum.Condition.If then
									iOpCode = enum.OpCode.JUMPIF
								end

								local ifStatement = IfElse:new(Instruction:A(), Condition, iOpCode, block, Block)

								statement = Repeat:new(ifStatement, Block)
								
								Block:AddStatement(properties.Name, OpCode, statement, index + 1)
			
								return
							end
			
							if OpCode ~= enum.OpCode.JUMPIFNOT and OpCode ~= enum.OpCode.JUMPIF then
								auxUsed = GetAux():Value()
							end

							local ifStatement

							local Operation = BinaryExpression:GetBinaryOperation(OpCode)
							local OperationChar = BinaryExpression:BinaryOperationChar(Operation)
							
							local Condition
							
							if auxUsed then
								if not properties.Aux then
									properties.Aux = auxUsed
								end

								if properties.Aux >= 2^31 and properties.Aux <= 2^33 then
									properties.Aux = (2^31 - properties.Aux)
								end

								local Source = Declaration:Get(Instruction:A(), Block)
								Source = Source and Source._registers and Source._registers[1]._output or ("SOURCE NOT FOUND; %d; %d; %d; %d"):format(Instruction:A(), Instruction:B(), Instruction:C(), properties.Aux)

								local Right = Declaration:Get(properties.Aux, Block)
								Right = Right and Right._registers and Right._registers[1]._output or ("RIGHT NOT FOUND; %d; %d; %d; %d"):format(Instruction:A(), Instruction:B(), Instruction:C(), properties.Aux)

								if (Operation == enum.BinaryOperation.CompareEq)
								and (OpCode ~= enum.OpCode.JUMPIFNOTEQ) then
									if (OpCode == enum.OpCode.JUMPXEQKN)
									or (OpCode == enum.OpCode.JUMPXEQKS) then
										local constant = func.Constants[bit32.band(func.Instructions[index + 1]:Value(), 255)]

										if not constant then
											Right = ("CONSTANT NOT FOUND: %d"):format(bit32.band(func.Instructions[index + 1]:Value(), 255))
										else
											Right = decompile:ConstantToExpression(constant)
										end
									elseif (OpCode == enum.OpCode.JUMPXEQKNIL) then
										Right = "nil"
									elseif (OpCode == enum.OpCode.JUMPXEQKB) then
										Right = bit32.band(func.Instructions[index + 1]:Value(), 255) == 1
									end
								elseif (Operation == enum.BinaryOperation.CompareNe)
								and (OpCode ~= enum.OpCode.JUMPIFEQ) then
									local expression = func.Constants[func.Instructions[index + 1]:Value()]

									if not expression then
										expression = func.Instructions[index + 1]:Value()

										warn("right constant not found", expression)
									end

									Right = type(expression) == "table" and decompile:ConstantToExpression(expression) or expression
								else
									local declaration = Declaration:Get(func.Instructions[index + 1]:Value(), Block)

									Right = declaration and declaration._registers[1]._output or ("DECLARATION NOT FOUND : %d"):format(func.Instructions[index + 1]:Value())
								end

								if not (Source ~= nil and OperationChar ~= nil and Right ~= nil) then
									print("if condition missing", Source, OperationChar, Right, properties.Aux, properties.Name, debug.traceback())
								end

								if Source == nil then
									Source = ("SOURCE NOT FOUND; %d; %d; %d; %d"):format(Instruction:A(), Instruction:B(), Instruction:C(), properties.Aux)
								end
								
								if Right == nil then
									Right = ("RIGHT NOT FOUND; %d; %d; %d; %d"):format(Instruction:A(), Instruction:B(), Instruction:C(), properties.Aux)
								end

								Condition = ("%s %s %s"):format(
									tostring(Source),
									tostring(OperationChar),
									tostring(Right)
								)
							else
								local declaration = Declaration:Get(Instruction:A(), Block)

								if not declaration then
									declaration = Declaration:new(Instruction:B(), Plain:new(("NOT FOUND; %d"):format(Instruction:B()), enum.KeywordType.Value), Block)
								end

								Condition = ("%s"):format(declaration._registers[1]._output)
							end

							local iOpCode
			
							if condition == enum.Condition.Not then
								iOpCode = enum.OpCode.JUMPIFNOT
							elseif condition == enum.Condition.If then
								iOpCode = enum.OpCode.JUMPIF
							end
							
							local decompile = Decompile:new()

							local block = BlockObj:new(Block, debugMode)

							local n_index = index + Instruction:D()

							NextInstruction = reader:ReadInstruction(func, n_index)
							NextProperties = NextInstruction:GetProperties() 
							NextCode = NextProperties.Code

							local StatingNextInstruction = false
							
							if (not NextInstruction.Stated) then
								if NextCode == enum.OpCode.JUMP then
									StatingNextInstruction = true

									NextInstruction.Stated = true
								end
							end

							local for_min_index = (index + (auxUsed and 2 or 1))
							local for_max_index = (n_index + 1)

							local body, traversed, remainder = reader:ReadFunction(chunk, func, decompile, block, nil, for_min_index, for_max_index, nil, recurse or 0)

							ifStatement = IfElse:new(Instruction:A(), Condition, iOpCode, body, Block)
							
							increment = increment + traversed + remainder

							if NextCode == enum.OpCode.JUMP then -- else statement
								if StatingNextInstruction then
									local nn_index = n_index + NextInstruction:D()

									local decompile = Decompile:new()
				
									local block = BlockObj:new(Block, debugMode)

									local for_min_index = (n_index + 1)
									local for_max_index = (nn_index + 1)
									
									local body, traversed, remainder = reader:ReadFunction(chunk, func, decompile, block, nil, for_min_index, for_max_index, nil, recurse or 0)

									ifStatement._elseBody = body
									
									increment = increment + traversed + remainder

									if (ifStatement._elseBody and len(ifStatement._elseBody._statements) >= 2) then
										local Statement = ifStatement._elseBody._statements[0]
										local OpCode = Statement:OpCode()

										if OpCode == enum.OpCode.JUMPIF 
										or OpCode == enum.OpCode.JUMPIFNOT
										or OpCode == enum.OpCode.JUMPIFEQ 
										or OpCode == enum.OpCode.JUMPIFNOTEQ 
										or OpCode == enum.OpCode.JUMPIFNOTLT
										or OpCode == enum.OpCode.JUMPIFLT
										or OpCode == enum.OpCode.JUMPIFNOTLE
										or OpCode == enum.OpCode.JUMPIFLE
										or OpCode == enum.OpCode.JUMPXEQKNIL
										or OpCode == enum.OpCode.JUMPXEQKB
										or OpCode == enum.OpCode.JUMPXEQKN
										or OpCode == enum.OpCode.JUMPXEQKS then
											Statement = Statement:Value()

											if Statement:IsA("IfElse") then
												ifStatement._elseBody = Statement

												ifStatement._elseBody._elseIf = true
											end
										end
									end
								end
							elseif NextCode == enum.OpCode.JUMPBACK then -- while loop
								increment = increment + 1

								local statement = While:new(ifStatement, Block)

								Block:AddStatement(properties.Name, OpCode, statement, n_index)
								
								return
							elseif NextCode == OpCode then
								--print("UH", ifStatement._output, NextCode, OpCode, properties.Name)
							end

							Block:AddStatement(properties.Name, OpCode, ifStatement, index)
						end)()
					elseif OpCode == enum.OpCode.FASTCALL then
						Block._isFastcall = true

						-- FastCall:new(Instruction:A(), Block)
					elseif OpCode == enum.OpCode.NAMECALL then
						Block._isNamecall = true

						local NextInstruction = reader:ReadInstruction(func, index + 1)
						local properties = Instruction:GetProperties()
						local OpCode = properties.Code
						
						local vars = {}
						
						local A = NextInstruction:A()
						local B = NextInstruction:B()
						local C = NextInstruction:C()
						
						if C <= 0 then
							table.insert(vars, Instruction:A())
						else
							for i = 0, C - 1 do
								if i >= 0 then
									table.insert(vars, Instruction:A() + i)
								end
							end
						end

						local name = Declaration:Get(Instruction:B(), Block)

						if not name then
							name = Declaration:new(Instruction:B(), Plain:new(("NOT FOUND; %d"):format(Instruction:B()), enum.KeywordType.Value), Block)
						end

						local statement = Declaration:new(vars, NameCall:new(Instruction:A(), name, func:GetConstant(index + 1):Value(), nil, C, Block), Block)
						
						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.CALL then
						local vars = {}
						local args = {}
						
						local Builtin = nil
						
						local A = Instruction:A()
						local B = Instruction:B()
						local C = Instruction:C()
						
						local Fastcall, Namecall

						if false and Block._isFastcall then
							--Fastcall = Fastcall or FastCall:Get(A, Block)

							Block._isFastcall = false

							Builtin = find(enum.BuiltinFunction, A)

							Declaration:new(A, Plain:new(tostring(Builtin), enum.KeywordType.Value), Block)

							Builtin = nil
							
							Instruction = reader:ReadInstruction(func, index + Instruction:C() + 1)
						end
						
						local function InsertArg(tbl, arg)
							if arg then
								if not Block._isNamecall then
									table.insert(tbl, arg)
								else
									Namecall = Namecall or NameCall:Get(A, Block)

									table.insert(tbl, arg)

									Namecall:Insert(arg)
								end
							end
						end
						
						local numArgs = (Instruction:B() > 0 and Instruction:B()) or (Register._top[Block] - (Instruction:A() - 1));

						for i = 1 + (Block._isNamecall and 1 or 0), numArgs - (Block._isNamecall and 1 or 1) do
							local declaration = Declaration:Get(A + i, Block)

							InsertArg(args, declaration)
						end

						if C <= 0 then
							table.insert(vars, A)
						else
							if C - 1 > 0 then
								for i = 0, C - 2 do
									if i >= 0 then
										table.insert(vars, A + i)
									end
								end
							else
								table.insert(vars, A)
							end
						end

						if not Block._isNamecall then
							local declaration = Declaration:Get(A, Block)

							if not declaration then
								declaration = Declaration:new(A, Plain:new(("NOT FOUND; %d"):format(A), enum.KeywordType.Value), Block)
							end

							local statement = Declaration:new(vars, Call:new(Builtin or declaration, args, Block), Block)
							statement._call = true

							Block:AddStatement(properties.Name, OpCode, statement, index)
						else
							--[[
							local numArgs = B > 0 and B - 1 or (Register._top[Block] - A) + 1;
							
							for i = 1, numArgs do
								table.insert(args, Declaration:Get((A + i - 1), Block)._registers[1]._output)
							end
							--]]
							
							Namecall = Namecall or NameCall:Get(A, Block)

							Block._isNamecall = false

							local declaration = Declaration:Get(A, Block)

							declaration:Decrement() -- since we have already referred to it when loading Namecall so we decrement it
							declaration._call = true
							
							local obj = Declaration:new(vars, Namecall, Block)._output

							declaration._output = obj
						end
					elseif OpCode == enum.OpCode.CAPTURE then
						-- Codeless
					elseif OpCode == enum.OpCode.NEWCLOSURE
					or OpCode == enum.OpCode.DUPCLOSURE then
						local args = {}

						local functionId = properties.Code == enum.OpCode.DUPCLOSURE and func.Constants[Instruction:D()]:Value() or Instruction:D()

						local newFunction = properties.Code == enum.OpCode.DUPCLOSURE and func.GlobalFunctions[functionId] or func:GetFunction(functionId)

						if func.DebugInfo ~= nil then
							for key, value in pairs(newFunction.DebugInfo.Locals) do
								args[value.Slot] = value
							end
						else
							for i = 1, newFunction.Parameters do
								args[i] = Plain:new(("%s%d"):format(settings.argument, i - 1), enum.KeywordType.Variable)
							end
						end

						local closure = Closure:new(Instruction:A(), newFunction, args, newFunction.IsVararg, functionId, nil, Block)

						local statement = Declaration:new(Instruction:A(), closure, Block)

						if newFunction.DebugName and newFunction.DebugName ~= "" then
							closure._debugname = newFunction.DebugName

							closure:Renew(newFunction.DebugName, true)

							local register = Register:Get(Instruction:A(), Block)

							register._output = register:Rewrite(newFunction.DebugName)
						end

						local expression

						local Upvalues = 0

						while Upvalues < newFunction.MaxUpvalues do
							index = index + 1

							local capture = func.Instructions[index]
							local captureProperties = capture:GetProperties()
							local captureType = capture:A()

							if (captureProperties.Code ~= enum.OpCode.CAPTURE) then
								error(("Expected capture instruction following NEWCLOSURE/DUPCLOSURE (fId: {%d}, code: {%d}, pc: {%d})"):format(func.Id, captureProperties.Code, index))
							end

							if captureType == enum.CaptureType.Reference and properties.Code == enum.OpCode.DUPCLOSURE then
								error("Invalid reference capture type when duplicating closure")
							elseif captureType == enum.CaptureType.Value then
								local declaration = Declaration:Get(capture:B(), Block)

								if not declaration then
									expression = ("DECLARATION NOT FOUND: %d"):format(capture:B())
								else
									expression = declaration._registers[1]._output
								end
							elseif captureType == enum.CaptureType.Upvalue then
								expression = func.Upvalues[capture:B()]
							else
								-- error(("Unknown capture type %d"):format(captureType))

								-- print(capture:B())

								local declaration = Declaration:Get(capture:B(), Block)

								expression = declaration and declaration._registers[1]._output or ("UPVALUE NOT FOUND: %d"):format(capture:B())
							end

							Upvalues = Upvalues + 1

							local statement = Plain:new(("upvalue[%s_%s] = %s"):format(tostring(Upvalues), expression, expression), enum.KeywordType.Upvalue)

							Block:AddStatement(properties.Name, OpCode, statement, index)

							insert(newFunction.Upvalues, ("upvalue[%s_%s]"):format(tostring(Upvalues), expression))
						end

						local decompile = Decompile:new()

						local block = BlockObj:new(Block, debugMode)

						for i, v in pairs(args) do
							args[i] = Declaration:new(i - 1, v, block, true)
						end
						
						local body, traversed, remainder = reader:ReadFunction(chunk, newFunction, decompile, block, args, nil, newFunction.sizeCode, increment, recurse or 0)

						closure._body = body

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.GETUPVAL then
						local statement = Declaration:new(Instruction:A(), Plain:new(("upvalue[%s]"):format(func.Upvalues[Instruction:B()]), enum.KeywordType.Upvalue), Block)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.SETUPVAL then
						local statement = Plain:new(("upvalue[%s] = %s"):format(func.Upvalues[Instruction:B()], Register:Get(Instruction:A(), Block)._output), enum.KeywordType.Upvalue)

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.RETURN then
						local args = {}

						local A = Instruction:A()
						local B = Instruction:B()
						
						local numArgs = B > 0 and B - 1 or (Register._top[Block] - A) + 1;
						
						for i = 1, numArgs do
							local declaration = Declaration:Get((A + i - 1), Block)
							
							table.insert(args, declaration and declaration._registers[1]._output or ("DECLARATION NOT FOUND: %d"):format((A + i - 1)))
						end
						
						if true or (index + 1 < #func.Instructions or #args > 0) then
							local statement = Plain:new(("return %s"):format(table.concat(args, ", ")), enum.KeywordType.Return)
							
							Block:AddStatement(properties.Name, OpCode, statement, index)
						end
					elseif OpCode == enum.OpCode.FORNPREP then
						local Limit = Declaration:Get(Instruction:A(), Block)

						local Step = Declaration:Get(Instruction:A() + 1, Block)

						local Variable = Declaration:Get(Instruction:A() + 2, Block)

						if not Variable then
							Variable = Declaration:new(Instruction:A() + 2, Plain:new(("NOT FOUND; %d"):format(Instruction:A() + 2), enum.KeywordType.Value), Block)
						end

						local jmp = Instruction:D() -- + 2 is for JUMPIF and JUMPBACK

						if jmp > 2^31 and jmp < 2^33 then
							jmp = (2^32 - jmp)
						end

						local decompile = Decompile:new()

						local block = BlockObj:new(Block, debugMode)

						local for_min_index = (index + 1)
						local for_max_index = (index + jmp + 1)

						local body, traversed, remainder = reader:ReadFunction(chunk, func, decompile, block, nil, for_min_index, for_max_index, nil, recurse or 0)

						local statement = ForNumeric:new(Variable, Limit, Step, body, Block)

						increment = increment + traversed + remainder

						Block:AddStatement(properties.Name, OpCode, statement, index)
					elseif OpCode == enum.OpCode.FORGPREP 
					or OpCode == enum.OpCode.FORGPREP_INEXT 
					or OpCode == enum.OpCode.FORGPREP_NEXT then
						local vars = {}
						local vals = {}

						local A = Instruction:A()

						local Iterators = A + 2 -- - (OpCode == enum.OpCode.FORGPREP and 2 or 0)

						for i = A, Iterators do
							local declaration = Declaration:Get(i, Block)

							table.insert(vals, declaration)
						end

						local LoopInstruction = func.Instructions[index + Instruction:D() + 1]

						if LoopInstruction:Code() ~= enum.OpCode.FORGLOOP then
							error(("Expected FORGLOOP following for loop body got %s"):format(LoopInstruction:GetProperties().Name))
						end

						local VarCount = Instruction:Code() == enum.OpCode.FORGPREP_INEXT and 2 or func.Instructions[index + Instruction:D() + 2]:Value()

						-- Load all of the variables with placeholder values at at the third register. The first two are reserved for the VM.
						for i = 1, VarCount do
							local register = i + 2 + A

							local declaration = Declaration:new(register, Plain:new(tostring(register), enum.KeywordType.Variable), Block)

							table.insert(vars, declaration)
						end

						local jmp = Instruction:D()

						if jmp > 2^31 and jmp < 2^33 then
							jmp = (2^32 - jmp)
						end

						local decompile = Decompile:new()

						local block = BlockObj:new(Block, debugMode)

						local for_min_index = (index + 1)
						local for_max_index = (index + jmp + 1)

						local body, traversed, remainder = reader:ReadFunction(chunk, func, decompile, block, nil, for_min_index, for_max_index, nil, recurse or 0)

						local statement = ForGeneric:new(vars, vals, body, Block)

						increment = increment + traversed + remainder

						Block:AddStatement(properties.Name, OpCode, statement, index)
					end
					
					if properties.HasAux then
						local statement = Aux:new(GetAux())
			
						index = index + 1
			
						Block:AddStatement(properties.Name, OpCode, statement, index)
					end
					
					local nextindex = index + 1 + increment

					if nextindex > pcEnd then
						remainder = nextindex - pcEnd
					end

					index = nextindex

					increment = 0

					traversed = traversed + 1
				end
				
				Object:RemoveInnerBlock(InnerBlockIndex)

				-- Block:Exit()
				
				return Block, pcEnd - pcStart, remainder
			end
			function reader:ReadInstruction(func, index)
				return func.Instructions[index]
			end
		end
		do
			Decompile.__index = Decompile

			Decompile.LocalIdCounter = 0
			Decompile.ClosureIdCounter = 0
			Decompile.UpvalueIdCounter = 0
			
			function Decompile:new()
				self = setmetatable({}, self)
				self._output = ""
				self._lua = {}
				self._blocks = {}
				self._innerBlocks = {}
				self._processed = {}
				
				return self
			end
			
			function Decompile:OpCode(opcode, lua)
				local code = lua[opcode]
				
				if code then
					self._output = self._output .. lua:Indent() .. code
					
					self._output = self._output .. lua:NewLine()
				end
			end
			
			function Decompile:Concat(input, newline)
				local _Code, _Newline, _Tabs = "", "", ""

				if not newline then
					_Code, _Newline, _Tabs = self:OpCodeParse(self._value, self._key)

					newline = _Newline
				end

				input = input:gsub("\n", ("\n%s"):format(("\t"):rep(5 + self._inBlocks)))

				self._output = self._output .. self._lastPrefixConcat .. input .. self._lastSuffixConcat
 
				self._output = self._output .. newline
			end

			function Decompile:PreConcat(Statement, pc)
				local Redundant = self:Redundance(Statement)

				local _Code, _Newline, _Tabs = "", "", ""

				if settings.KeepRedundance or not Redundant then
					_Code, _Newline, _Tabs = self:OpCodeParse(self._value, self._key)

					pc = pc or self._value._pc

					self._lastPrefixConcat = (settings.OpCodes and (_Code or "nil") or "") .. ("\t"):rep(self._inBlocks)
					self._lastSuffixConcat = (settings.ShowRedundance and Redundant and " -- [REDUNDANT]" or "")

					if type(Statement._output) == "table" then
						self:Concat(Statement._output._output)
					else
						if Statement._output then
							self:Concat(Statement._output)
						end
					end
				end
			end

			function Decompile:StateBlock(Block, debugMode)
				if true or not self._processed[Block] then
					self._processed[Block] = Block

					self._inBlocks = self._inBlocks and self._inBlocks + 1 or 1
					
					if debugMode then
						print("Reading Block", Block._address, len(Block._statements))
					end

					for key = 1, len(Block._statements) do
						local value = Block._statements[(key - 1)]
						local Statement = value and value:Value()
						
						if Statement then
							self._key = (key - 1)
							self._value = value
							
							local Handler = {}

							Handler.Block = (function(_self, Statement)
								self:StateBlock(Statement)
							end)

							Handler.Closure = (function(_self, Statement)
								self:PreConcat(Statement, value._pc)

								self:StateBlock(Statement._body)

								self:PreConcat(Plain:new("end", enum.KeywordType.End), value._pc)
							end)

							Handler.IfElse = (function(_self, Statement)
								self:PreConcat(Statement, value._pc)
								
								self:StateBlock(Statement._body)

								Handler:ElseBody(Statement._elseBody)

								self:PreConcat(Plain:new("end", enum.KeywordType.End), value._pc)
							end) do
								Handler.ElseBody = (function(_self, elseBody)
									if elseBody then
										if elseBody:IsA("IfElse") then
											self:PreConcat(Plain:new(("else%s"):format(elseBody._output), enum.KeywordType.ElseIf), value._pc)

											self:StateBlock(elseBody._body)

											if elseBody._elseBody then
												Handler:ElseBody(elseBody._elseBody)
											end
										else
											self:PreConcat(Plain:new("else"), value._pc)

											self:StateBlock(elseBody)
										end
									end
								end)
							end

							Handler.ForNumeric = (function(_self, Statement)
								self:PreConcat(Statement, value._pc)
									
								self:StateBlock(Statement._body)
								
								self:PreConcat(Plain:new("end", enum.KeywordType.End), value._pc)
							end)

							Handler.ForGeneric = (function(_self, Statement)
								self:PreConcat(Statement, value._pc)
									
								self:StateBlock(Statement._body)
								
								self:PreConcat(Plain:new("end", enum.KeywordType.End), value._pc)
							end)

							Handler.While = (function(_self, Statement)
								self:PreConcat(Statement, value._pc)
								
								self:StateBlock(Statement._ifStatement._body)
								
								self:PreConcat(Plain:new("end", enum.KeywordType.End), value._pc)
							end)

							Handler.Repeat = (function(_self, Statement)
								--[[
								local PeekStatement = Statement._ifStatement._body._statements[len(Statement._ifStatement._body._statements) - 1]

								if PeekStatement and PeekStatement:IsA("Repeat") then
									Statement._ifStatement._body._statements[len(Statement._ifStatement._body._statements) - 1] = nil
								end
								--]]

								self:PreConcat(Plain:new("repeat", enum.KeywordType.Repeat), value._pc)

								self:StateBlock(Statement._ifStatement._body)
								
								self:PreConcat(Statement, value._pc)
							end)

							Handler.General = (function(_self, Statement)
								if debugMode then
									print(Statement, Statement._val, Statement._val and Statement._val._address, Statement._output)
								end

								self:PreConcat(Statement, value._pc)
							end)

							if not Statement:IsA("Aux") then
								if Statement:IsA("Block") then
									Handler:Block(Statement)
								elseif Statement:IsA("Closure") then
									Handler:Closure(Statement)
								elseif Statement:IsA("IfElse") then
									Handler:IfElse(Statement)
								elseif Statement:IsA("ForNumeric") then
									Handler:ForNumeric(Statement)
								elseif Statement:IsA("ForGeneric") then
									Handler:ForGeneric(Statement)
								elseif Statement:IsA("While") then
									Handler:While(Statement)
								elseif Statement:IsA("Repeat") then
									Handler:Repeat(Statement)
								else
									if Statement:IsA("Declaration") then
										if Statement._val:IsA("Closure") then
											Handler:Closure(Statement._val)
										else
											Handler:General(Statement)
										end
									else
										Handler:General(Statement)
									end
								end
							end
						else
							if debugMode then
								print("Found nothing")
							end
						end
					end

					self._prevBlock = Block
					
					self._inBlocks = self._inBlocks - 1
				else
					print("PROCESSED")
				end
			end
			
			function Decompile:State()
				local Block = self._blocks

				for key = 0, len(Block) - 1 do
					local Block = Block[key]
					
					if Block then
						if Block._statements then
							self:StateBlock(Block)
						else
							error("No statements found?")
						end
					else
						error("No block found?")
					end
				end
			end

			function Decompile:Redundance(statement)
				if statement._redundant then return true end
				
				if statement:IsA("Declaration") then
					if statement._redundance then
						if statement._call then
							for key, value in pairs(statement._registers) do
								if value._references == 1 then
									if not settings.KeepRedundance then
										--Namecall Call
										--statement._output = string.match(statement._output, " = (.+)") or statement._output

										return false
									end
								end
							end
						end

						for key, value in pairs(statement._registers) do
							if value._references == 2 then
								return true
							end
						end
					end
				end

				return false
			end

			function Decompile:OpCodeParse(statement, pc)
				local _Code = statement:Code()
				local _Newline = "\n"
				local _Tabs = "\t"

				if settings.OpCodes and _Code then
					pc = ("%d"):format(pc)

					local codetabs = math.floor(((((4 * 5) - 1) - #_Code) / 4))

					_Tabs = _Tabs:rep(codetabs)

					local pctabs = math.floor(((((4 * 2) - 1) - #pc) / 4))

					_Code = _Code .. _Tabs .. pc .. ("\t"):rep(pctabs)
					
					self._previousOpCode = enum.OpCode[statement:Code()]
				end

				return _Code, _Newline, _Tabs
			end

			function Decompile:AddInnerBlock(block)
				table.insert(self._innerBlocks, block)

				return #self._innerBlocks
			end

			function Decompile:RemoveInnerBlock(index)
				table.remove(self._innerBlocks, index)
			end

			function Decompile:AddBlock(block)
				insert(self._blocks, block)
			end

			function Decompile:AddLua(lua)
				insert(self._lua, lua)
			end

			function Decompile:InvertCondition(Condition)
				if Condition == enum.Condition.If then
					return enum.Condition.Not
				elseif Condition == enum.Condition.Not then
					return enum.Condition.If
				end
			end
			
			function Decompile:ConditionString(Condition)
				if Condition == enum.Condition.If then
					return ""
				elseif Condition == enum.Condition.Not then
					return "not "
				elseif Condition == enum.Condition.Len then
					return "#"
				elseif Condition == enum.Condition.Min then
					return "-"
				else
					return
				end
			end
			
			function Decompile:CreateRegisters(func)
				local declarations = {}
				
				if (func.DebugInfo ~= nil) then
					for key, value in pairs(func.DebugInfo.Locals) do
						local Declaration = self.Declaration:new()

						declarations[value.Slot] = Declaration:Local(value)
					end
				else
					for i = 0, func.Parameters do
						declarations = Declaration:Parameter(i, ("arg%d"):format(slot + 1), 0)
					end
				end

				local expressions = {}

				for key, value in pairs(declarations) do
					expressions[value.Key] = self.LocalExpression:new(nil, value.Block)
				end
			end

			function Decompile:GetCondition()
				
			end

			function Decompile:ConstantToExpression(constant)
				if not constant then
					print("constant not found", debug.traceback())
				end

				if (constant:Type() == enum.ConstantType.Nil) then
					return constant:Value() or "nil"
				elseif (constant:Type() == enum.ConstantType.Bool) then
					return constant:Value()
				elseif (constant:Type() == enum.ConstantType.Number) then
					return constant:Value()
				elseif (constant:Type() == enum.ConstantType.String) then
					return '"' .. constant:Value() .. '"'
				elseif (constant:Type() == enum.ConstantType.Import) then
					local import = ""

					local imports = constant:Value()

					for i = 1, #imports do
						import = import .. imports[i].constant:Value()

						if i < #constant:Value() then
							import = import .. "."
						end
					end
					
					return import
				elseif (constant:Type() == enum.ConstantType.Closure) then
					return constant:Value()
				elseif (constant:Type() == enum.ConstantType.Vector) then
					local values = {}
	
					for key, value in pairs(constant:Value()) do
						table.insert(values, value)
					end
	
					return ("Vector3.new(%s)"):format(table.concat(values, ", "))
				end

				print("ConstantToExpression", constant:Type())
			end

			function Decompile:Output()
				return self._output
			end
		end
		do
			lua.__index = lua
			
			function lua:new(index, Block)
				self = setmetatable({}, self)
				self._block = Block
				self._newlines = 1
				self._index = index

				return self
			end
			
			function lua:Indent()
				return ("\t"):rep(self._block._index - 1)
			end
			
			function lua:NewLine()
				if self:Namecall() then return "" end
				
				return ("\n"):rep(self._newlines)
			end
			
			function lua:Concat(index)
				
			end
			
			function lua:Assemble(opcode, code, ...)
				if code ~= "" then
					local Prefix = opcode .. ("\t"):rep(2)
					
					if enum.OpCode[opcode] == enum.OpCode.FASTCALL then
						self._block._fastcall = true
					elseif enum.OpCode[opcode] == enum.OpCode.NAMECALL then
						self._block._namecall = true
					elseif enum.OpCode[opcode] == enum.OpCode.CALL and (self._block._namecall or self._block._fastcall) then
						self._block._namecall = false
						self._block._fastcall = false
						
						Prefix = ""
					end
	
					local Local = self._local and "" or self._local == false and "local " or ""
					
					--self._block:AddStatement(opcode, Local .. code:format(...), self._index)
					
					--lua[enum.OpCode[opcode]] = Prefix .. Local .. code:format(...)
				end
			end

			function lua:Namecall()
				return self._block._namecall
			end
			
			function lua:Fastcall()
				return self._block._fastcall
			end

			function lua:Local(index)
				self._local = self._block:Variable(index)
				
				if not self._local then
					self._block:AddLocalVariable(index)
					
					return false
				end
				
				return true
			end
			
			function lua:TableIndex(value)
				return settings.variable, value
			end
		end
		
		Reading = Main

		local Decompile = Decompile:new()

		local Block = Block:new(nil, false)
		
		local Block = reader:ReadFunction(nil, Main, Decompile, Block, nil, 0, Main.sizeCode, nil, nil)
		
		Decompile:State()
		
		return Decompile:Output()
	end
end


return disassemble
